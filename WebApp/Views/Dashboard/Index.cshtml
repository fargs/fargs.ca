@using WebApp.Library.Extensions
@using Orvosi.Shared.Enums
@model WebApp.ViewModels.DashboardViewModels.IndexViewModel

@{
    var roleId = User.Identity.GetRoleId();
    var roles = new Guid[2] { AspNetRoles.AppTester, AspNetRoles.SuperAdmin };
}

@if (roles.Contains(roleId))
{
    <div class="row" style="margin-bottom:20px">
        <div class="col-md-12">
            <form action="~/Dashboard/Index/" method="get" class="form-inline">
                <div class="form-group">
                    @Html.DropDownList("ServiceProviderId", new SelectList(Model.UserSelectList, "Value", "Text", "Group.Name", Model.SelectedUserId), "-- Service Provider --", new { @class = "form-control", onchange = "this.form.submit();" })
                </div>
                @*<div class="form-group">
                    @Html.CheckBox("showClosed", ShowClosed, new { @class = "form-control", onchange = "this.form.submit();" })
                    Show All
                </div>*@
            </form>
        </div>
    </div>
}

<div class="row">
    <div class="col-md-12">
        <ul class="nav nav-tabs nav-justified" role="tablist">
            <li role="presentation" class="active">
                <a href="#Assessments" aria-controls="Assessments" role="tab" data-toggle="tab">
                    <div class="h1 text-center">@Model.WeekFolders.Sum(c => c.AssessmentCount)</div>
                    <div class="text-muted text-center">Assessments</div>
                </a>
            </li>
            <li role="presentation">
                <a href="#AddOns" aria-controls="AddOns" role="tab" data-toggle="tab">
                    <div class="h1 text-center">@Model.AddOns.Count()</div>
                    <div class="text-muted text-center">Addendums / Paper Reviews</div>
                </a>
            </li>
        </ul>
        <div class="tab-content">
            <div role="tabpanel" class="tab-pane active panel-body" id="Assessments">
                <div id="week-folders" class="panel-group">
                    @foreach (var weekFolder in Model.WeekFolders)//.ThisWeekCards)
                    {
                        <div class="panel panel-default">
                            <div id="header-weekfolder-@weekFolder.StartDateTicks" class="panel-heading" role="tab">
                                <a role="button" data-toggle="collapse" data-parent="#week-folders" href="#weekfolder-@weekFolder.StartDateTicks">
                                    <div class="panel-title">
                                        <div class="row">
                                            <div class="col-xs-12 col-sm-8">
                                                <span>@weekFolder.WeekFolderName</span>
                                            </div>
                                            <div class="col-xs-1">
                                                <span id="todo-total-label" class="small label @(weekFolder.AssessmentToDoCount > 0 ? "label-danger" : "bg-danger")"><strong id="todo-total">@weekFolder.AssessmentToDoCount</strong></span>
                                            </div>
                                            <div class="col-xs-1">
                                                <span id="waiting-total-label" class="small label @(weekFolder.AssessmentWaitingCount > 0 ? "label-warning" : "bg-warning")"><strong id="waiting-total">@weekFolder.AssessmentWaitingCount</strong></span>
                                            </div>
                                            <div class="col-xs-1">
                                                <span id="done-total-label" class="small label @(weekFolder.AssessmentDoneCount > 0 ? "label-success" : "bg-success")"><strong id="done-total">@weekFolder.AssessmentDoneCount</strong></span>
                                            </div>
                                            <div class="col-xs-1">
                                                <span id="obsolete-total-label" class="small label @(weekFolder.AssessmentObsoleteCount > 0 ? "label-info" : "bg-info")"><strong id="obsolete-total">@weekFolder.AssessmentObsoleteCount</strong></span>
                                            </div>
                                        </div>
                                    </div>
                                </a>
                            </div>
                            <div id="weekfolder-@weekFolder.StartDateTicks" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingOne">
                                <div class="panel-body">
                                    <div class="row">
                                        @foreach (var dayFolder in weekFolder.DayFolders)
                                        {
                                            <div class="col-sm-3" id="dayfolder-@dayFolder.Day.Ticks">
                                                <strong>
                                                    @dayFolder.DayFormatted_dddd<span class="small"> @dayFolder.DayFormatted_MMMdd</span>
                                                </strong>
                                                <div>
                                                    @dayFolder.Address
                                                </div>
                                                <div class="small text-muted" style="padding-bottom:20px;">
                                                    @dayFolder.City
                                                </div>
                                                <table class="table table-condensed">
                                                    @foreach (var assessment in dayFolder.Assessments)
                                                    {
                                                        <tr id="header-assessment-@assessment.Id">
                                                            <td style="vertical-align: text-top; width:40px;">
                                                                <strong style="color: @assessment.ServiceColorCode;">@assessment.ServiceCode</strong>
                                                            </td>
                                                            <td style="vertical-align: text-top; width:30px;">
                                                                @if (assessment.ServiceRequestStatusId == TaskStatuses.Obsolete)
                                                                {
                                                                    <span id="assessment-total-label" class="small label label-info" title="@(assessment.IsNoShow ? "No Show" : "Late Cancellation")">&nbsp;</span>
                                                                }
                                                                else if (assessment.ServiceRequestStatusId == TaskStatuses.ToDo)
                                                                {
                                                                    <span id="assessment-total-label" class="small label label-danger">
                                                                        @if (assessment.HasHighWorkload)
                                                                        {
                                                                            <i class="glyphicon glyphicon-pencil"></i>
                                                                        }
                                                                        else
                                                                        {
                                                                            <span>&nbsp;</span>
                                                                        }
                                                                    </span>
                                                                }
                                                                else if (assessment.ServiceRequestStatusId == TaskStatuses.Waiting)
                                                                {
                                                                    <span id="assessment-total-label" class="small label label-warning">&nbsp;</span>
                                                                }
                                                                else
                                                                {
                                                                    <span id="assessment-total-label" class="small label label-success">&nbsp;</span>
                                                                }
                                                            </td>
                                                            <td style="vertical-align: text-top; width:80px;">
                                                                @assessment.StartTime.ToShortTimeSafe()
                                                            </td>
                                                            <td style="vertical-align: text-top; max-width: 50px;" class="wordwrap-off">
                                                                <a data-toggle="collapse" href="#assessment-@assessment.Id" title="@assessment.ClaimantName">
                                                                    @assessment.ClaimantName
                                                                </a>
                                                            </td>
                                                            <td style="vertical-align: text-top; width:50px;" class="text-center">
                                                                @assessment.Id
                                                            </td>
                                                        </tr>
                                                        <tr id="assessment-@assessment.Id" class="collapse">
                                                            <td></td>
                                                            <td colspan="4">
                                                                <div style="padding-top: 5px;">
                                                                    @foreach (var task in assessment.People.First(p => p.Id == Model.SelectedUserId).Tasks)
                                                                    {
                                                                        <form action="~/Dashboard/UpdateTaskStatus">
                                                                            <div class="checkbox">
                                                                                <label>
                                                                                    <input id="task-checkbox-@task.Id" type="checkbox"
                                                                                           value="@task.IsComplete"
                                                                                           @(task.IsComplete ? "checked" : "")
                                                                                           @(task.StatusId == TaskStatuses.Waiting || task.StatusId == TaskStatuses.Obsolete ? "disabled" : "")
                                                                                           onclick="onTaskChecked(this, false, @task.Id, @assessment.Id, @dayFolder.DayTicks, @weekFolder.StartDateTicks);">
                                                                                    @Html.Partial("_TaskStatusLabel", task) @task.Name
                                                                                </label>
                                                                            </div>
                                                                        </form>
                                                                    }
                                                                </div>
                                                                <div style="padding-top: 5px;">
                                                                    <div class="btn-toolbar" role="toolbar">
                                                                        <div class="btn-group" role="group">
                                                                            <a class="btn btn-default" target="_blank" href="~/ServiceRequest/Details/@assessment.Id"><i class="glyphicon glyphicon-list-alt"></i></a>
                                                                            <a class="btn btn-default" target="_blank" href="@assessment.BoxCaseFolderURL"><img height="18" width="18" src="~/Content/images/box.jpg" /></a>
                                                                        </div>
                                                                        <div class="btn-group" role="group">
                                                                            <button onclick="onShowTaskList(@assessment.Id)" class="btn btn-default btn-sm">
                                                                                @foreach (var person in assessment.People.Where(p => p.Id != Model.SelectedUserId))
                                                                                {
                                                                                    <span title="@(!string.IsNullOrEmpty(person.DisplayName) ? person.DisplayName : "Unassigned")"
                                                                                          class="btn btn-sm btn-circle btn-circle-groupitem disabled"
                                                                                          style="cursor: pointer; color: white; background-color: @(!string.IsNullOrEmpty(person.ColorCode) ? person.ColorCode : "red")">
                                                                                        <span class="small">@(!string.IsNullOrEmpty(person.Initials) ? person.Initials : "?")</span>
                                                                                    </span>
                                                                                }
                                                                            </button>
                                                                        </div>
                                                                        <div class="btn-group" role="group">
                                                                            <a class="btn btn-default" onclick="onShowDiscussion(@assessment.Id)"><i class="glyphicon glyphicon-comment"></i></a>
                                                                        </div>
                                                                    </div>
                                                                    <div>
                                                                        @if (!assessment.IsLateCancellation && !assessment.IsCancelled)
                                                                        {
                                                                            <form action="~/Dashboard/ToggleNoShow">
                                                                                <div class="checkbox">
                                                                                    <label>
                                                                                        <input id="task-checkbox-@assessment.Id" type="checkbox"
                                                                                               value="@assessment.IsNoShow"
                                                                                               @(assessment.IsNoShow ? "checked" : "")
                                                                                               onclick="onToggleNoShow(this, @assessment.Id, @dayFolder.DayTicks, @weekFolder.StartDateTicks);">
                                                                                        No Show
                                                                                    </label>
                                                                                </div>
                                                                            </form>
                                                                        }
                                                                    </div>
                                                                </div>
                                                            </td>
                                                        </tr>
                                                    }
                                                </table>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div role="tabpanel" class="tab-pane panel-body" id="AddOns">
                <table class="table">
                    @foreach (var assessment in Model.AddOns)
                    {

                        <tr id="header-assessment-@assessment.Id">
                            <td style="vertical-align: text-top; width:40px;">
                                <strong style="color: @assessment.ServiceColorCode;">@assessment.ServiceCode</strong>
                            </td>
                            <td style="vertical-align: text-top; width:30px;">
                                @if (assessment.ServiceRequestStatusId == TaskStatuses.ToDo)
                                {
                                    <span id="assessment-total-label" class="small label label-danger">
                                        @if (assessment.HasHighWorkload)
                                        {
                                            <strong>!</strong>
                                        }
                                        else
                                        {
                                            <span>&nbsp;</span>
                                        }
                                    </span>
                                }
                                else if (assessment.ServiceRequestStatusId == TaskStatuses.Waiting)
                                {
                                    <span id="assessment-total-label" class="small label label-warning">&nbsp;</span>
                                }
                                else
                                {
                                    <span id="assessment-total-label" class="small label label-success">&nbsp;</span>
                                }
                            </td>
                            <td style="vertical-align: text-top;">
                                <a data-toggle="collapse" href="#assessment-@assessment.Id">@assessment.Title</a>
                            </td>
                            <td style="vertical-align: text-top; width:60px;">
                                @assessment.Id
                            </td>
                        </tr>
                        <tr id="assessment-@assessment.Id" class="collapse">
                            <td></td>
                            <td colspan="4">
                                <div>
                                    @foreach (var task in assessment.People.First(p => p.Id == Model.SelectedUserId).Tasks)
                                    {
                                        <form action="~/Dashboard/UpdateTaskStatus">
                                            <div class="checkbox">
                                                <label>
                                                    <input id="task-checkbox-@task.Id" type="checkbox"
                                                           value="@task.IsComplete"
                                                           @(task.IsComplete ? "checked" : "")
                                                           @(task.StatusId == TaskStatuses.Waiting || task.StatusId == TaskStatuses.Obsolete ? "disabled" : "")
                                                           onclick="onTaskChecked(this, true, @task.Id, @assessment.Id, null, null);">
                                                    @Html.Partial("_TaskStatusLabel", task) @task.Name
                                                </label>
                                            </div>
                                        </form>
                                    }
                                </div>
                                <div style="padding-top: 5px;">
                                    <div class="btn-toolbar" role="toolbar">
                                        <div class="btn-group" role="group">
                                            <a class="btn btn-default" target="_blank" href="~/ServiceRequest/Details/@assessment.Id"><i class="glyphicon glyphicon-list-alt"></i></a>
                                            <a class="btn btn-default" target="_blank" href="@assessment.BoxCaseFolderURL"><img height="18" width="18" src="~/Content/images/box.jpg" /></a>
                                        </div>
                                        <div class="btn-group" role="group">
                                            <button onclick="onShowTaskList(@assessment.Id)" class="btn btn-default btn-sm">
                                                @foreach (var person in assessment.People.Where(p => p.Id != Model.SelectedUserId))
                                                {
                                                    <span title="@(!string.IsNullOrEmpty(person.DisplayName) ? person.DisplayName : "Unassigned")"
                                                          class="btn btn-sm btn-circle btn-circle-groupitem disabled"
                                                          style="cursor: pointer; color: white; background-color: @(!string.IsNullOrEmpty(person.ColorCode) ? person.ColorCode : "red")">
                                                        <span class="small">@(!string.IsNullOrEmpty(person.Initials) ? person.Initials : "?")</span>
                                                    </span>
                                                }
                                            </button>
                                        </div>
                                        <div class="btn-group" role="group">
                                            <a class="btn btn-default" onclick="onShowDiscussion(@assessment.Id)"><i class="glyphicon glyphicon-comment"></i></a>
                                        </div>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                </table>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="dependencies-modal"></div>

<div class="modal fade" id="tasklist-modal"></div>

<div class="modal fade" id="discussion-modal"></div>

<div class="modal fade" id="request-modal"></div>

@section Scripts{
    @*@Scripts.Render("~/bundles/signalr")
        @Scripts.Render("~/signalr/hubs")*@
    <script>

        function onTaskChecked(checkbox, isAddOn, taskId, assessmentId, day, week) {
            var params = {
                isAddOn: isAddOn,
                taskId: taskId,
                assessmentId: assessmentId,
                day: day,
                week: week,
                checkbox: checkbox
            }

            if (checkbox.checked) {
                console.log(taskId + ' is now checked');
            } else {
                console.log(taskId + ' is now unchecked');
            }

            $.ajax({
                type: "POST",
                url: '@Url.Content("~/Dashboard/UpdateTaskStatus")',
                data: JSON.stringify({
                    taskId: taskId,
                    isChecked: checkbox.checked,
                    serviceProviderGuid: '@Model.SelectedUserId'
                }),
                contentType: "application/json; charset=utf-8",
                success: function (result) {
                    UpdateView(result, params);
                    toastr.success("Task updated successfully.", "Task Updated");
                },
                error: function (err) {
                    // undo the UI change made before the ajax call
                    toastr.success("Task was not updated.", "Something went wrong!");
                }
            }, this);
        }

        function onToggleNoShow(checkbox, assessmentId, day, week) {
            var params = {
                assessmentId: assessmentId,
                day: day,
                week: week,
                checkbox: checkbox
            }

            if (checkbox.checked) {
                console.log(assessmentId + ' no show is now checked');
            } else {
                console.log(assessmentId + ' no show is now unchecked');
            }

            $.ajax({
                type: "POST",
                url: '@Url.Content("~/Dashboard/ToggleNoShow")',
                data: JSON.stringify({
                    serviceRequestId: assessmentId,
                    isChecked: checkbox.checked,
                    serviceProviderGuid: '@Model.SelectedUserId'
                }),
                contentType: "application/json; charset=utf-8",
                success: function (result) {
                    UpdateView(result, params);
                },
                error: function (err) {
                    alert(err.status + " - " + err.statusText);
                }
            }, this);
        }

        function UpdateView(result, params) {
            // get the updated assessment data
            if (!params.isAddOn) {
                var weekFolder = $.grep(result.WeekFolders, function (item) { return item.StartDateTicks == params.week; });
                SetWeekTotals(weekFolder[0], params.week);
                var dayFolder = $.grep(weekFolder[0].DayFolders, function (item) { return item.DayTicks == params.day; });
                var assessment = $.grep(dayFolder[0].Assessments, function (item) { return item.Id == params.assessmentId; });
                SetAssessmentStatus(assessment[0], params.assessmentId);
                console.log('Is not addon: ' + result);
            }
            else {
                var assessment = $.grep(result.AddOns, function (item) { return item.Id == params.assessmentId; });
                console.log('Is addon: ' + result);
            }
            //SetAssessmentTotals(assessment[0], params.assessmentId);
            updateTaskStatuses(assessment[0], params.assessmentId);

            console.log('view updated successfully: ' + result);
        }

        function SetWeekTotals(weekFolderFromResult, weekIdForEl) {
            var weekFolderEl = $('#header-weekfolder-' + weekIdForEl);

            var assessmentTotalEl   = weekFolderEl.find('#assessment-total');
            var waitingTotalEl      = weekFolderEl.find('#waiting-total-label');
            var todoTotalEl         = weekFolderEl.find('#todo-total-label');
            var doneTotalEl         = weekFolderEl.find('#done-total-label');
            var obsoleteTotalEl     = weekFolderEl.find('#obsolete-total-label');

            assessmentTotalEl.text(weekFolderFromResult.AssessmentCount);
            waitingTotalEl.text(weekFolderFromResult.AssessmentWaitingCount);
            todoTotalEl.text(weekFolderFromResult.AssessmentToDoCount);
            doneTotalEl.text(weekFolderFromResult.AssessmentDoneCount);
            obsoleteTotalEl.text(weekFolderFromResult.AssessmentObsoleteCount);
        }

        function SetAssessmentStatus(assessmentFromResult, assessmentIdForEl) {
            var assessmentEl = $('#header-assessment-' + assessmentIdForEl);
            var assessmentStatusEl = assessmentEl.find('#assessment-total-label');
            assessmentStatusEl.removeClass();

            if (assessmentFromResult.ServiceRequestStatusId == 1) // Waiting
                assessmentStatusEl.addClass('small label label-warning');
            else if (assessmentFromResult.ServiceRequestStatusId == 2) // Todo
                assessmentStatusEl.addClass('small label label-danger');
            else if (assessmentFromResult.ServiceRequestStatusId == 3) // Done
                assessmentStatusEl.addClass('small label label-success');
            else if (assessmentFromResult.ServiceRequestStatusId == 4) // Obsolete
                assessmentStatusEl.addClass('small label label-info');

        }

        //function SetAssessmentStatus(assessmentFromResult, assessmentIdForEl) {
        //    var assessmentEl = $('#header-assessment-' + assessmentIdForEl);
        //    var labelEl = assessmentEl.find('#assessment-status-label-' + assessmentIdForEl);
        //    labelEl.removeClass();

        //    if (assessmentFromResult.IsLateCancellation)
        //        labelEl.addClass('small label label-danger').text('!').prop('title', 'Late Cancelled');
        //    else if (assessmentFromResult.IsCancelled)
        //        labelEl.addClass('small label label-danger').text('!').prop('title', 'Cancelled');
        //    if (assessmentFromResult.IsNoShow)
        //        labelEl.addClass('small label label-danger').text('!').prop('title', 'No Show');
        //    else
        //        labelEl.text('').prop('title', '');
        //}

        function updateTaskStatuses(assessmentFromResult, assessmentIdForEl) {
            var taskStatuses = {
                "Waiting": 1,
                "ToDo": 2,
                "Done": 3,
                "Obsolete": 4
            };
            var assessmentEl = $('#asessment-' + assessmentIdForEl);
            var tasksEl = assessmentEl.find("span[id^='task-statuslabel-]'");
            var taskEl = null;
            $.each(assessmentFromResult.People, function (index, person) {
                $.each(person.Tasks, function (index, task) {
                    taskEl = $('#task-statuslabel-' + task.Id);
                    taskEl.removeClass();
                    taskCheckboxEl = $('#task-checkbox-' + task.Id);
                    if (task.StatusId == taskStatuses.Done) {
                        MarkTaskAsDone(taskEl, taskCheckboxEl);
                    }
                    else if (task.StatusId == taskStatuses.ToDo) {
                        MarkTaskAsToDo(taskEl, taskCheckboxEl);
                    }
                    else if (task.StatusId == taskStatuses.Waiting) {
                        MarkTaskAsWaiting(taskEl, taskCheckboxEl);
                    }
                    else if (task.StatusId == taskStatuses.Obsolete) {
                        MarkTaskAsObsolete(taskEl, taskCheckboxEl);
                    }
                });
            });
        }

        function MarkTaskAsDone(label, checkbox) {
            label.addClass("label label-success").text("Done");
            checkbox.prop('disabled', false);
        }

        function MarkTaskAsToDo(label, checkbox) {
            label.addClass("label label-danger").text("To Do");
            checkbox.prop('disabled', false);
        }

        function MarkTaskAsWaiting(label, checkbox) {
            label.addClass("label label-warning").text("Waiting");
            checkbox.prop('disabled', true);
        }

        function MarkTaskAsObsolete(label, checkbox) {
            label.addClass("label label-info").text("Obsolete");
            checkbox.prop('disabled', true);
        }

        function onShowTaskHierarchy(serviceRequestId, taskId) {
            // get the html and display it in the model
            $.ajax({
                type: "GET",
                url: '@Url.Content("~/Dashboard/TaskHierarchy")' + '?serviceRequestId=' + serviceRequestId + '&taskId=' + taskId,
                contentType: "text/html",
                success: function (result) {
                    // inject the html into the modal and display it
                    var modalDiv = $("#dependencies-modal");
                    modalDiv.html(result);
                    modalDiv.modal('toggle');
                },
                error: function (err) {
                    alert(err.status + " - " + err.statusText);
                }
            }, this);
        }

        function onShowTaskList(serviceRequestId) {
            // get the html and display it in the model
            $.ajax({
                type: "GET",
                url: '@Url.Content("~/Dashboard/TaskList")' + '?serviceRequestId=' + serviceRequestId,
                contentType: "text/html",
                success: function (result) {
                    // inject the html into the modal and display it
                    var modalDiv = $("#tasklist-modal");
                    modalDiv.html(result);
                    modalDiv.modal('toggle');
                },
                error: function (err) {
                    alert(err.status + " - " + err.statusText);
                }
            }, this);
        }

        function onShowDiscussion(serviceRequestId) {
            $.ajax({
                type: "GET",
                url: '@Url.Content("~/Dashboard/Discussion")' + '?serviceRequestId=' + serviceRequestId,
                contentType: "text/html",
                success: function (result) {
                    // inject the html into the modal and display it
                    var modalDiv = $("#discussion-modal");
                    modalDiv.html(result);
                    modalDiv.modal('toggle');
                },
                error: function (err) {
                    alert(err.status + " - " + err.statusText);
                }
            }, this);
        }

        @*$(function () {
            // Declare a proxy to reference the hub.
            var chat = $.connection.serviceRequestHub;
            // Create a function that the hub can call to broadcast messages.
            chat.client.broadcastMessage = function (name, message) {
                // Html encode display name and message.
                var encodedName = $('<div />').text(name).html();
                var encodedMsg = $('<div />').text(message).html();
                // Add the message to the page.
                $('#discussion').append('<li><strong>' + encodedName
                    + '</strong>:&nbsp;&nbsp;' + encodedMsg + '</li>');
            };
            // Get the user name and store it to prepend to messages.
            $('#displayname').val('@User.Identity.GetDisplayName()');
            // Set initial focus to message input box.
            $('#message').focus();
            // Start the connection.
            $.connection.hub.start().done(function () {
                $('#sendmessage').click(function () {
                    // Call the Send method on the hub.
                    chat.server.send($('#displayname').val(), $('#message').val(), 'servicerequestroom_188' )// $('#room').val());
                    // Clear text box and reset focus for next comment.
                    $('#message').val('').focus();
                });
            });
        });

        function joinRoom(room) {

        }

        function leaveRoom(room) {

        }

        function send(name, message, room) {

        }*@

    </script>
}
