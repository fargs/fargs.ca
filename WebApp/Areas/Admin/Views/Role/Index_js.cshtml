@using WebApp.Library;
@model WebApp.Areas.Admin.ViewModels.Role.IndexViewModel

<script type="text/javascript">
    // Generate client side model from server object

    var Role = function(data) {
        ko.mapping.fromJS(data, {}, this);

        this.hasFocus = ko.observable(false);
        this.hasFocus.subscribe(function(newValue) {
            if (!newValue && this.Name.hasChanged(1)) {
                $.ajax({
                    type: "POST",
                    url: '@Url.Content("~/Role/Update")',
                    data: ko.toJSON({
                        id: role.Id,
                        name: role.Name
                    }),
                    contentType: "application/json; charset=utf-8",
                    success: function (result) {
                        self.Description = ko.observable(result.data.Name); // can't use self.Description(result.data.Description) because we want to set the version back to 1, otherwise you will not be able to set the value back to its original because of the hasChanged check.
                    },
                    error: function (err) {
                        alert(err.status + " - " + err.statusText);
                    }
                });
            }
        }, this);

        this.UserUrl = ko.computed(function(){
            return '@Url.Content("~")Admin/Role/AssignUsers/' + this.Id();
        }, this);
    };

    // Add computed values
    var roleMapping = {
        create: function(options) {
            return new Role(options.data);
        },
        key: function(data) {
            return ko.utils.unwrapObservable(data.Id);
        }
    };

    var vm = function() {
        self = this;

        self.newName = ko.observable();

        self.Roles = ko.mapping.fromJS(@Html.Raw(Model.Roles.ToJson()), roleMapping);

        self.Remove = function(challenge) {
            $.ajax({
                type: "POST",
                url: '@Url.Content("~/Role/Remove")',
                data: ko.toJSON({
                    id: role.Id
                }),
                contentType: "application/json; charset=utf-8",
                success: function (result) {
                    self.Challenges.mappedRemove({ ChallengeID: result });
                },
                error: function (err) {
                    alert(err.status + " - " + err.statusText);
                }
            });
        };

        self.Insert = function () {
            $.ajax({
                type: "POST",
                url: '@Url.Content("~/Role/Insert")',
                data: ko.toJSON({
                    name: self.newName()
                }),
                contentType: "application/json; charset=utf-8",
                success: function (result) {
                    ko.mapping.fromJS(result.list, roleMapping, self.Roles);
                    self.newName('');
                },
                error: function (err) {
                    alert(err.status + " - " + err.statusText);
                }
            });
        };
    };

    $(document).ready(function () {
        ko.applyBindings(
            new vm()
        );
    });
</script>
