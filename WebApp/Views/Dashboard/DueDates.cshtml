@using FluentDateTime
@using WebApp.Library
@using WebApp.Library.Extensions
@using MVCGrid.Web

@model TaskListArgs
@{
    Layout = "~/Views/Dashboard/_Layout.cshtml";
    var roleId = User.Identity.GetRoleId();
    var userId = User.Identity.GetGuidUserId();
    var physicianId = User.Identity.GetUserContext().Id;
    var features = User.Identity.GetFeatures();

    var viewDataService = ContextPerRequest.ViewDataService;
    var taskIdSelectListItems = viewDataService.GetTaskIds(userId);
    var cities = viewDataService.GetCities(userId);
    var taskStatuses = viewDataService.GetTaskStatusSelectList();
}

@functions {
    string IsSelected(string item, short[] selected)
    {
        short value;
        short.TryParse(item, out value);
        return selected == null || !selected.Contains(value) ? "" : " selected ";
    }
}

<div class="form-inline">
    @*<input type="date" class="form-control" data-mvcgrid-type="filter" data-mvcgrid-option="DueDate" data-mvcgrid-apply-filter="change" placeholder="Due Date Filter" />*@
    @*@Html.CheckBoxListFor(m => m.TaskStatusIds, taskStatuses, new { data_mvcgrid_type = "filter", data_mvcgrid_option = "TaskStatusId", data_mvcgrid_apply_filter = "change" })*@
    @*<label class="control-label">
        <input type="checkbox" data-mvcgrid-option="IsOverdue" data-mvcgrid-apply-filter="change" class="form-control" />
        Always show Overdue
    </label>*@
    <select id="task-status-filter" data-mvcgrid-type="filter" data-mvcgrid-option="TaskStatusId" data-mvcgrid-apply-filter="change" class="form-control" multiple>
        @foreach (var statusId in taskStatuses)
        {
            <option value="@statusId.Value" @IsSelected(statusId.Value, Model.TaskStatusIds)>@statusId.Text</option>
        }
    </select>
    <select id="task-filter" data-mvcgrid-type="filter" data-mvcgrid-option="Task" data-mvcgrid-apply-filter="change" class="form-control" multiple>
        @foreach (var taskId in taskIdSelectListItems)
        {
            <option value="@taskId.Value" @IsSelected(taskId.Value, Model.TaskIds)>@taskId.Text</option>
        }
    </select>
    <select id="city-filter" data-mvcgrid-type="filter" data-mvcgrid-option="City" data-mvcgrid-apply-filter="change" class="form-control">
        @foreach (var city in cities)
        {
            <option value="@city.Id" @IsSelected(city.Id.ToString(), Model.Cities)>@city.Name</option>
        }
    </select>
    <button onclick="archiveCompletedTasks()"><i class="fa fa-archive"></i> Archive Completed</button>
</div>
<div>
    <a>reset filters to defaults</a>
</div>

@Html.MVCGrid("TaskGrid")


@*<form action="~/Dashboard/DueDates" method="get">
            <input type="hidden" name="serviceProviderId" value="@Model.SelectedUserId" />
            <ul class="list-unstyled list-inline">
                @foreach (var item in Model.TaskFilterViewModel.Tasks)
                {
                    <li><input type="checkbox" name="selectedTaskTypes" value="@item.Id" @(Model.TaskFilterViewModel.SelectedTaskTypes.Any(taskId => taskId == item.Id) ? "checked" : string.Empty) /> @item.Name</li>
                }
                <li><button type="submit" class="btn btn-small">Apply Filter</button></li>
            </ul>
        </form>

    <div id="day-folders" class="panel-group">

        <div class="panel">
            <div class="panel-heading">
                <div class="row">
                    <div class="col-xs-12 col-sm-9"><strong>Day</strong></div>
                    <div class="col-xs-12 col-sm-1 text-center"><strong>To Do</strong></div>
                    <div class="col-xs-12 col-sm-1 text-center"><strong>Waiting On</strong></div>
                    <div class="col-xs-12 col-sm-1 text-center"><strong>On Hold</strong></div>
                </div>
            </div>
        </div>
        @foreach (var day in Model.OrderBy(d => d.Day))
        {
            <div class="panel
                @(day.Day.Date > SystemTime.Now().Date ? " panel-default" : string.Empty )
                @(day.Day.Date == SystemTime.Now().Date ? " panel-success" : string.Empty )
                @(day.Day.Date < SystemTime.Now().Date ? " panel-danger" : string.Empty )">
                <div id="header-dayfolder-@day.Day.Ticks" class="panel-heading" role="tab">
                    <a role="button" onclick="getDay('@day.Day.ToOrvosiDateFormat()', 'dayfolder-@day.Day.Ticks')">
                        <div class="panel-title">
                            <div class="row">
                                <div class="col-xs-12 col-sm-9">
                                    <span>@day.Day.ToString("MMM dd dddd").ToUpper()</span>
                                </div>
                                <div class="col-xs-12 col-sm-1 text-center">
                                    <span id="todo-total-label" class="small label @(day.TaskStatusSummary.ToDoCount > 0 ? "label-danger" : "bg-danger")"><strong id="todo-total">@day.TaskStatusSummary.ToDoCount</strong></span>
                                </div>
                                <div class="col-xs-12 col-sm-1 text-center">
                                    <span id="waiting-total-label" class="small label @(day.TaskStatusSummary.WaitingCount > 0 ? "label-warning" : "bg-warning")"><strong id="waiting-total">@(day.TaskStatusSummary.WaitingCount)</strong></span>
                                </div>
                                <div class="col-xs-12 col-sm-1 text-center">
                                    <span id="onhold-total-label" class="small label @(day.TaskStatusSummary.OnHoldCount > 0 ? "label-info" : "bg-info")"><strong id="onhold-total">@day.TaskStatusSummary.OnHoldCount</strong></span>
                                </div>
                            </div>
                        </div>
                    </a>
                </div>
                <section id="dayfolder-@day.Day.Ticks" class="panel-collapse collapse">
                </section>
                @*<section id="dayfolder-@day.Day.Ticks" class="panel-collapse collapse">
                        <div class="panel-body">
                            @foreach (var serviceRequest in day.Cases.OrderBy(sr => sr.AppointmentDate).ThenBy(sr => sr.StartTime))
                            {
                                <div class="row o-dashboard-tr">
                                    <div class="col-md-2 o-dashboard-td">
                                        <a target="_blank" class="small" href="~/ServiceRequest/Details/@serviceRequest.ServiceRequestId"><h4>@serviceRequest.ClaimantName - @serviceRequest.ServiceRequestId</h4></a>
                                        <div>@serviceRequest.Company.Name</div>
                                        <strong style="color: @serviceRequest.Service.ColorCode;">@serviceRequest.Service.Code</strong>
                                        @if (serviceRequest.AppointmentDate.HasValue)
                                        {
                                            <div class="small text-muted">
                                                on @serviceRequest.AppointmentDate.ToOrvosiDateFormat() @serviceRequest.StartTime.ToShortTimeSafe()
                                            </div>
                                        }
                                        <p>
                                            <a class="btn btn-default" target="_blank" href="@serviceRequest.BoxCaseFolderURL"><i class="fa fa-folder-open-o fa-lg"></i>&nbsp;Open Case Folder</a>
                                        </p>
                                    </div>
                                    <div class="col-md-2 o-dashboard-td">
                                        @Html.Partial("~/Views/Note/_Note.cshtml", new WebApp.ViewModels.ServiceRequestViewModels.NoteViewModel() { ServiceRequestId = serviceRequest.ServiceRequestId, Note = serviceRequest.Notes })
                                    </div>
                                    <div class="col-md-4" id="tasklist-container-@serviceRequest.ServiceRequestId">
                                        @Html.Action("TaskList", "ServiceRequestTask", new
                                        {
                                            serviceRequestId = serviceRequest.ServiceRequestId,
                                            viewOptions = TaskListViewOptions.Dashboard,
                                            options = TaskListViewModelFilter.CriticalPathOrAssignedToUser
                                        })
                                    </div>
                                    <div class="col-md-4 o-dashboard-td">
                                        @Html.Partial("~/Views/ServiceRequestMessage/_Discussion.cshtml", serviceRequest)
                                        @Html.Partial("~/Views/ServiceRequestMessage/_PostMessage.cshtml", serviceRequest)
                                    </div>
                                </div>
                            }
                        </div>
                    </section>
            </div>
        }
    </div>
*@
@Html.Partial("~/Views/Note/_NoteModalForm.cshtml")
@Html.Partial("ModalContainer")

@section Scripts {

    <script src="@Url.Content("~/signalr/hubs")"></script>
    @Html.Partial("~/Views/ServiceRequestTask/TaskListJS.cshtml")
    @Html.Partial("~/Views/ServiceRequest/CaseJS.cshtml")

    <script>

        $(function () {
            $('#task-status-filter').select2({ placeholder: { id: "", text: "All Statuses" }, allowClear: true });
            $('#task-filter').select2({ placeholder: { id: "", text: "All Tasks" }, allowClear: true });
            $('#city-filter').select2({ placeholder: { id: "", text: "All Cities" }, allowClear: true });
        })

        function getDay(day, targetId) {
            let url = '@Url.Content("~/ServiceRequestTask/TaskList")';

            var container = $(document.getElementById(targetId));
            if (!container.hasClass('in')) {
                $.post(url, {
                    DateRange: {
                        StartDate: day,
                        EndDate: day,
                        FilterType: 'On'
                    },
                    ViewTarget: "DueDates",
                    ViewFilter: "MyActiveTasks"
                })
                .done(function (result) {
                    document.getElementById(targetId).innerHTML = result;
                    container.collapse('toggle');
                    //joinRoom(serviceRequestId);
                    //refreshValidationResults(serviceRequestId);
                });
            }
            else {
                container.collapse('toggle');
            }
        }

        function refreshServiceRequestTasks(serviceRequestId) {

            $.ajax({
                type: "GET",
                url: '@Url.Content("~/Dashboard/DueDates?serviceRequestId=")' + serviceRequestId,
                contentType: "text/html",
                success: function (result) {
                    $('#service-request-tasks-' + serviceRequestId).replaceWith(result);
                },
                error: function (err) {
                    // undo the UI change made before the ajax call
                    window.location.reload();
                }
            }, this);

        }

        function onTaskChecked(checkbox, taskId, serviceRequestId) {
            $.ajax({
                type: "POST",
                url: '@Url.Content("~/Dashboard/UpdateTaskStatus")',
                data: JSON.stringify({
                    taskId: taskId,
                    isChecked: checkbox.checked
                }),
                contentType: "application/json; charset=utf-8",
                success: function (result) {
                    toastr.success("Task updated successfully.", "Task Updated");
                    refreshServiceRequestTasks(serviceRequestId);
                },
                error: function (err) {
                    // undo the UI change made before the ajax call
                    toastr.success("Task was not updated.", "Something went wrong!");
                }
            }, this);
        }



        function archiveCompletedTasks() {
            let url = '@Url.Content("~/ServiceRequestTask/ArchiveCompleted")';
            $.post(url)
                .done(function () {
                    MVCGrid.reloadGrid('TaskGrid');
                });
        }

        function taskChanged(id, serviceRequestId) {
            toastr.success("The task has been updated");
            MVCGrid.reloadGrid('TaskGrid');
        }

        function tasklistChanged(serviceRequestId) {
            let url = '@Url.Content("~/ServiceRequestTask/TaskList")';

            let container = document.getElementById('tasklist-container');
            if (container) {
                $.get(url, {
                    ServiceRequestId: serviceRequestId,
                    ViewTarget: '@ViewTarget.Modal',
                    ViewFilter: '@TaskListViewModelFilter.CriticalPathOrAssignedToUser'
                })
                .done(function (result) {
                    document.getElementById('tasklist-container').innerHTML = result;
                })
            }
            MVCGrid.reloadGrid('TaskGrid');
        }

        function serviceRequestStatusChanged(serviceRequestId) {
            let url = '@Url.Content("~/ServiceRequest/Case")';

            let container = document.getElementById('case-container');
            if (container) {
                $.get(url, {
                    serviceRequestId: serviceRequestId,
                    viewOptions: '@ViewTarget.Modal'
                })
                .done(function (result) {

                    document.getElementById('case-container').innerHTML = result;
                })
            }
            MVCGrid.reloadGrid('TaskGrid');
        }

        function showCaseDetails(serviceRequestId) {
            let url = '@Url.Content("~/ServiceRequest/Details2")';
            $.get(url, {
                serviceRequestId: serviceRequestId
            }).done(function (result) {
                $('#modal-content').html(result);
                $('#modal-container').modal('toggle');
                boxInfoChanged(serviceRequestId);
            });
        }

        function boxInfoChanged(serviceRequestId) {
            var loader = $('#box-loader');
            loader.show();
            $.get('@Url.Content("~/ServiceRequest/BoxManager")',
                {
                    serviceRequestId: serviceRequestId
                })
                .done(function (result) {
                    document.getElementById('box-container').innerHTML = result;
                })
                .always(function () {
                    loader.hide();
                });
        }
    </script>
}
