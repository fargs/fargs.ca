@page "/admin/invites/n"

@using ImeHub.Portal.Data.Companies
@using ImeHub.Portal.Services.DateTimeService
@using ImeHub.Portal.Services.Email
@using ImeHub.Portal.Services.Email.CompanyUserInvitation
@using ImeHub.Portal.Services.Email.CompanyUserRegistrationInvitation
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using ImeHub.Portal.Library
@using System.Net.Mail

@implements IDisposable

@inject IDbContextFactory<ApplicationDbContext> dbContextFactory
@inject IToastService toastService
@inject NavigationManager navManager
@inject UserManager<ApplicationUser> userManager
@inject IDateTime dateTime
@inject IRazorToStringViewRenderer razor
@inject ICompanyUserInvitationEmailService companyUserInvitation
@inject ICompanyUserRegistrationInvitationEmailService companyUserRegistrationInvitation

@if (Companies != null)
{
    <EditForm Model="@Input" OnValidSubmit="@HandleValidSubmit" class="p-3">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mt-3">
            <InputText @bind-Value="@Input.Title" placeholder="Title"></InputText>
        </div>
        <div class="mt-3">
            <InputText @bind-Value="@Input.FirstName" placeholder="Given name"></InputText>
        </div>
        <div class="mt-3">
            <InputText @bind-Value="@Input.LastName" placeholder="Surname"></InputText>
        </div>
        <div class="mt-3">
            <InputText @bind-Value="@Input.Email" placeholder="Email" aria-describedby="email-help"></InputText>
        </div>
        <div class="mt-3">
            <InputSelect @bind-Value="Input.CompanyId">
                <option value=@(0)></option>
                @foreach (var company in Companies)
                {
                <option value="@company.Id">@company.Name</option>
                }
        </InputSelect>
    </div>

    @if (Input.CompanyId == default)
        {
            Input.CompanyName = default;
            Input.CompanyRoleId = default;
        }
        else
        {
            Input.CompanyName = Companies.Single(c => c.Id == Input.CompanyId).Name;

            using var _dbContext = dbContextFactory.CreateDbContext();
            CompanyRoles = _dbContext.CompanyRoles.Where(cr => cr.Company.Id == Input.CompanyId).ToList();

            if (!CompanyRoles.Any(cr => cr.Id == Input.CompanyRoleId))
            {
                Input.CompanyRoleId = default;
            }

            <div class="mt-3">
                <InputSelect @bind-Value="Input.CompanyRoleId">
                    <option value=@(0)></option>
                    @foreach (var companyRole in CompanyRoles)
                    {
                        <option value="@companyRole.Id">@companyRole.Name</option>
                    }
                </InputSelect>
            </div>
        }
        <button type="submit" class="">Submit</button>
    </EditForm>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected CompanyUserInvitation Input { get; set; }

    bool IsCustomized { get; set; }
    protected string Body { get; set; }

    private ApplicationDbContext dbContext { get; set; }

    IEnumerable<Company> Companies { get; set; }
    IEnumerable<CompanyRole> CompanyRoles { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;

        Input = new()
        {
            ObjectGuid = Guid.NewGuid(),
            ExpiryDate = dateTime.Now.AddDays(14),
            InvitedDate = dateTime.Now,
            InvitedBy = user.UserId()
        };

        dbContext = dbContextFactory.CreateDbContext();

        Companies = await dbContext.Companies.OrderBy(c => c.Name).ToListAsync();

        await base.OnInitializedAsync();
    }

    protected async Task HandleValidSubmit()
    {        
        var random = new Random();
        Input.InviteCode = random.Next(111111, 999999).ToString();
        
        var appUser = await userManager.FindByEmailAsync(Input.Email);
        if (appUser != null)
        {
            Input.UserId = appUser.Id;
        }
        dbContext.Add(Input);        

        try
        {
            await dbContext.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException ex)
        {
            toastService.ShowError(ex.Message);
        }
        catch (DbUpdateException ex)
        {
            toastService.ShowError(ex.Message);
        }
        catch (Exception)
        {
            throw;
        }

        if (appUser == null)
        {
            var inviteUri = navManager.ToAbsoluteUri($"{AnonymousRoutes.RegisterBase}{Input.ObjectGuid}");
            CompanyUserRegistrationInvitationTemplateData templateData = new()
            {
                Name = Input.DisplayName,
                CompanyName = Input.CompanyName,
                InviteUrl = inviteUri.ToString(),
                InviteCode = Input.InviteCode
            };
            await companyUserRegistrationInvitation.SendEmailAsync(Input.Email, templateData);    
        }
        else
        {
            var inviteUri = navManager.ToAbsoluteUri($"{RootRoutes.AcceptBase}{Input.ObjectGuid}");
            CompanyUserInvitationTemplateData templateData = new()
            {
                Name = Input.DisplayName,
                CompanyName = Input.CompanyName,
                InviteUrl = inviteUri.ToString()
            };
            await companyUserInvitation.SendEmailAsync(Input.Email, templateData);    
        }

        toastService.ShowSuccess($"{Input.DisplayName} was saved successfully.");

        navManager.NavigateTo(Routes.List);
    }

    public void Dispose()
    {
        dbContext.Dispose();
    }
}
