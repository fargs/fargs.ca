

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Connection String:      "Data Source=(local);Initial Catalog=ImeHub;Integrated Security=True;Application Name=ImeHub"
// ------------------------------------------------------------------------------------------------
// Database Edition        : Developer Edition (64-bit)
// Database Engine Edition : Enterprise
// Database Version        : 14.0.1000.169

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.7
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace ImeHub.Data
{

    #region POCO Configuration

    // Address
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Address>
    {
        public AddressConfiguration()
            : this("dbo")
        {
        }

        public AddressConfiguration(string schema)
        {
            ToTable("Address", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PhysicianId).HasColumnName(@"PhysicianId").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.CompanyId).HasColumnName(@"CompanyId").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.AddressTypeId).HasColumnName(@"AddressTypeID").HasColumnType("tinyint").IsRequired();
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);
            Property(x => x.Attention).HasColumnName(@"Attention").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.Address1).HasColumnName(@"Address1").HasColumnType("nvarchar").IsRequired().HasMaxLength(255);
            Property(x => x.Address2).HasColumnName(@"Address2").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.CityId).HasColumnName(@"CityId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.PostalCode).HasColumnName(@"PostalCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.TimeZoneId).HasColumnName(@"TimeZoneId").HasColumnType("smallint").IsRequired();

            // Foreign keys
            HasOptional(a => a.Physician).WithMany(b => b.Addresses).HasForeignKey(c => c.PhysicianId).WillCascadeOnDelete(false); // FK_Address_Physician
            HasRequired(a => a.AddressType).WithMany(b => b.Addresses).HasForeignKey(c => c.AddressTypeId).WillCascadeOnDelete(false); // FK_Address_AddressType
            HasRequired(a => a.City).WithMany(b => b.Addresses).HasForeignKey(c => c.CityId).WillCascadeOnDelete(false); // FK_Address_City
            HasRequired(a => a.TimeZone).WithMany(b => b.Addresses).HasForeignKey(c => c.TimeZoneId).WillCascadeOnDelete(false); // FK_Address_TimeZone
        }
    }

    // AddressType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AddressTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AddressType>
    {
        public AddressTypeConfiguration()
            : this("dbo")
        {
        }

        public AddressTypeConfiguration(string schema)
        {
            ToTable("AddressType", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("tinyint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
        }
    }

    // City
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CityConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<City>
    {
        public CityConfiguration()
            : this("dbo")
        {
        }

        public CityConfiguration(string schema)
        {
            ToTable("City", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("nvarchar").IsOptional().HasMaxLength(3);
            Property(x => x.ProvinceId).HasColumnName(@"ProvinceId").HasColumnType("smallint").IsRequired();

            // Foreign keys
            HasRequired(a => a.Province).WithMany(b => b.Cities).HasForeignKey(c => c.ProvinceId).WillCascadeOnDelete(false); // FK_City_Province
        }
    }

    // Company
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CompanyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Company>
    {
        public CompanyConfiguration()
            : this("dbo")
        {
        }

        public CompanyConfiguration(string schema)
        {
            ToTable("Company", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("nvarchar").IsOptional().HasMaxLength(10);
            Property(x => x.ColorCode).HasColumnName(@"ColorCode").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
            Property(x => x.PhysicianId).HasColumnName(@"PhysicianId").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.BillingEmail).HasColumnName(@"BillingEmail").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.ReportsEmail).HasColumnName(@"ReportsEmail").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.ParentId).HasColumnName(@"ParentId").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.NoShowRate).HasColumnName(@"NoShowRate").HasColumnType("int").IsRequired();
            Property(x => x.LateCancellationRate).HasColumnName(@"LateCancellationRate").HasColumnType("int").IsRequired();
            Property(x => x.LateCancellationPolicy).HasColumnName(@"LateCancellationPolicy").HasColumnType("int").IsRequired();
            Property(x => x.LateCancellationRateFormat).HasColumnName(@"LateCancellationRateFormat").HasColumnType("tinyint").IsRequired();
            Property(x => x.NoShowRateFormat).HasColumnName(@"NoShowRateFormat").HasColumnType("tinyint").IsRequired();

            // Foreign keys
            HasOptional(a => a.Parent).WithMany(b => b.Companies).HasForeignKey(c => c.ParentId).WillCascadeOnDelete(false); // FK_Company_ParentId
            HasOptional(a => a.Physician).WithMany(b => b.Companies).HasForeignKey(c => c.PhysicianId); // FK_Company_Physician
        }
    }

    // Country
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CountryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Country>
    {
        public CountryConfiguration()
            : this("dbo")
        {
        }

        public CountryConfiguration(string schema)
        {
            ToTable("Country", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.Iso3DigitCountry).HasColumnName(@"ISO3DigitCountry").HasColumnType("smallint").IsRequired();
            Property(x => x.Iso2CountryCode).HasColumnName(@"ISO2CountryCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(2);
            Property(x => x.Iso3CountryCode).HasColumnName(@"ISO3CountryCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(3);
        }
    }

    // Feature
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FeatureConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Feature>
    {
        public FeatureConfiguration()
            : this("dbo")
        {
        }

        public FeatureConfiguration(string schema)
        {
            ToTable("Feature", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(255);
            Property(x => x.ParentId).HasColumnName(@"ParentID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();

            // Foreign keys
            HasOptional(a => a.Parent).WithMany(b => b.Features).HasForeignKey(c => c.ParentId).WillCascadeOnDelete(false); // FK_Feature_Parent
        }
    }

    // Physician
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PhysicianConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Physician>
    {
        public PhysicianConfiguration()
            : this("dbo")
        {
        }

        public PhysicianConfiguration(string schema)
        {
            ToTable("Physician", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CompanyName).HasColumnName(@"CompanyName").HasColumnType("nvarchar").IsOptional().HasMaxLength(250);
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("nvarchar").IsOptional().HasMaxLength(10);
            Property(x => x.ColorCode).HasColumnName(@"ColorCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(10);
            Property(x => x.OwnerId).HasColumnName(@"OwnerId").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.ManagerId).HasColumnName(@"ManagerId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.PrimaryAddressId).HasColumnName(@"PrimaryAddressId").HasColumnType("smallint").IsOptional();
            Property(x => x.Designations).HasColumnName(@"Designations").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);

            // Foreign keys
            HasOptional(a => a.Owner).WithMany(b => b.Physicians_OwnerId).HasForeignKey(c => c.OwnerId).WillCascadeOnDelete(false); // FK_Physician_Owner
            HasRequired(a => a.Manager).WithMany(b => b.Physicians_ManagerId).HasForeignKey(c => c.ManagerId).WillCascadeOnDelete(false); // FK_Physician_Manager
        }
    }

    // PhysicianInvite
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PhysicianInviteConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PhysicianInvite>
    {
        public PhysicianInviteConfiguration()
            : this("dbo")
        {
        }

        public PhysicianInviteConfiguration(string schema)
        {
            ToTable("PhysicianInvite", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PhysicianId).HasColumnName(@"PhysicianId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.ToEmail).HasColumnName(@"ToEmail").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
            Property(x => x.ToName).HasColumnName(@"ToName").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.SentDate).HasColumnName(@"SentDate").HasColumnType("datetime").IsOptional();
            Property(x => x.LinkClickedDate).HasColumnName(@"LinkClickedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.FromEmail).HasColumnName(@"FromEmail").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
            Property(x => x.FromName).HasColumnName(@"FromName").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
            Property(x => x.AcceptanceStatusId).HasColumnName(@"AcceptanceStatusId").HasColumnType("tinyint").IsRequired();

            // Foreign keys
            HasOptional(a => a.User).WithMany(b => b.PhysicianInvites).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_PhysicianInvite_User
            HasRequired(a => a.Physician).WithMany(b => b.PhysicianInvites).HasForeignKey(c => c.PhysicianId).WillCascadeOnDelete(false); // FK_PhysicianInvite_Physician
            HasRequired(a => a.PhysicianInviteAcceptanceStatu).WithMany(b => b.PhysicianInvites).HasForeignKey(c => c.AcceptanceStatusId).WillCascadeOnDelete(false); // FK_PhysicianInvite_PhysicianInviteAcceptanceStatus
        }
    }

    // PhysicianInviteAcceptanceStatus
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PhysicianInviteAcceptanceStatuConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PhysicianInviteAcceptanceStatu>
    {
        public PhysicianInviteAcceptanceStatuConfiguration()
            : this("dbo")
        {
        }

        public PhysicianInviteAcceptanceStatuConfiguration(string schema)
        {
            ToTable("PhysicianInviteAcceptanceStatus", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("tinyint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
        }
    }

    // Province
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProvinceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Province>
    {
        public ProvinceConfiguration()
            : this("dbo")
        {
        }

        public ProvinceConfiguration(string schema)
        {
            ToTable("Province", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CountryId).HasColumnName(@"CountryID").HasColumnType("smallint").IsRequired();
            Property(x => x.ProvinceName).HasColumnName(@"ProvinceName").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.ProvinceCode).HasColumnName(@"ProvinceCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.ProvinceTypeId).HasColumnName(@"ProvinceTypeID").HasColumnType("tinyint").IsOptional();

            // Foreign keys
            HasRequired(a => a.Country).WithMany(b => b.Provinces).HasForeignKey(c => c.CountryId).WillCascadeOnDelete(false); // FK_Province_Country
        }
    }

    // Role
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RoleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Role>
    {
        public RoleConfiguration()
            : this("dbo")
        {
        }

        public RoleConfiguration(string schema)
        {
            ToTable("Role", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(256);
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("nvarchar").IsOptional().HasMaxLength(10);
            Property(x => x.ColorCode).HasColumnName(@"ColorCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            HasMany(t => t.Users_UserId).WithMany(t => t.Roles).Map(m =>
            {
                m.ToTable("UserRole", "dbo");
                m.MapLeftKey("RoleId");
                m.MapRightKey("UserId");
            });
        }
    }

    // RoleFeature
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RoleFeatureConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RoleFeature>
    {
        public RoleFeatureConfiguration()
            : this("dbo")
        {
        }

        public RoleFeatureConfiguration(string schema)
        {
            ToTable("RoleFeature", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.FeatureId).HasColumnName(@"FeatureId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();

            // Foreign keys
            HasRequired(a => a.Feature).WithMany(b => b.RoleFeatures).HasForeignKey(c => c.FeatureId).WillCascadeOnDelete(false); // FK_RoleFeature_Feature
            HasRequired(a => a.Role).WithMany(b => b.RoleFeatures).HasForeignKey(c => c.RoleId).WillCascadeOnDelete(false); // FK_RoleFeature_Role
        }
    }

    // Service
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ServiceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Service>
    {
        public ServiceConfiguration()
            : this("dbo")
        {
        }

        public ServiceConfiguration(string schema)
        {
            ToTable("Service", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CompanyId).HasColumnName(@"CompanyId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(2000);
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("nvarchar").IsOptional().HasMaxLength(10);
            Property(x => x.ColorCode).HasColumnName(@"ColorCode").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
            Property(x => x.Price).HasColumnName(@"Price").HasColumnType("decimal").IsRequired().HasPrecision(18,2);
            Property(x => x.IsTravelRequired).HasColumnName(@"IsTravelRequired").HasColumnType("bit").IsRequired();

            // Foreign keys
            HasRequired(a => a.Company).WithMany(b => b.Services).HasForeignKey(c => c.CompanyId); // FK_Service_Company
        }
    }

    // TeamMember
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TeamMemberConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TeamMember>
    {
        public TeamMemberConfiguration()
            : this("dbo")
        {
        }

        public TeamMemberConfiguration(string schema)
        {
            ToTable("TeamMember", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PhysicianId).HasColumnName(@"PhysicianId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.Physician).WithMany(b => b.TeamMembers).HasForeignKey(c => c.PhysicianId).WillCascadeOnDelete(false); // FK_TeamMember_Physician
            HasRequired(a => a.Role).WithMany(b => b.TeamMembers).HasForeignKey(c => c.RoleId).WillCascadeOnDelete(false); // FK_TeamMember_Role
            HasRequired(a => a.User).WithMany(b => b.TeamMembers).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_TeamMember_User
        }
    }

    // TimeZone
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TimeZoneConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TimeZone>
    {
        public TimeZoneConfiguration()
            : this("dbo")
        {
        }

        public TimeZoneConfiguration(string schema)
        {
            ToTable("TimeZone", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("smallint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Iana).HasColumnName(@"IANA").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Iso).HasColumnName(@"ISO").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
        }
    }

    // TravelPrice
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TravelPriceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TravelPrice>
    {
        public TravelPriceConfiguration()
            : this("dbo")
        {
        }

        public TravelPriceConfiguration(string schema)
        {
            ToTable("TravelPrice", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ServiceId).HasColumnName(@"ServiceId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.Price).HasColumnName(@"Price").HasColumnType("decimal").IsRequired().HasPrecision(18,2);
            Property(x => x.CityId).HasColumnName(@"CityId").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.City).WithMany(b => b.TravelPrices).HasForeignKey(c => c.CityId).WillCascadeOnDelete(false); // FK_TravelPrice_City
            HasRequired(a => a.Service).WithMany(b => b.TravelPrices).HasForeignKey(c => c.ServiceId); // FK_TravelPrice_Service
        }
    }

    // User
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class UserConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<User>
    {
        public UserConfiguration()
            : this("dbo")
        {
        }

        public UserConfiguration(string schema)
        {
            ToTable("User", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);
            Property(x => x.EmailConfirmed).HasColumnName(@"EmailConfirmed").HasColumnType("bit").IsRequired();
            Property(x => x.PasswordHash).HasColumnName(@"PasswordHash").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.SecurityStamp).HasColumnName(@"SecurityStamp").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.PhoneNumberConfirmed).HasColumnName(@"PhoneNumberConfirmed").HasColumnType("bit").IsRequired();
            Property(x => x.TwoFactorEnabled).HasColumnName(@"TwoFactorEnabled").HasColumnType("bit").IsRequired();
            Property(x => x.LockoutEndDateUtc).HasColumnName(@"LockoutEndDateUtc").HasColumnType("datetime").IsOptional();
            Property(x => x.LockoutEnabled).HasColumnName(@"LockoutEnabled").HasColumnType("bit").IsRequired();
            Property(x => x.AccessFailedCount).HasColumnName(@"AccessFailedCount").HasColumnType("int").IsRequired();
            Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar").IsRequired().HasMaxLength(256);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.LastActivationDate).HasColumnName(@"LastActivationDate").HasColumnType("datetime").IsOptional();
            Property(x => x.LogoCssClass).HasColumnName(@"LogoCssClass").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.ColorCode).HasColumnName(@"ColorCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Notes).HasColumnName(@"Notes").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.IsTestRecord).HasColumnName(@"IsTestRecord").HasColumnType("bit").IsRequired();
            Property(x => x.IsAppTester).HasColumnName(@"IsAppTester").HasColumnType("bit").IsRequired();
            Property(x => x.PhysicianId).HasColumnName(@"PhysicianId").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.Role).WithMany(b => b.Users_RoleId).HasForeignKey(c => c.RoleId).WillCascadeOnDelete(false); // FK_User_Role
        }
    }

    // Workflow
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class WorkflowConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Workflow>
    {
        public WorkflowConfiguration()
            : this("dbo")
        {
        }

        public WorkflowConfiguration(string schema)
        {
            ToTable("Workflow", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
            Property(x => x.PhysicianId).HasColumnName(@"PhysicianId").HasColumnType("uniqueidentifier").IsOptional();
        }
    }

    // WorkflowTask
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class WorkflowTaskConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<WorkflowTask>
    {
        public WorkflowTaskConfiguration()
            : this("dbo")
        {
        }

        public WorkflowTaskConfiguration(string schema)
        {
            ToTable("WorkflowTask", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.WorkflowId).HasColumnName(@"WorkflowId").HasColumnType("smallint").IsRequired();
            Property(x => x.Sequence).HasColumnName(@"Sequence").HasColumnType("smallint").IsRequired();
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
            Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.IsBaselineDate).HasColumnName(@"IsBaselineDate").HasColumnType("bit").IsRequired();
            Property(x => x.DueDateDurationFromBaseline).HasColumnName(@"DueDateDurationFromBaseline").HasColumnType("smallint").IsOptional();
            Property(x => x.EffectiveDateDurationFromBaseline).HasColumnName(@"EffectiveDateDurationFromBaseline").HasColumnType("smallint").IsOptional();
            Property(x => x.IsCriticalPath).HasColumnName(@"IsCriticalPath").HasColumnType("bit").IsRequired();
            Property(x => x.IsBillable).HasColumnName(@"IsBillable").HasColumnType("bit").IsRequired();
            HasMany(t => t.WorkflowTasks_ParentId).WithMany(t => t.WorkflowTasks_ChildId).Map(m =>
            {
                m.ToTable("WorkflowTaskDependent", "dbo");
                m.MapLeftKey("ChildId");
                m.MapRightKey("ParentId");
            });
        }
    }

    #endregion

}
// </auto-generated>

