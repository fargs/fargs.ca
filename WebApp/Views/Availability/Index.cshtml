@using Model
@using Model.Enums
@model WebApp.ViewModels.AvailabilityViewModels.IndexViewModel
@{
    ViewBag.Title = "Availability";
}

@{
    var db = new OrvosiEntities();

    ViewBag.Users = db.Users
        .Select(c => new SelectListItem()
        {
            Text = c.DisplayName,
            Value = c.Id,
            Group = new SelectListGroup() { Name = c.RoleName }
        }).ToList();

    ViewBag.Companies = db.Companies
        .Where(c => c.IsParent == false)
        .Select(c => new SelectListItem()
        {
            Text = c.Name,
            Value = c.Id.ToString(),
            Group = new SelectListGroup() { Name = c.ParentName }
        }).ToList();

    var locations = db.Locations.ToList(); // needed to use the string.format in the Select below
    ViewBag.Locations = locations
        .Select(c => new SelectListItem()
        {
            Text = string.Format("{0} - ({1})", c.Name, c.City),
            Value = c.Id.ToString(),
            Group = new SelectListGroup() { Name = c.EntityDisplayName }
        }).ToList();
}

@if (Model.CurrentUser.RoleCategoryId == RoleCategory.Admin)
{
    <div class="dropdown">
        <button class="btn btn-default dropdown-toggle" type="button" id="UsersDropdownMenu" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
            Users
            <span class="caret"></span>
        </button>
        <ul class="dropdown-menu" aria-labelledby="UsersDropdownMenu">
            @foreach (SelectListItem item in ViewBag.Users)
            {
                //TODO: Group the list items
                <li><a href="~/Availability/Index/@item.Value">@item.Text</a></li>
            }
        </ul>
    </div>
}

@if (Model.CurrentUser.Id != Model.SelectedUser.Id)
{
    <div class="lead">@Model.SelectedUser.DisplayName</div>
}

<h2>Add Available Day</h2>

<form action="~/Availability/AddDay" method="post" class="form-horizontal">

    @Html.Hidden("PhysicianId", Model.SelectedUser.Id)

    <div class="form-group">
        <label class="control-label col-md-2">Available Day</label>
        <div class="col-md-10">
            <div class="input-group date" style="width:100%" id="AvailableDayPicker">
                <input class="form-control" data-val="true" data-val-date="The field Day must be a date." data-val-required="The Day field is required." id="NewAvailableDay_Day" name="Day" size="16" type="text" value="@Model.NewAvailableDay.Day.ToString("yyyy-MM-dd")">
                <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
            </div>
            @Html.ValidationMessage("Day", "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-2">Location</label>
        <div class="col-md-10">
            @Html.DropDownList("LocationId", new SelectList(ViewBag.Locations, "Value", "Text", "Group.Name", new { }), string.Empty, new { @class = "form-control" })
            @Html.ValidationMessage("LocationId", "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-2">Company</label>
        <div class="col-md-10">
            @Html.DropDownList("CompanyId", new SelectList(ViewBag.Companies, "Value", "Text", "Group.Name", new { }), string.Empty, new { @class = "form-control" })
            @Html.ValidationMessage("CompanyId", "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-2">Is Prebook</label>
        <div class="col-md-10">
            <div class="checkbox">
                @Html.CheckBox("IsPrebook")
                @Html.ValidationMessage("IsPrebook", "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-push-2 col-md-10">
            <button type="submit" class="btn btn-primary">Submit</button>
        </div>
    </div>

</form>

<h2>Availability</h2>

@foreach (var day in Model.AvailableDays.OrderBy(c => c.Day))
{
    <p>
        <div class="row">
            <div class="col-md-2">
                <div>
                    @day.Day.ToString("yyyy MMM ddd dd")
                </div>
                <div>
                    @day.LocationName
                </div>
                <div>
                    @day.CompanyName
                </div>
            </div>
            <div class="col-md-10">
                <div class="btn-group">
                    @foreach (var slot in day.AvailableSlots)
                    {
                        <button class="btn btn-default">@slot.StartTime</button>
                    }
                </div>
            </div>
        </div>
    </p>
}

<h2>This Month</h2>

<div class="btn-group">
    @for (int i = 1; i <= Model.Calendar.GetDaysInMonth(Model.Today.Year, Model.Today.Month); i++)
    {
        <button class="btn btn-default">@i</button>
    }
</div>

@section Scripts {

    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">

        $('#AvailableDayPicker').datepicker({
            startDate: '-1d',
            format: 'yyyy-mm-dd',
            autoclose: true,
            datesDisabled: [@ViewBag.AvailableDaysCSV]
        });

    </script>
}