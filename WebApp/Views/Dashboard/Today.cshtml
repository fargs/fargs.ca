@using WebApp.Library.Extensions
@using Orvosi.Shared.Enums
@model WebApp.ViewModels.DashboardViewModels.IndexViewModel
@{
    Layout = "~/Views/Dashboard/_Layout.cshtml";
}

@if (Model.Today != null)
{
    <div class="h3">
        @Model.Today.DayFormatted_MMMdd<span class="small"> @Model.Today.DayFormatted_dddd</span>
    </div>
    <div>
        @Model.Today.Address
    </div>
    <div class="small text-muted" style="padding-bottom:20px;">
        @Model.Today.City
    </div>
    foreach (var assessment in Model.Today.Assessments)
    {
        <div class="row o-dashboard-tr">
            <div class="col-md-1 o-dashboard-td">
                @assessment.StartTime.ToShortTimeSafe()
            </div>
            <div class="col-md-2 o-dashboard-td">
                <div><strong>@assessment.ClaimantName</strong></div>
                <strong style="color: @assessment.ServiceColorCode;">@assessment.ServiceCode</strong>
                -
                <span>@assessment.CompanyName</span>
            </div>
            <div class="col-md-3">
                @foreach (var task in assessment.People.First(p => p.Id == Model.SelectedUserId).Tasks)
                {
                    <form action="~/Dashboard/UpdateTaskStatus">
                        <div class="checkbox">
                            <label>
                                <input id="task-checkbox-@task.Id" type="checkbox"
                                       value="@task.IsComplete"
                                       @(task.IsComplete ? "checked" : "")
                                       @(task.StatusId == TaskStatuses.Waiting || task.StatusId == TaskStatuses.Obsolete ? "disabled" : "")
                                       onclick="onTaskChecked(this, @task.Id, @assessment.Id)">
                                @Html.Partial("_TaskStatusLabel", task) @task.Name
                            </label>
                        </div>
                    </form>
                }
            </div>
            <div class="col-md-2 o-dashboard-td">
                <a class="btn btn-default" target="_blank" href="@assessment.BoxCaseFolderURL"><i class="fa fa-folder-open-o fa-lg"></i>&nbsp;Open Case Folder</a>
            </div>
            <div class="col-md-2 o-dashboard-td">
                @foreach (var person in assessment.People.Where(p => p.Id != Model.SelectedUserId))
                {
                    <span title="@(!string.IsNullOrEmpty(person.DisplayName) ? person.DisplayName : "Unassigned")"
                          class="btn btn-sm btn-circle btn-circle-groupitem disabled"
                          style="color: white; background-color: @(!string.IsNullOrEmpty(person.ColorCode) ? person.ColorCode : "red")">
                        <span class="small">@(!string.IsNullOrEmpty(person.Initials) ? person.Initials : "?")</span>
                    </span>
                }
            </div>
            <div class="col-md-1">
                @if (!assessment.IsLateCancellation && !assessment.IsCancelled)
                {
                    <form action="~/Dashboard/ToggleNoShow">
                        <div class="checkbox">
                            <label>
                                <input id="task-checkbox-@assessment.Id" type="checkbox"
                                       value="@assessment.IsNoShow"
                                       @(assessment.IsNoShow ? "checked" : "")
                                       onclick="onToggleNoShow(this, @assessment.Id, @Model.Today.DayTicks);">
                                No Show
                            </label>
                        </div>
                    </form>
                }
                <div class="o-dashboard-td">
                    @if (assessment.ServiceStatusId.HasValue)
                    {
                        @Html.Partial("_ServiceStatusLabel", assessment.ServiceStatusId.Value)
                    }
                </div>

            </div>
            <div class="col-md-1 o-dashboard-td" style="text-align: center;">
                <a target="_blank" class="small" href="~/ServiceRequest/Details/@assessment.Id">@assessment.Id</a>
            </div>
        </div>
    }
}
else
{
    <strong> No assessments today</strong>
}


@section Scripts {

    <script>
        function updateTaskStatuses(assessmentFromResult, assessmentIdForEl) {
            var taskStatuses = {
                "Waiting": 1,
                "ToDo": 2,
                "Done": 3,
                "Obsolete": 4
            };
            var assessmentEl = $('#asessment-' + assessmentIdForEl);
            var tasksEl = assessmentEl.find("span[id^='task-statuslabel-]'");
            var taskEl = null;
            $.each(assessmentFromResult.People, function (index, person) {
                $.each(person.Tasks, function (index, task) {
                    taskEl = $('#task-statuslabel-' + task.Id);
                    taskEl.removeClass();
                    taskCheckboxEl = $('#task-checkbox-' + task.Id);
                    if (task.StatusId == taskStatuses.Done) {
                        MarkTaskAsDone(taskEl, taskCheckboxEl);
                    }
                    else if (task.StatusId == taskStatuses.ToDo) {
                        MarkTaskAsToDo(taskEl, taskCheckboxEl);
                    }
                    else if (task.StatusId == taskStatuses.Waiting) {
                        MarkTaskAsWaiting(taskEl, taskCheckboxEl);
                    }
                    else if (task.StatusId == taskStatuses.Obsolete) {
                        MarkTaskAsObsolete(taskEl, taskCheckboxEl);
                    }
                });
            });
        }

        function MarkTaskAsDone(label, checkbox) {
            label.addClass("label label-success").text("Done");
            checkbox.prop('disabled', false);
        }

        function MarkTaskAsToDo(label, checkbox) {
            label.addClass("label label-danger").text("To Do");
            checkbox.prop('disabled', false);
        }

        function MarkTaskAsWaiting(label, checkbox) {
            label.addClass("label label-warning").text("Waiting");
            checkbox.prop('disabled', true);
        }

        function MarkTaskAsObsolete(label, checkbox) {
            label.addClass("label label-info").text("Obsolete");
            checkbox.prop('disabled', true);
        }

        function onTaskChecked(checkbox, taskId, assessmentId) {
            var params = {
                taskId: taskId,
                assessmentId: assessmentId,
                checkbox: checkbox
            }

            if (checkbox.checked) {
                console.log(taskId + ' is now checked');
            } else {
                console.log(taskId + ' is now unchecked');
            }

            $.ajax({
                type: "POST",
                url: '@Url.Content("~/Dashboard/UpdateTaskStatus")',
                data: JSON.stringify({
                    taskId: taskId,
                    isChecked: checkbox.checked,
                    serviceProviderGuid: '@Model.SelectedUserId'
                }),
                contentType: "application/json; charset=utf-8",
                success: function (result) {
                    updateTaskStatuses(result, params.assessmentId);
                    toastr.success("Task updated successfully.", "Task Updated");
                },
                error: function (err) {
                    // undo the UI change made before the ajax call
                    toastr.success("Task was not updated.", "Something went wrong!");
                }
            }, this);
        }

    </script>
}
