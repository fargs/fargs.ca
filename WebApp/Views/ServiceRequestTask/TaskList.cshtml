@using WebApp.Library
@using System.Security.Claims
@using Orvosi.Shared.Enums
@using WebApp.ViewModels
@model IEnumerable<Orvosi.Data.ServiceRequestTask>

@{ 
    var identity = (User.Identity as ClaimsIdentity);
}

@helper ShowTree(IEnumerable<Orvosi.Data.ServiceRequestTask> tasks, byte level)
{
    <div style="margin-left:30px;">
        @foreach (var item in tasks)
        {
            var rowId = Guid.NewGuid().ToString();
            <div class="row">
                <div class="col-xs-12">
                    <span class="pull-left" style="margin-right: 5px;">
                        @Html.Partial("_TaskButton", item)
                    </span>
                    <span>
                        @(ViewBag.UseShortName ? item.ShortName : item.TaskName)
                    </span>
                    <span class="pull-right" style="margin-left: 5px;">
                        @if (item.AssignedTo.HasValue)
                        {
                            @Html.Partial("_Initials", item.AspNetUser)
                        }
                    </span>
                    @if (item.GetStatus(SystemTime.Now()) == TaskStatuses.Done)
                    {
                        <span class="small pull-right">@item.CompletedDate.Value.ToString("ddd, MMM dd") at @item.CompletedDate.Value.ToShortTimeString()</span>
                    }
                    else if (item.GetStatus(SystemTime.Now()) == TaskStatuses.Waiting)
                    {
                        <span class="pull-right">
                            <a href="#task-row-@rowId">
                                <span class="badge">
                                    @(item.DependsOn == "ExamDate" ? "E" : item.GetDependents().Count().ToString())
                                </span>
                            </a>
                        </span>
                    }
                    @if (item.GetStatus(SystemTime.Now()) == TaskStatuses.Waiting)
                    {
                        <div id="task-row-@rowId">
                            @ShowTree(item.GetDependents(), level++)
                        </div>
                    }

                </div>
            </div>
        }
    </div>
}

@if (Model.Count() == 0)
{
    <div>No tasks are assigned to you.</div>
}
<ul class="list-group">
    @foreach (var item in Model)
    {
        byte level = 1;
        var rowId = Guid.NewGuid().ToString();
        if (!(ViewBag.HideCaseCoordinator && item.AspNetUser.AspNetUserRoles.First().RoleId == AspNetRoles.CaseCoordinator))
        {
            <li class="list-group-item">
                <div class="row">
                    <div class="col-xs-12">
                        <span class="pull-left" style="margin-right: 5px;">
                            @Html.Partial("_TaskButton", item)
                        </span>
                        <span>
                            @(ViewBag.UseShortName ? item.ShortName : item.TaskName)
                        </span>
                        @if (identity.Claims.Any(c => c.Type == ClaimTypes.Role && (c.Value == AspNetRoles.CaseCoordinatorName || c.Value == AspNetRoles.SuperAdminName)))
                        {
                            <span class="pull-right" style="margin-left: 5px;">
                                @Html.Partial("_TaskActionMenu", item)
                            </span>
                        }
                        @if (item.AssignedTo.HasValue)
                        {
                            <span class="pull-right" style="margin-left: 5px;">

                                @Html.Partial("_Initials", item.AspNetUser)
                            </span>
                        }
                        @if (item.GetStatus(SystemTime.Now()) == TaskStatuses.Done)
                        {
                            <span class="small pull-right">@item.CompletedDate.Value.ToString("ddd, MMM dd") at @item.CompletedDate.Value.ToShortTimeString()</span>
                        }
                        else if (item.GetStatus(SystemTime.Now()) == TaskStatuses.Waiting)
                        {
                            <span class="pull-right">
                                <a href="#task-row-@rowId"
                                   data-toggle="collapse">
                                    <span class="badge">
                                        @(item.DependsOn == "ExamDate" ? "E" : item.GetDependents().Count().ToString())
                                    </span>
                                </a>
                            </span>
                        }
                    </div>
                </div>
                @if (item.GetStatus(SystemTime.Now()) == TaskStatuses.Waiting)
                    {
                    <div id="task-row-@rowId" class="collapse @(ViewBag.Collapsed ? string.Empty : "in")">
                        @ShowTree(item.GetDependents(), level++)
                    </div>
                }
            </li>
        }
    }
</ul>