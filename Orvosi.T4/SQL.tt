<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ Assembly Name="System.Data" #>
<#@ Assembly Name="System.Xml" #>
<#@ assembly name="Microsoft.SqlServer.ConnectionInfo"#>
<#@ assembly name="Microsoft.SqlServer.Smo" #>
<#@ assembly name="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#@ assembly name="$(TargetDir)Orvosi.Extensions.dll" #>

<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ Import Namespace="System.Data.SqlClient" #>
<#@ Import Namespace="System.Data" #>
<#@ Import Namespace="System.IO" #>
<#@ import namespace="Microsoft.SqlServer.Management.Smo" #>
<#@ import namespace="Orvosi.Extensions" #>

<#@ output extension="generated.sql" #>

/*------------------------------------------------------------------------------
<auto-generated>
	This code was generated from a template.

	Manual changes to this file may cause unexpected behavior in your application.
	Manual changes to this file will be overwritten if the code is regenerated.
 </auto-generated>
------------------------------------------------------------------------------*/

<#
	string serverName = @"(local)";
	string databaseName = @"Orvosi";
	string viewName = @"ServiceRequest";
	string tableName = @"ServiceRequest";
	string ConnectionString = "Data Source=" + serverName + ";Initial Catalog=" + databaseName + ";Integrated Security=True"; 
	Server server = new Server(serverName);       
	Database database = new Database(server, databaseName);
	database.Refresh();
	string className = string.Empty; 

	var updateParameterBuilder = new StringBuilder();
	var updateSetBuilder = new StringBuilder();
	var insertParameterBuilder = new StringBuilder();
	var insertColumnBuilder = new StringBuilder();
	var insertValuesBuilder = new StringBuilder();
	var deleteParameterBuilder = new StringBuilder();
	var identityColumnName = string.Empty;

	using (var conn = new SqlConnection(ConnectionString))
	{
		var table = new System.Data.DataTable();
		var tableAdapter = new SqlDataAdapter(string.Format("SELECT DataTypeDisplayName, ParameterDisplayName, ColumnDisplayName, ColumnName, is_identity, is_computed FROM dbo.SchemaTableColumn WHERE SchemaName = '{0}' AND TableName = '{1}' ORDER BY OrdinalPosition", "dbo", tableName), conn);
		tableAdapter.Fill(table);

		foreach (DataRow row in table.Rows)
		{
			var dataTypeDisplayName = row[0].ToString();
			var parameterDisplayName = row[1].ToString();
			var columnDisplayName = row[2].ToString();
			var columnName = row[3].ToString();
			var isIdentity = (bool)row[4];
			var isComputed = (bool)row[5];

			if (isIdentity == true)
			{
				identityColumnName = columnName;
			}

			if (columnName != "ModifiedDate" && isComputed != true)
			{
				updateParameterBuilder
					.AppendFormat("\t,{0} {1}", parameterDisplayName, dataTypeDisplayName)
					.AppendLine();
			}

			if (isIdentity != true && isComputed != true)
			{
				updateSetBuilder
					.AppendFormat("\t,{0} = {1}", columnDisplayName, parameterDisplayName)
					.AppendLine();
			}

			if (isIdentity != true && columnName != "ModifiedDate" && isComputed != true)
			{
				insertParameterBuilder
					.AppendFormat("\t,{0} {1}", parameterDisplayName, dataTypeDisplayName)
					.AppendLine();
			}

			if (isIdentity != true && columnName != "ModifiedDate" && isComputed != true)
			{
				insertColumnBuilder
					.AppendFormat("\t,{0}", columnDisplayName)
					.AppendLine();
			}

			if (isIdentity != true && isComputed != true && columnName != "ModifiedDate" && isComputed != true)
			{
				insertValuesBuilder
					.AppendFormat("\t,{0}", parameterDisplayName)
					.AppendLine();
			}

			if (isIdentity == true)
			{
				deleteParameterBuilder
					.AppendFormat("\t,{0} {1}", parameterDisplayName, dataTypeDisplayName)
					.AppendLine();
			}
		}

        updateParameterBuilder
			.Remove(0, 2)
			.Insert(0, " ")
			.Remove(updateParameterBuilder.Length - 2, 2);

        updateSetBuilder
			.Remove(0, 2)
			.Insert(0, " ")
			.Remove(updateSetBuilder.Length - 2, 2);

		insertParameterBuilder
			.Remove(0, 2)
			.Insert(0, " ")
			.Remove(insertParameterBuilder.Length - 2, 2);

		insertColumnBuilder
			.Remove(0, 2)
			.Insert(0, " ")
			.Remove(insertColumnBuilder.Length - 2, 2);

		insertValuesBuilder
			.Remove(0, 2)
			.Insert(0, " ")
			.Remove(insertValuesBuilder.Length - 2, 2);

		deleteParameterBuilder
			.Remove(0, 2)
			.Insert(0, " ")
			.Remove(deleteParameterBuilder.Length - 2, 2);
	}
#>
IF EXISTS(SELECT * FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE SPECIFIC_SCHEMA = 'API' AND SPECIFIC_NAME = '<#=viewName#>_Insert')
BEGIN
	DROP PROCEDURE [API].[<#=viewName#>]
END
GO

CREATE PROCEDURE [API].[<#=viewName#>_Insert]
	<#=insertParameterBuilder.ToString()#>
AS

DECLARE @Now DATETIME
SET @Now = GETDATE()

INSERT INTO dbo.[<#=tableName#>]
(
	<#=insertColumnBuilder.ToString()#>
)
VALUES 
(
	<#=insertValuesBuilder.Replace("@ModifiedDate", "@Now").ToString()#>
)

DECLARE @Id INT
SELECT @Id = SCOPE_IDENTITY()

SELECT * FROM API.<#=viewName#> WHERE Id = @Id

GO

IF EXISTS(SELECT * FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE SPECIFIC_SCHEMA = 'API' AND SPECIFIC_NAME = '<#=viewName#>_Update')
BEGIN
	DROP PROCEDURE [API].[<#=viewName#>_Update]
END
GO

CREATE PROCEDURE [API].[<#=viewName#>_Update]
	<#=updateParameterBuilder.ToString()#>
AS

DECLARE @Now DATETIME
SET @Now = GETDATE()

UPDATE dbo.[<#=tableName#>]
SET
	<#=updateSetBuilder.Replace("@ModifiedDate", "@Now").ToString()#>
WHERE 
	<#=identityColumnName#> = @<#=identityColumnName#>

GO

IF EXISTS(SELECT * FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE SPECIFIC_SCHEMA = 'API' AND SPECIFIC_NAME = '<#=viewName#>_Delete')
BEGIN
	DROP PROCEDURE [API].[<#=viewName#>_Delete]
END
GO

CREATE PROCEDURE [API].[<#=viewName#>_Delete]
	<#=deleteParameterBuilder.ToString()#>
AS

DECLARE @Now DATETIME
SET @Now = GETDATE()

DELETE FROM dbo.[<#=tableName#>]
WHERE 
	Id = @Id
