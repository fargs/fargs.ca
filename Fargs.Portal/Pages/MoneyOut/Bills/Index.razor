@page "/moneyout/bills"

@using ClosedXML.Excel
@using DocumentFormat.OpenXml.Packaging
@using DocumentFormat.OpenXml.Spreadsheet
@using Fargs.Portal.Data.Aginzo
@using Fargs.Portal.Data.ServiceConnections
@using Fargs.Portal.Services.FileSystem
@using Intuit.Ipp.Core
@using Intuit.Ipp.QueryFilter
@using Intuit.Ipp.Security
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Options
@using System.Text.Json
@using Fargs.Portal.Services.Accounting
@using Intuit.Ipp.OAuth2PlatformClient
@using System.IO

@inject NavigationManager navigationManager
@inject IOptions<QuickbooksOptions> quickbooksOptions
@inject IDbContextFactory<ApplicationDbContext> dbContextFactory
@inject FileSystemFactory fileSystemFactory
@inject IOptions<LocalFileSystemOptions> localFileSystemOptions

<h3>Vendors</h3>
<button @onclick="GetQuickbooksVendors">Get Vendors from Quickbooks</button>

@if (isLoading)
{
	<div>Loading ...</div>
}
else
{
	foreach (var vendor in qbVendors)
	{
		<div>@vendor.CompanyName</div>
	}
}


<h3>Bills</h3>

<h4>Step 1:</h4>
<div>
	Upload your excel file
	<InputFile OnChange="@LoadFiles"></InputFile>
</div>

@if (isLoading)
{
	<p>Uploading...</p>
}
else
{
	<ul>
		@foreach (var file in loadedFiles)
		{
		 <li>
		  <ul>
		   <li>Name: @file.Name</li>
		   <li>Last modified: @file.LastModified.ToString()</li>
		   <li>Size (bytes): @file.Size</li>
		   <li>Content type: @file.ContentType</li>
		  </ul>
		 </li>
		}
	</ul>
	<table>
		<tr>
	  <td>InvoiceId</td>
	  <td>Source</td>
	  <td>Project</td>
  </tr>
		@foreach (var source in sourceHarvestExport)
		{
		 <tr>
		  <td>
					@source.InvoiceId
		  </td>
		  <td>
					@source.Client
		  </td>
		  <td>@source.Project</td>
		 </tr>
		}
	</table>
}
<h4>Step 2:</h4>
<div>
 Review the uploaded data after it has been transformed to match the Quickbooks Create bill request message
</div>

<h4>Step 3:</h4>

<div>
 Complete the batch upload of bills to Quickbooks.
</div>

<button @onclick="CreateBills">Create Bills</button>

<h2>Bills for Quickbooks</h2>
@if (isLoading)
{
	<div>Loading ...</div>
}
else
{
	foreach (var bill in destinationBills)
	{
		<div>@bill.Balance</div>
	}
}

<h4>Step 4:</h4>

<div>
 Retrieve the created records from Quickbooks and join them to the source records to verify the data integration was complete and accurate.
</div>

@code {
	[CascadingParameter] Task<AuthenticationState> _authState { get; set; }

	// Source
	private List<IBrowserFile> loadedFiles = new();
	private long maxFileSize = 4000000;
	private int maxAllowedFiles = 3;
	private bool isLoading = false;

	// Transformation
	IEnumerable<HarvestExport> sourceHarvestExport { get; set; } = new List<HarvestExport>();
	IEnumerable<Intuit.Ipp.Data.Bill> destinationBills { get; set; } = new List<Intuit.Ipp.Data.Bill>();

	// Destination
	IEnumerable<Intuit.Ipp.Data.Vendor> qbVendors { get; set; } = new List<Intuit.Ipp.Data.Vendor>();

	private async Task GetQuickbooksVendors()
	{
		var claimsPrincipal = (await _authState).User;
		var userId = claimsPrincipal.UserId();

		var dbContext = dbContextFactory.CreateDbContext();
		var quickbooksConnection = await dbContext.QuickbooksConnections.SingleOrDefaultAsync(u => u.UserId == userId);

		OAuth2RequestValidator requestValidator = new(quickbooksConnection.AccessToken);
		var serviceContext = new ServiceContext(quickbooksConnection.RealmId, IntuitServicesType.QBO, requestValidator);

		serviceContext.IppConfiguration.MinorVersion.Qbo = "23";
		serviceContext.IppConfiguration.BaseUrl.Qbo = "https://sandbox-quickbooks.api.intuit.com/"; //This is sandbox Url. Change to Prod Url if you are using production

		var querySvc = new QueryService<Intuit.Ipp.Data.Vendor>(serviceContext);

		isLoading = true;

		qbVendors = querySvc.ExecuteIdsQuery("Select * from Vendor");

		isLoading = false;

		StateHasChanged();
	}

	private async Task LoadFiles(InputFileChangeEventArgs e)
	{
		isLoading = true;
		loadedFiles.Clear();

		foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
		{
			loadedFiles.Add(file);

			var options = localFileSystemOptions.Value;
			var trustedFileNameForFileStorage = Path.GetRandomFileName();
			var path = Path.Combine(options.RootPath,
					file.Name);

			using (FileStream fs = new(path, FileMode.Create))
			{
				await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
			}

			// Open file as read-only.
			var wb = new XLWorkbook(path);
			var ws = wb.Worksheet("Harvest Export Values Only");

			// Look for the first row used
			var firstRowUsed = ws.FirstRowUsed();

			// Narrow down the row so that it only includes the used part
			var firstBillRow = firstRowUsed.RowUsed();

			// First possible address of the company table:
			var firstPossibleAddress = firstBillRow.FirstCell().Address;
			// Last possible address of the company table:
			var lastPossibleAddress = ws.LastCellUsed().Address;

			// Get a range with the remainder of the worksheet data (the range used)
			var billsRange = ws.Range(firstPossibleAddress, lastPossibleAddress).RangeUsed();

			// Treat the range as a table (to be able to use the column names)
			var billsTable = billsRange.AsTable();

			// Get the list of company names
			sourceHarvestExport = billsTable.DataRange.Rows()
					.Select(s => new HarvestExport()
					{
						InvoiceId = int.Parse(s.Cell("A").GetString()),
						Client = s.Cell("B").GetString(),
						Project = s.Cell("C").GetString(),
						ItemType = s.Cell("D").GetString(),
						ItemDescription = s.Cell("E").GetString(),
						ItemQuantity = decimal.Parse(s.Cell("F").GetString()),
						ItemUnitPrice = decimal.Parse(s.Cell("G").GetString()),
						ItemAmount = decimal.Parse(s.Cell("H").GetString()),
						ItemDiscount = decimal.Parse(s.Cell("I").GetString()),
						ItemTax = decimal.Parse(s.Cell("J").GetString()),
						ItemTax2 = decimal.Parse(s.Cell("K").GetString()),
						Currency = s.Cell("L").GetString(),
						InvoiceType = s.Cell("M").GetString(),
						QB_Terms = s.Cell("N").GetString(),
						QB_BillDate = s.Cell("O").GetString(),
						QB_BillNo = int.Parse(s.Cell("P").GetString()),
						QB_Description = s.Cell("Q").GetString(),
						ItemType2 = s.Cell("R").GetString(),
						HarvestConsultant = s.Cell("T").GetString(),
						QB_Vendor = s.Cell("U").GetString(),
						QB_Account = s.Cell("S").GetString(),
						PayAmount = decimal.Parse(s.Cell("V").GetString()),
						SalesLead_1 = s.Cell("W").GetString(),
						SL1_QB_Vendor = s.Cell("X").GetString(),
						SL1_QB_Account = s.Cell("Y").GetString(),
						SL1_Percent = decimal.Parse(s.Cell("Z").GetString()),
						SL1_Amount = decimal.Parse(s.Cell("AA").GetString()),
						SalesSupport_1 = s.Cell("AB").GetString(),
						SS1_QB_Vendor = s.Cell("AC").GetString(),
						SS1_QB_Account = s.Cell("AD").GetString(),
						SS1_Percent = decimal.Parse(s.Cell("AE").GetString()),
						SS1_Amount = decimal.Parse(s.Cell("AF").GetString()),
						SalesLead_2 = s.Cell("AG").GetString(),
						SL2_QB_Vendor = s.Cell("AH").GetString(),
						SL2_QB_Account = s.Cell("AI").GetString(),
						SL2_Percent = decimal.Parse(s.Cell("AJ").GetString()),
						SL2_Amount = decimal.Parse(s.Cell("AK").GetString()),
						SalesSupport_2 = s.Cell("AL").GetString(),
						SS2_QB_Vendor = s.Cell("AM").GetString(),
						SS2_QB_Account = s.Cell("AN").GetString(),
						SS2_Percent = decimal.Parse(s.Cell("AO").GetString()),
						SS2_Amount = decimal.Parse(s.Cell("AP").GetString())
					})
					.ToList();



			var dbContext = dbContextFactory.CreateDbContext();
			dbContext.HarvestExports.AddRange(sourceHarvestExport);

			await dbContext.SaveChangesAsync();
		}

		isLoading = false;

		StateHasChanged();
	}

	protected async void CreateBills()
	{
		var claimsPrincipal = (await _authState).User;
		var userId = claimsPrincipal.UserId();

		var dbContext = dbContextFactory.CreateDbContext();
		var quickbooksConnection = await dbContext.QuickbooksConnections.SingleOrDefaultAsync(u => u.UserId == userId);

		OAuth2RequestValidator requestValidator = new(quickbooksConnection.AccessToken);
		var serviceContext = new ServiceContext(quickbooksConnection.RealmId, IntuitServicesType.QBO, requestValidator);

		serviceContext.IppConfiguration.MinorVersion.Qbo = "23";
		serviceContext.IppConfiguration.BaseUrl.Qbo = "https://sandbox-quickbooks.api.intuit.com/"; //This is sandbox Url. Change to Prod Url if you are using production

		var querySvc = new QueryService<Intuit.Ipp.Data.Bill>(serviceContext);

		isLoading = true;

		destinationBills = querySvc.ExecuteIdsQuery("Select * from Bill startposition 1 maxresults 5");

		isLoading = false;

		StateHasChanged();
	}
}
