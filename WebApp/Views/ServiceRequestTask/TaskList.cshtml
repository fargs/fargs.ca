@using WebApp.Library
@using Orvosi.Data
@using WebApp.ViewModels.ServiceRequestTaskViewModels
@using Features = Orvosi.Shared.Enums.Features
@model TaskListViewModel

@{ 
    var identity = User.Identity.GetClaimsIdentity();
    var features = identity.GetFeatures();
    var viewDataService = new ViewDataService(identity, new OrvosiDbContext());
    var teamMemberSelectList = viewDataService.GetCollaborationSelectList(Model.Physician.Id);
    teamMemberSelectList.Add(new SelectListItem
    {
        Text = Model.Physician.Name,
        Value = Model.Physician.Id.ToString()
    });
}

@helper ShowTree(IEnumerable<Orvosi.Data.ServiceRequestTask> tasks, byte level)
{
    <div style="margin-left:30px;">
        @foreach (var item in tasks)
        {
            var rowId = Guid.NewGuid().ToString();
            <div class="row">
                <div class="col-xs-12">
                    <span class="pull-left" style="margin-right: 5px;">
                        @Html.Partial("_TaskButton", item)
                    </span>
                    <span>
                        @(ViewBag.UseShortName ? item.ShortName : item.TaskName)
                    </span>
                    <span class="pull-right" style="margin-left: 5px;">
                        @if (item.AssignedTo.HasValue)
                        {
                            @Html.Partial("_Initials", item.AspNetUser_AssignedTo)
                        }
                    </span>
                    @if (item.GetStatus(SystemTime.Now()) == TaskStatuses.Done)
                    {
                        <span class="small pull-right">@item.CompletedDate.Value.ToString("ddd, MMM dd") at @item.CompletedDate.Value.ToShortTimeString()</span>
                    }
                    else if (item.GetStatus(SystemTime.Now()) == TaskStatuses.Waiting)
                    {
                        <span class="pull-right">
                            <a href="#task-row-@rowId">
                                <span class="badge">
                                    @(item.DependsOn == "ExamDate" ? "E" : item.GetDependents().Count().ToString())
                                </span>
                            </a>
                        </span>
                    }
                    @if (item.GetStatus(SystemTime.Now()) == TaskStatuses.Waiting)
                    {
                        <div id="task-row-@rowId">
                            @ShowTree(item.GetDependents(), level++)
                        </div>
                    }

                </div>
            </div>
        }
    </div>
}

@if (Model.Tasks.Count() == 0)
{
    <div>No tasks are assigned to you.</div>
}
<div class="panel @(ViewBag.ViewOptions == TaskListViewOptions.Details ? "panel-default" : null)">
    @if (ViewBag.ViewOptions == TaskListViewOptions.Details)
    {
    <div class="panel-heading">
        <strong>Tasks</strong>
        @if (features.Contains(Features.ServiceRequest.ManageTasks))
        { 
        <div class="pull-right">
            @Html.Partial("_TaskListActionMenu", Model.ServiceRequestId)
        </div>
        }
    </div>
    }
    <div class="panel-body">
        <table class="">
            @foreach (var task in Model.Tasks)
            {
                <tr>
                    @if (features.Contains(Features.ServiceRequest.ManageTasks))
                    {
                        <td width="50px">
                            <div class="dropdown">
                                <button class="btn btn-sm btn-link" data-toggle="dropdown">
                                    <i class="fa fa-ellipsis-h fa-lg"></i>
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="dLabel">
                                    @if (features.Contains(Features.ServiceRequest.PickupTask))
                                    {
                                        <li><a tabindex="-1" onclick="pickupTask(@task.Id)">Pickup</a></li>
                                    }
                                    @if (features.Contains(Features.ServiceRequest.AssignTask))
                                    {
                                        <li class="dropdown-submenu">
                                            <a tabindex="-1" class="assign-to" onclick="menuDropdownClick(event, this)">
                                                Assign To
                                                <span class="caret"></span>
                                            </a>
                                            <ul class="dropdown-menu">
                                                @foreach (var teamMember in teamMemberSelectList.OrderBy(c => c.Text))
                                                {
                                                    <li>
                                                        <a tabindex="-1" onclick="assignTask(@task.Id, '@(teamMember.Value)')">@teamMember.Text</a>
                                                    </li>
                                                }
                                            </ul>
                                        </li>
                                    }
                                    @if (features.Contains(Features.ServiceRequest.UpdateTaskStatus))
                                    {
                                        <li class="divider"></li>
                                        <li>
                                            <a tabindex="-1" onclick="toggleTaskStatus(@task.Id , @TaskStatuses.OnHold)">
                                                On Hold
                                                @if (task.StatusId == TaskStatuses.OnHold)
                                                {
                                                    <i class="fa fa-check"></i>
                                                }
                                            </a>
                                        </li>
                                        <li>
                                            <a tabindex="-1" onclick="toggleTaskStatus(@task.Id , @TaskStatuses.Obsolete)">
                                                Obsolete
                                                @if (task.StatusId == TaskStatuses.Obsolete)
                                                {
                                                    <i class="fa fa-check"></i>
                                                }
                                            </a>
                                        </li>
                                    }
                                    @if (features.Contains(Features.ServiceRequest.DeleteTask))
                                    {
                                        <li class="divider"></li>
                                                <li><a tabindex="-1" onclick="deleteTask(@task.Id)">Delete</a></li>
                                    }
                                </ul>
                            </div>
                        </td>
                    }
                    <td width="50px">
                        @if (task.TaskId == Tasks.AssessmentDay)
                        {
                            <span class="btn btn-sm btn-circle">
                                <i class="fa fa-calendar fa-lg"></i>
                            </span>
                        }
                        else
                        {
                            @Html.Partial("_Initials2", task.AssignedTo == null ? new LookupViewModel<Guid>() : task.AssignedTo)
                        }
                    </td>
                    <td width="20px">
                        @if (features.Contains(Features.ServiceRequest.UpdateTaskStatus))
                        {
                            <form action="~/ServiceRequestTask/ToggleCompleted" method="post" class="pull-left">
                                @Html.Hidden("serviceRequestTaskId", task.Id)
                                <span class="checkbox" style="margin-top:0px; margin-bottom:0px;">
                                    <label>
                                        <input id="task-checkbox-@task.Id" type="checkbox"
                                               name="isChecked"
                                               value="@(task.StatusId == TaskStatuses.Done)"
                                               @(task.StatusId == TaskStatuses.Done ? "checked" : "")
                                               @(task.StatusId == TaskStatuses.Waiting || task.StatusId == TaskStatuses.Obsolete ? "disabled" : "")
                                               onclick="toggleCompleted(this)">
                                    </label>
                                </span>
                            </form>
                        }
                    </td>
                    <td width="100px" title="@(task.TaskStatusChangedDate.HasValue ? task.TaskStatusChangedBy.Name + " on " + task.TaskStatusChangedDate.Value.ToString("ddd, MMM dd") + " at " + task.TaskStatusChangedDate.Value.ToShortTimeString() : "Not recorded")">
                        @Html.Partial("_TaskStatusLabel2", task.StatusId)
                    </td>
                    <td>@task.Name</td>
                </tr>
            }
        </table>
    </div>
</div>