@using WebApp.Library
@using Features = Orvosi.Shared.Enums.Features
@model TaskListViewModel

@{
    var identity = User.Identity.GetClaimsIdentity();
    var features = identity.GetFeatures();
    var viewDataService = ContextPerRequest.ViewDataService;
    var teamMemberSelectList = viewDataService.GetCollaborationSelectList(Model.Physician.Id);
    teamMemberSelectList.Add(new SelectListItem
    {
        Text = Model.Physician.Name,
        Value = Model.Physician.Id.ToString()
    });
    var args = ViewData.TaskListArgs_Get();
}

@functions {
    string IsOverdue(TaskViewModel task)
    {
        return task.IsOverdue || task.IsDueToday ? "text-danger" : "";
    }
}

@if (Model.Tasks.Count() == 0)
{
    <div>No tasks are assigned to you.</div>
}
<div class="panel @(ViewBag.ViewOptions == ViewTarget.Details ? "panel-default" : null)">
    @if (args.ViewTarget == ViewTarget.Details)
    {
        if (features.Contains(Features.ServiceRequest.ManageTasks))
        {
            <div class="panel-heading">
                @Html.Partial("_TaskListActionMenu", Model.ServiceRequestId)
            </div>
        }
    }
    <div class="panel-body">
        <table>
            @foreach (var task in Model.Tasks)
            {
                <tr>
                    @if (features.Contains(Features.ServiceRequest.ManageTasks))
                    {
                        <td width="50px">
                            @if (task.TaskId != Tasks.AssessmentDay)
                            {
                                <div class="dropdown">
                                    <button class="btn btn-sm btn-link" data-toggle="dropdown">
                                        <i class="fa fa-ellipsis-h fa-lg"></i>
                                    </button>
                                    <ul class="dropdown-menu" aria-labelledby="dLabel">
                                        @if (features.Contains(Features.ServiceRequest.PickupTask))
                                        {
                                            <li><a tabindex="-1" onclick="pickupTask(@task.Id)">Pickup</a></li>
                                        }
                                        @if (features.Contains(Features.ServiceRequest.AssignTask))
                                        {
                                            <li class="dropdown-submenu">
                                                <a tabindex="-1" class="assign-to" onclick="menuDropdownClick(event, this)">
                                                    Assign To
                                                    <span class="caret"></span>
                                                </a>
                                                <ul class="dropdown-menu">
                                                    @foreach (var teamMember in teamMemberSelectList.OrderBy(c => c.Text))
                                                    {
                                                        <li>
                                                            <a tabindex="-1" onclick="assignTask(@task.Id, '@(teamMember.Value)')">@teamMember.Text</a>
                                                        </li>
                                                    }
                                                </ul>
                                            </li>
                                        }
                                        @if (features.Contains(Features.ServiceRequest.UpdateTaskStatus))
                                        {
                                            <li class="divider"></li>
                                            <li>
                                                <a tabindex="-1" onclick="toggleTaskStatus(@task.Id , @TaskStatuses.OnHold)">
                                                    On Hold
                                                    @if (task.StatusId == TaskStatuses.OnHold)
                                                    {
                                                        <i class="fa fa-check"></i>
                                                    }
                                                </a>
                                            </li>
                                            <li>
                                                <a tabindex="-1" onclick="toggleTaskStatus(@task.Id , @TaskStatuses.Obsolete)">
                                                    Cancel
                                                    @if (task.StatusId == TaskStatuses.Obsolete)
                                                    {
                                                        <i class="fa fa-check"></i>
                                                    }
                                                </a>
                                            </li>
                                            if (task.StatusId == TaskStatuses.Done)
                                            {
                                                <li>
                                                    <a tabindex="-1" onclick="toggleTaskStatus(@task.Id , @TaskStatuses.Archive)">
                                                        Archive
                                                    </a>
                                                </li>
                                            }
                                        }
                                        @if (features.Contains(Features.ServiceRequest.DeleteTask))
                                        {
                                            <li class="divider"></li>
                                            <li><a tabindex="-1" onclick="deleteTask(@task.Id)">Delete</a></li>
                                        }
                                    </ul>
                                </div>
                            }
                        </td>
                    }
                    <td width="50px">
                        @if (task.TaskId == Tasks.AssessmentDay)
                        {
                            <span class="btn btn-sm btn-circle">
                                <i class="fa fa-calendar fa-lg"></i>
                            </span>
                        }
                        else
                        {
                            @Html.Partial("_Initials2", task.AssignedTo == null ? new LookupViewModel<Guid>() : task.AssignedTo)
                        }
                    </td>
                    <td width="20px">
                        @if (features.Contains(Features.ServiceRequest.UpdateTaskStatus) && task.TaskId != Tasks.AssessmentDay)
                        {
                            <form action="~/ServiceRequestTask/ToggleCompleted" method="post" class="pull-left">
                                @Html.Hidden("serviceRequestTaskId", task.Id)
                                <span class="checkbox" style="margin-top:0px; margin-bottom:0px;">
                                    <label>
                                        <input id="task-checkbox-@task.Id" type="checkbox"
                                               name="isChecked"
                                               value="@(task.StatusId == TaskStatuses.Done || task.StatusId == TaskStatuses.Archive)"
                                               @(task.StatusId == TaskStatuses.Done || task.StatusId == TaskStatuses.Archive ? "checked" : "")
                                               @*@(task.StatusId == TaskStatuses.Waiting || task.StatusId == TaskStatuses.Obsolete ? "disabled" : "")*@
                                               onclick="toggleCompleted(this)">
                                    </label>
                                </span>
                            </form>
                        }
                    </td>
                    <td width="100px" title="@("Due on " + task.DueDate.ToOrvosiDateFormat() + ". Last changed by " + (task.TaskStatusChangedDate.HasValue ? task.TaskStatusChangedBy.Name + " on " + task.TaskStatusChangedDate.Value.ToString("ddd, MMM dd") + " at " + task.TaskStatusChangedDate.Value.ToShortTimeString() : "was not recorded"))">
                        @Html.Partial("_TaskStatusLabel2", task.StatusId)
                    </td>
                    <td title="@task.Status.Name">@task.Name</td>
                    @*<td>
                        @if (task.IsActive)
                        {
                            <small class="text-muted pull-right @IsOverdue(task)" style="padding-left:30px;">@(task.DueDate.ToHumanizedDate())</small>
                        }
                    </td>*@
                </tr>
            }
        </table>
    </div>
</div>