@using WebApp.Library.Extensions
@using WebApp.ViewModels.ServiceRequestTaskViewModels
@using Features = Orvosi.Shared.Enums.Features
@model WebApp.ViewModels.DashboardViewModels.AgendaViewModel
@{
    Layout = "~/Views/Dashboard/_Layout.cshtml";
    var roleId = User.Identity.GetRoleId();
    var userId = User.Identity.GetGuidUserId();
    var features = User.Identity.GetFeatures();
}
<div class="row">
    <div class="col-md-2">
        <div>
            <form action="~/Dashboard/Agenda" method="get" class="form-inline">
                <input type="hidden" name="serviceProviderId" value="@Model.SelectedUserId" />
                <div class="input-group date" id="AppointmentDatePicker">
                    @Html.TextBox("day", Model.Day, "{0:yyyy-MM-dd}", new { @class = "form-control", size = "16", onchange = "this.form.submit();" })
                    <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                </div>
                <div class="btn-group">
                    <a href="~/Dashboard/Agenda?serviceProviderId=@Model.SelectedUserId&day=@Model.Day.AddDays(-1).Date.ToOrvosiDateFormat()" class="btn btn-sm btn-default"><i class="fa fa-arrow-left"></i></a>
                    <a href="~/Dashboard/Agenda?serviceProviderId=@Model.SelectedUserId&day=@Model.Day.AddDays(1).Date.ToOrvosiDateFormat()" class="btn btn-sm btn-default"><i class="fa fa-arrow-right"></i></a>
                </div>
            </form>
        </div>
    </div>
    <span class="h3" style="vertical-align:middle;">
        @Model.Day.ToString("MMMdd")<span class="small"> @Model.Day.ToString("dddd")</span>
    </span>

</div>
<p></p>
@if (Model.DayFolder != null)
{
    <div>
        @Model.DayFolder.Address.Name
    </div>
    <div class="small text-muted" style="padding-bottom:20px;">
        @Model.DayFolder.Address.City
    </div>
    foreach (var serviceRequest in Model.DayFolder.ServiceRequests.OrderBy(a => a.StartTime))
    {
        <div class="row o-dashboard-tr">
            <div class="col-md-1 o-dashboard-td">
                <strong>@serviceRequest.StartTime.ToShortTimeSafe()</strong>
                @if (!serviceRequest.IsLateCancellation && !serviceRequest.IsCancelled)
                    {
                    <form>
                        <div class="checkbox">
                            <label>
                                <input id="task-checkbox-@serviceRequest.Id" type="checkbox"
                                       value="@serviceRequest.IsNoShow"
                                       checked="@serviceRequest.IsNoShow"
                                       @(serviceRequest.IsNoShow ? "checked" : "")
                                       onclick="onToggleNoShow(this, @serviceRequest.Id, @Model.DayFolder.DayTicks);">
                                No Show
                            </label>
                        </div>
                    </form>
                }
                <div class="o-dashboard-td">
                    @Html.Partial("_ServiceStatus", serviceRequest)
                </div>
            </div>
            <div class="col-md-2 o-dashboard-td">
                <div><a target="_blank" class="" href="~/ServiceRequest/Details/@serviceRequest.Id">@serviceRequest.ClaimantName (@serviceRequest.Id)</a></div>
                <strong style="color: @serviceRequest.Service.ColorCode;">@serviceRequest.Service.Code</strong>
                -
                <span>@serviceRequest.Company.Name</span>
            </div>
            <div class="col-md-3 o-dashboard-td" id="case-container-@serviceRequest.Id">
                @Html.Action("TaskList", "ServiceRequestTask", new
                {
                    serviceRequestId = serviceRequest.Id,
                    viewOptions = TaskListViewOptions.Dashboard,
                    options = TaskListViewModelFilter.CriticalPathOrAssignedToUser
                })
            </div>
            <div class="col-md-2 o-dashboard-td">
                <a class="btn btn-default" target="_blank" href="@serviceRequest.BoxCaseFolderURL"><i class="fa fa-folder-open-o fa-lg"></i>&nbsp;Open Case Folder</a>
                @Html.Partial("_Note", new WebApp.ViewModels.ServiceRequestViewModels.NoteViewModel() { ServiceRequestId = serviceRequest.Id, Note = serviceRequest.Notes })
            </div>
            <div class="col-md-4 o-dashboard-td">
                @Html.Action("Discussion", "ServiceRequestMessage", new { serviceRequestId = serviceRequest.Id })
                @Html.Partial("~/Views/ServiceRequestMessage/_PostMessage.cshtml", serviceRequest)
            </div>
        </div>
    }
}
else
{
    <p></p>
    <p><strong> No assessments today</strong></p>
}

@Html.Partial("~/Views/Note/_NoteModalForm.cshtml")

@section Scripts {

    <script>

        $('#AppointmentDatePicker').datepicker({
            format: 'yyyy-mm-dd',
            autoclose: true
        })

        function onToggleNoShow(checkbox, serviceRequestId) {

            $.ajax({
                type: "POST",
                url: '@Url.Content("~/Dashboard/ToggleNoShow")',
                data: JSON.stringify({
                    serviceRequestId: serviceRequestId,
                    isChecked: checkbox.checked,
                    serviceProviderGuid: '@Model.SelectedUserId'
                }),
                contentType: "application/json; charset=utf-8",
                success: function (result) {
                    toastr.success("Request updated successfully.", "Request Updated");
                    refreshServiceRequestTasks(serviceRequestId);
                    refreshServiceStatus(serviceRequestId);
                },
                error: function (err) {
                    alert(err.status + " - " + err.statusText);
                }
            }, this);
        }

        function refreshServiceStatus(serviceRequestId) {

            $.ajax({
                type: "GET",
                url: '@Url.Content("~/Dashboard/RefreshServiceStatus?serviceRequestId=")' + serviceRequestId,
                contentType: "text/html",
                success: function (result) {
                    $('#service-status-' + serviceRequestId).replaceWith(result);
                },
                error: function (err) {
                    // undo the UI change made before the ajax call
                    window.location.reload();
                }
            }, this);

        }

        function onEditNote(serviceRequestId) {

            $.ajax({
                type: "GET",
                url: '@Url.Content("~/Note/EditNote?serviceRequestId=")' + serviceRequestId,
                contentType: "application/json; charset=utf-8",
                success: function (result) {

                    var modalDiv = $("#edit-note-modal");
                    modalDiv.find('#ServiceRequestId').val(result.ServiceRequestId); // hidden field
                    modalDiv.find('#Notes').val(result.Notes);
                    modalDiv.find('#ClaimantName').html(result.ClaimantName);

                    modalDiv.modal('toggle');
                },
                error: function (err) {
                    alert(err.status + " - " + err.statusText);
                }
            }, this);
        }

        $("#edit-note-form").submit(function (e) {

            var url = '@Url.Content("~/Note/UpdateNote")';

            var form = $("#edit-note-form");
            var serviceRequestId = form.find('#ServiceRequestId').val();

            $.ajax({
                type: "POST",
                url: url,
                data: form.serialize(), // serializes the form's elements.
                success: function () {
                    $("#edit-note-modal").modal('toggle');
                    toastr.success("The note was updated successfully.");
                    refreshNote(serviceRequestId);
                }
            });
            e.preventDefault();
        });

        function refreshNote(serviceRequestId) {

            $.ajax({
                type: "GET",
                url: '@Url.Content("~/Dashboard/RefreshNote?serviceRequestId=")' + serviceRequestId,
                contentType: "text/html",
                success: function (result) {
                    $('#notes-' + serviceRequestId).replaceWith(result);
                },
                error: function (err) {
                    // undo the UI change made before the ajax call
                    window.location.reload();
                }
            }, this);

        }

        function refreshCase(serviceRequestId) {
            let url = '@Url.Content("~/ServiceRequestTask/TaskList")';

            $.get(url, {
                serviceRequestId: serviceRequestId,
                viewOptions: '@TaskListViewOptions.Dashboard',
                options: '@TaskListViewModelFilter.CriticalPathOrAssignedToUser'
            })
                .done(function (result) {
                    document.getElementById('case-container-' + serviceRequestId).innerHTML = result;
                    //joinRoom(serviceRequestId);
                    //refreshValidationResults(serviceRequestId);
                })
                .always(function () {
                    //loader.hide();
                });
        }

    </script>

    @Html.Partial("~/Views/ServiceRequestTask/TaskListJS.cshtml")

    @Html.Partial("~/Views/ServiceRequestMessage/_ServiceRequestMessageJS.cshtml", Model.ServiceRequestMessageJSViewModel)
}
