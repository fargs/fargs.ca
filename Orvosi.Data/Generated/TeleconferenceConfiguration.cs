// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace Orvosi.Data
{

    // Teleconference
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.21.1.0")]
    public partial class TeleconferenceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Teleconference>
    {
        public TeleconferenceConfiguration()
            : this("dbo")
        {
        }

        public TeleconferenceConfiguration(string schema)
        {
            ToTable(schema + ".Teleconference");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("uniqueidentifier").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AppointmentDate).HasColumnName(@"AppointmentDate").IsRequired().HasColumnType("datetime");
            Property(x => x.StartTime).HasColumnName(@"StartTime").IsOptional().HasColumnType("time");
            Property(x => x.ServiceRequestId).HasColumnName(@"ServiceRequestId").IsRequired().HasColumnType("int");
            Property(x => x.LastModifiedBy).HasColumnName(@"LastModifiedBy").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.TeleconferenceResultId).HasColumnName(@"TeleconferenceResultId").IsOptional().HasColumnType("tinyint");
            Property(x => x.TeleconferenceResultSentDate).HasColumnName(@"TeleconferenceResultSentDate").IsOptional().HasColumnType("datetime");

            // Foreign keys
            HasOptional(a => a.TeleconferenceResult).WithMany(b => b.Teleconferences).HasForeignKey(c => c.TeleconferenceResultId); // FK_Teleconference_TeleconferenceResult
            HasRequired(a => a.ServiceRequest).WithMany(b => b.Teleconferences).HasForeignKey(c => c.ServiceRequestId); // FK_Teleconference_ServiceRequest
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
