@page "/accept/{InvitationId}"
@using System.ComponentModel.DataAnnotations
@using Fargs.Portal.Services.DateTimeService
@using Fargs.Portal.Services.Email.ConfirmEmail
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore
@using Fargs.Portal.Data.Companies
@using Microsoft.Extensions.Logging
@using System.Text
@using System.Text.Encodings.Web

@implements IDisposable

@inject IDbContextFactory<ApplicationDbContext> dbContextFactory
@inject NavigationManager navigationManager
@inject IDateTime dateTime
@inject ILogger<Accept> logger
@inject IToastService toastService

@code {
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    [Parameter] public string InvitationId { get; set; }

    ApplicationDbContext dbContext { get; set; }

    public CompanyUserInvitation Invitation { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Guid invitationId;
        if (!Guid.TryParse(InvitationId, out invitationId))
        {
            navigationManager.NavigateTo(AnonymousRoutes.NotFound);
        }

        var userId = (await authenticationStateTask).User.UserId();

        dbContext = dbContextFactory.CreateDbContext();

        Invitation = await dbContext.CompanyUserInvitations
            .Where(c => c.ObjectGuid == invitationId && c.UserId == userId)
            .SingleOrDefaultAsync();

        if (Invitation == null)
        {
            navigationManager.NavigateTo("/NotFound");
        }

        Invitation.AcceptedDate = dateTime.UtcNow;

        var companyRole = await dbContext.CompanyRoles
            .Where(c => c.Id == Invitation.CompanyRoleId)
            .SingleAsync();

        var companyAccess = new CompanyAccess()
        {
            CompanyRole = companyRole,
            ObjectGuid = Guid.NewGuid(),
            UserId = userId,
            ModifiedBy = userId
        };

        dbContext.CompanyAccesses.Add(companyAccess);

        await dbContext.SaveChangesAsync();

        toastService.ShowSuccess("Invite accepted!");

        navigationManager.NavigateTo("/");
    }

    public void Dispose()
    {
        dbContext?.Dispose();
    }
}
