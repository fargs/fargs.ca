// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace Orvosi.Data
{

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.21.1.0")]
    public partial class FakeOrvosiDbContext : IOrvosiDbContext
    {
        public System.Data.Entity.DbSet<Account> Accounts { get; set; }
        public System.Data.Entity.DbSet<Address> Addresses { get; set; }
        public System.Data.Entity.DbSet<AddressType> AddressTypes { get; set; }
        public System.Data.Entity.DbSet<AddressV2> AddressV2 { get; set; }
        public System.Data.Entity.DbSet<AspNetRole> AspNetRoles { get; set; }
        public System.Data.Entity.DbSet<AspNetRolesFeature> AspNetRolesFeatures { get; set; }
        public System.Data.Entity.DbSet<AspNetUser> AspNetUsers { get; set; }
        public System.Data.Entity.DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public System.Data.Entity.DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public System.Data.Entity.DbSet<AspNetUserRole> AspNetUserRoles { get; set; }
        public System.Data.Entity.DbSet<AspNetUserView> AspNetUserViews { get; set; }
        public System.Data.Entity.DbSet<AvailableDay> AvailableDays { get; set; }
        public System.Data.Entity.DbSet<AvailableDayResource> AvailableDayResources { get; set; }
        public System.Data.Entity.DbSet<AvailableSlot> AvailableSlots { get; set; }
        public System.Data.Entity.DbSet<AvailableSlotView> AvailableSlotViews { get; set; }
        public System.Data.Entity.DbSet<BillableEntity> BillableEntities { get; set; }
        public System.Data.Entity.DbSet<City> Cities { get; set; }
        public System.Data.Entity.DbSet<Collaborator> Collaborators { get; set; }
        public System.Data.Entity.DbSet<CommentType> CommentTypes { get; set; }
        public System.Data.Entity.DbSet<Company> Companies { get; set; }
        public System.Data.Entity.DbSet<CompanyService> CompanyServices { get; set; }
        public System.Data.Entity.DbSet<CompanyV2> CompanyV2 { get; set; }
        public System.Data.Entity.DbSet<Country> Countries { get; set; }
        public System.Data.Entity.DbSet<Document> Documents { get; set; }
        public System.Data.Entity.DbSet<DocumentTemplate> DocumentTemplates { get; set; }
        public System.Data.Entity.DbSet<DocumentType> DocumentTypes { get; set; }
        public System.Data.Entity.DbSet<Feature> Features { get; set; }
        public System.Data.Entity.DbSet<Invoice> Invoices { get; set; }
        public System.Data.Entity.DbSet<InvoiceDetail> InvoiceDetails { get; set; }
        public System.Data.Entity.DbSet<InvoiceSentLog> InvoiceSentLogs { get; set; }
        public System.Data.Entity.DbSet<LocationArea> LocationAreas { get; set; }
        public System.Data.Entity.DbSet<LocationView> LocationViews { get; set; }
        public System.Data.Entity.DbSet<Lookup> Lookups { get; set; }
        public System.Data.Entity.DbSet<LookupItem> LookupItems { get; set; }
        public System.Data.Entity.DbSet<MedicolegalType> MedicolegalTypes { get; set; }
        public System.Data.Entity.DbSet<Organization> Organizations { get; set; }
        public System.Data.Entity.DbSet<OTask> OTasks { get; set; }
        public System.Data.Entity.DbSet<Person> People { get; set; }
        public System.Data.Entity.DbSet<Physician> Physicians { get; set; }
        public System.Data.Entity.DbSet<PhysicianCompany> PhysicianCompanies { get; set; }
        public System.Data.Entity.DbSet<PhysicianCompanyStatu> PhysicianCompanyStatus { get; set; }
        public System.Data.Entity.DbSet<PhysicianCompanyView> PhysicianCompanyViews { get; set; }
        public System.Data.Entity.DbSet<PhysicianInsurance> PhysicianInsurances { get; set; }
        public System.Data.Entity.DbSet<PhysicianLicense> PhysicianLicenses { get; set; }
        public System.Data.Entity.DbSet<PhysicianLocation> PhysicianLocations { get; set; }
        public System.Data.Entity.DbSet<PhysicianLocationArea> PhysicianLocationAreas { get; set; }
        public System.Data.Entity.DbSet<PhysicianService> PhysicianServices { get; set; }
        public System.Data.Entity.DbSet<PhysicianServiceRequestTemplate> PhysicianServiceRequestTemplates { get; set; }
        public System.Data.Entity.DbSet<PhysicianSpeciality> PhysicianSpecialities { get; set; }
        public System.Data.Entity.DbSet<Price> Prices { get; set; }
        public System.Data.Entity.DbSet<Profile> Profiles { get; set; }
        public System.Data.Entity.DbSet<Province> Provinces { get; set; }
        public System.Data.Entity.DbSet<Receipt> Receipts { get; set; }
        public System.Data.Entity.DbSet<RefactorLog> RefactorLogs { get; set; }
        public System.Data.Entity.DbSet<RoleCategory> RoleCategories { get; set; }
        public System.Data.Entity.DbSet<Service> Services { get; set; }
        public System.Data.Entity.DbSet<ServiceCatalogue> ServiceCatalogues { get; set; }
        public System.Data.Entity.DbSet<ServiceCatalogueRate> ServiceCatalogueRates { get; set; }
        public System.Data.Entity.DbSet<ServiceCategory> ServiceCategories { get; set; }
        public System.Data.Entity.DbSet<ServicePortfolio> ServicePortfolios { get; set; }
        public System.Data.Entity.DbSet<ServiceRequest> ServiceRequests { get; set; }
        public System.Data.Entity.DbSet<ServiceRequestBoxCollaboration> ServiceRequestBoxCollaborations { get; set; }
        public System.Data.Entity.DbSet<ServiceRequestComment> ServiceRequestComments { get; set; }
        public System.Data.Entity.DbSet<ServiceRequestCommentAccess> ServiceRequestCommentAccesses { get; set; }
        public System.Data.Entity.DbSet<ServiceRequestMessage> ServiceRequestMessages { get; set; }
        public System.Data.Entity.DbSet<ServiceRequestResource> ServiceRequestResources { get; set; }
        public System.Data.Entity.DbSet<ServiceRequestStatu> ServiceRequestStatus { get; set; }
        public System.Data.Entity.DbSet<ServiceRequestTask> ServiceRequestTasks { get; set; }
        public System.Data.Entity.DbSet<ServiceRequestTemplate> ServiceRequestTemplates { get; set; }
        public System.Data.Entity.DbSet<ServiceRequestTemplateTask> ServiceRequestTemplateTasks { get; set; }
        public System.Data.Entity.DbSet<ServiceRequestView> ServiceRequestViews { get; set; }
        public System.Data.Entity.DbSet<ServiceV2> ServiceV2 { get; set; }
        public System.Data.Entity.DbSet<TaskPhase> TaskPhases { get; set; }
        public System.Data.Entity.DbSet<TaskStatu> TaskStatus { get; set; }
        public System.Data.Entity.DbSet<TeamMember> TeamMembers { get; set; }
        public System.Data.Entity.DbSet<Teleconference> Teleconferences { get; set; }
        public System.Data.Entity.DbSet<TeleconferenceResult> TeleconferenceResults { get; set; }
        public System.Data.Entity.DbSet<Time> Times { get; set; }
        public System.Data.Entity.DbSet<TimeZone> TimeZones { get; set; }
        public System.Data.Entity.DbSet<TravelPrice> TravelPrices { get; set; }
        public System.Data.Entity.DbSet<UserInbox> UserInboxes { get; set; }

        public FakeOrvosiDbContext()
        {
            Accounts = new FakeDbSet<Account>("Id", "EmailConfirmed", "PhoneNumberConfirmed", "TwoFactorEnabled", "LockoutEnabled", "AccessFailedCount", "UserName", "ModifiedDate", "ModifiedUser", "IsTestRecord", "IsAppTester");
            Addresses = new FakeDbSet<Address>("Id");
            AddressTypes = new FakeDbSet<AddressType>("Id");
            AddressV2 = new FakeDbSet<AddressV2>("Id");
            AspNetRoles = new FakeDbSet<AspNetRole>("Id");
            AspNetRolesFeatures = new FakeDbSet<AspNetRolesFeature>("Id");
            AspNetUsers = new FakeDbSet<AspNetUser>("Id");
            AspNetUserClaims = new FakeDbSet<AspNetUserClaim>("Id");
            AspNetUserLogins = new FakeDbSet<AspNetUserLogin>("LoginProvider", "ProviderKey", "UserId");
            AspNetUserRoles = new FakeDbSet<AspNetUserRole>("UserId", "RoleId");
            AspNetUserViews = new FakeDbSet<AspNetUserView>("Id", "EmailConfirmed", "PhoneNumberConfirmed", "TwoFactorEnabled", "LockoutEnabled", "AccessFailedCount", "UserName", "ModifiedDate", "ModifiedUser", "IsTestRecord");
            AvailableDays = new FakeDbSet<AvailableDay>("Id");
            AvailableDayResources = new FakeDbSet<AvailableDayResource>("Id");
            AvailableSlots = new FakeDbSet<AvailableSlot>("Id");
            AvailableSlotViews = new FakeDbSet<AvailableSlotView>("Id", "AvailableDayId", "StartTime", "ModifiedDate", "ModifiedUser", "Title");
            BillableEntities = new FakeDbSet<BillableEntity>("EntityType");
            Cities = new FakeDbSet<City>("Id");
            Collaborators = new FakeDbSet<Collaborator>("Id");
            CommentTypes = new FakeDbSet<CommentType>("Id");
            Companies = new FakeDbSet<Company>("Id");
            CompanyServices = new FakeDbSet<CompanyService>("Id");
            CompanyV2 = new FakeDbSet<CompanyV2>("Id");
            Countries = new FakeDbSet<Country>("Id");
            Documents = new FakeDbSet<Document>("Id");
            DocumentTemplates = new FakeDbSet<DocumentTemplate>("Id");
            DocumentTypes = new FakeDbSet<DocumentType>("Id");
            Features = new FakeDbSet<Feature>("Id");
            Invoices = new FakeDbSet<Invoice>("Id");
            InvoiceDetails = new FakeDbSet<InvoiceDetail>("Id");
            InvoiceSentLogs = new FakeDbSet<InvoiceSentLog>("Id");
            LocationAreas = new FakeDbSet<LocationArea>("LookupId", "LookupName", "ItemId", "ItemText");
            LocationViews = new FakeDbSet<LocationView>("Id", "ObjectGuid", "AddressTypeId", "Address1", "City", "CountryId", "ModifiedDate", "ModifiedUser");
            Lookups = new FakeDbSet<Lookup>("Id");
            LookupItems = new FakeDbSet<LookupItem>("Id");
            MedicolegalTypes = new FakeDbSet<MedicolegalType>("Id");
            Organizations = new FakeDbSet<Organization>("Id");
            OTasks = new FakeDbSet<OTask>("Id");
            People = new FakeDbSet<Person>("Id");
            Physicians = new FakeDbSet<Physician>("Id");
            PhysicianCompanies = new FakeDbSet<PhysicianCompany>("Id");
            PhysicianCompanyStatus = new FakeDbSet<PhysicianCompanyStatu>("Id");
            PhysicianCompanyViews = new FakeDbSet<PhysicianCompanyView>("PhysicianId", "CompanyId");
            PhysicianInsurances = new FakeDbSet<PhysicianInsurance>("Id");
            PhysicianLicenses = new FakeDbSet<PhysicianLicense>("Id");
            PhysicianLocations = new FakeDbSet<PhysicianLocation>("Id");
            PhysicianLocationAreas = new FakeDbSet<PhysicianLocationArea>("Id", "PhysicianId", "LocationId", "ModifiedDate", "ModifiedUser");
            PhysicianServices = new FakeDbSet<PhysicianService>("Id");
            PhysicianServiceRequestTemplates = new FakeDbSet<PhysicianServiceRequestTemplate>("PhysicianId", "ServiceRequestTemplateId");
            PhysicianSpecialities = new FakeDbSet<PhysicianSpeciality>("Id");
            Prices = new FakeDbSet<Price>("Id");
            Profiles = new FakeDbSet<Profile>("Id", "ModifiedDate", "ModifiedUser", "IsTestRecord");
            Provinces = new FakeDbSet<Province>("Id");
            Receipts = new FakeDbSet<Receipt>("Id");
            RefactorLogs = new FakeDbSet<RefactorLog>("OperationKey");
            RoleCategories = new FakeDbSet<RoleCategory>("Id");
            Services = new FakeDbSet<Service>("Id");
            ServiceCatalogues = new FakeDbSet<ServiceCatalogue>("Id");
            ServiceCatalogueRates = new FakeDbSet<ServiceCatalogueRate>("Id");
            ServiceCategories = new FakeDbSet<ServiceCategory>("Id");
            ServicePortfolios = new FakeDbSet<ServicePortfolio>("Id");
            ServiceRequests = new FakeDbSet<ServiceRequest>("Id");
            ServiceRequestBoxCollaborations = new FakeDbSet<ServiceRequestBoxCollaboration>("Id");
            ServiceRequestComments = new FakeDbSet<ServiceRequestComment>("Id");
            ServiceRequestCommentAccesses = new FakeDbSet<ServiceRequestCommentAccess>("Id");
            ServiceRequestMessages = new FakeDbSet<ServiceRequestMessage>("Id");
            ServiceRequestResources = new FakeDbSet<ServiceRequestResource>("Id");
            ServiceRequestStatus = new FakeDbSet<ServiceRequestStatu>("Id");
            ServiceRequestTasks = new FakeDbSet<ServiceRequestTask>("Id");
            ServiceRequestTemplates = new FakeDbSet<ServiceRequestTemplate>("Id");
            ServiceRequestTemplateTasks = new FakeDbSet<ServiceRequestTemplateTask>("Id");
            ServiceRequestViews = new FakeDbSet<ServiceRequestView>("Id", "ObjectGuid", "IsNoShow", "IsLateCancellation", "ModifiedDate", "ModifiedUser", "ServiceName", "PhysicianId", "PhysicianUserName");
            ServiceV2 = new FakeDbSet<ServiceV2>("Id");
            TaskPhases = new FakeDbSet<TaskPhase>("Id");
            TaskStatus = new FakeDbSet<TaskStatu>("Id");
            TeamMembers = new FakeDbSet<TeamMember>("Id");
            Teleconferences = new FakeDbSet<Teleconference>("Id");
            TeleconferenceResults = new FakeDbSet<TeleconferenceResult>("Id");
            Times = new FakeDbSet<Time>("Id", "PkDate", "ModifiedDate");
            TimeZones = new FakeDbSet<TimeZone>("Id");
            TravelPrices = new FakeDbSet<TravelPrice>("Id");
            UserInboxes = new FakeDbSet<UserInbox>("Id");

            InitializePartial();
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        partial void InitializePartial();

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }
        
        // Stored Procedures
        public System.Collections.Generic.List<GetAssignedServiceRequestsReturnModel> GetAssignedServiceRequests(System.Guid? assignedTo, System.DateTime? now, bool? showClosed, int? serviceRequestId)
        {
            int procResult;
            return GetAssignedServiceRequests(assignedTo, now, showClosed, serviceRequestId, out procResult);
        }

        public System.Collections.Generic.List<GetAssignedServiceRequestsReturnModel> GetAssignedServiceRequests(System.Guid? assignedTo, System.DateTime? now, bool? showClosed, int? serviceRequestId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetAssignedServiceRequestsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetAssignedServiceRequestsReturnModel>> GetAssignedServiceRequestsAsync(System.Guid? assignedTo, System.DateTime? now, bool? showClosed, int? serviceRequestId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetAssignedServiceRequests(assignedTo, now, showClosed, serviceRequestId, out procResult));
        }

        public System.Collections.Generic.List<GetBoxTokensReturnModel> GetBoxTokens(System.Guid? userId)
        {
            int procResult;
            return GetBoxTokens(userId, out procResult);
        }

        public System.Collections.Generic.List<GetBoxTokensReturnModel> GetBoxTokens(System.Guid? userId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetBoxTokensReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetBoxTokensReturnModel>> GetBoxTokensAsync(System.Guid? userId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetBoxTokens(userId, out procResult));
        }

        public System.Collections.Generic.List<GetCompanyProvinceReturnModel> GetCompanyProvince(int? companyId)
        {
            int procResult;
            return GetCompanyProvince(companyId, out procResult);
        }

        public System.Collections.Generic.List<GetCompanyProvinceReturnModel> GetCompanyProvince(int? companyId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetCompanyProvinceReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetCompanyProvinceReturnModel>> GetCompanyProvinceAsync(int? companyId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetCompanyProvince(companyId, out procResult));
        }

        public System.Collections.Generic.List<GetNextInvoiceNumberReturnModel> GetNextInvoiceNumber()
        {
            int procResult;
            return GetNextInvoiceNumber(out procResult);
        }

        public System.Collections.Generic.List<GetNextInvoiceNumberReturnModel> GetNextInvoiceNumber(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetNextInvoiceNumberReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetNextInvoiceNumberReturnModel>> GetNextInvoiceNumberAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetNextInvoiceNumber(out procResult));
        }

        public System.Collections.Generic.List<GetServiceCatalogueReturnModel> GetServiceCatalogue(System.Guid? physicianId)
        {
            int procResult;
            return GetServiceCatalogue(physicianId, out procResult);
        }

        public System.Collections.Generic.List<GetServiceCatalogueReturnModel> GetServiceCatalogue(System.Guid? physicianId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetServiceCatalogueReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetServiceCatalogueReturnModel>> GetServiceCatalogueAsync(System.Guid? physicianId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetServiceCatalogue(physicianId, out procResult));
        }

        public System.Collections.Generic.List<GetServiceCatalogueReturnModel> GetServiceCatalogueForCompany(System.Guid? physicianId, short? companyId)
        {
            int procResult;
            return GetServiceCatalogueForCompany(physicianId, companyId, out procResult);
        }

        public System.Collections.Generic.List<GetServiceCatalogueReturnModel> GetServiceCatalogueForCompany(System.Guid? physicianId, short? companyId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetServiceCatalogueReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetServiceCatalogueReturnModel>> GetServiceCatalogueForCompanyAsync(System.Guid? physicianId, short? companyId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetServiceCatalogueForCompany(physicianId, companyId, out procResult));
        }

        public int GetServiceCatalogueMatrix(string physicianId, short? companyId)
        {
 
            return 0;
        }

        public System.Collections.Generic.List<GetServiceCatalogueRateReturnModel> GetServiceCatalogueRate(System.Guid? serviceProviderGuid, System.Guid? customerGuid)
        {
            int procResult;
            return GetServiceCatalogueRate(serviceProviderGuid, customerGuid, out procResult);
        }

        public System.Collections.Generic.List<GetServiceCatalogueRateReturnModel> GetServiceCatalogueRate(System.Guid? serviceProviderGuid, System.Guid? customerGuid, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetServiceCatalogueRateReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetServiceCatalogueRateReturnModel>> GetServiceCatalogueRateAsync(System.Guid? serviceProviderGuid, System.Guid? customerGuid)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetServiceCatalogueRate(serviceProviderGuid, customerGuid, out procResult));
        }

        public System.Collections.Generic.List<GetServiceRequestReturnModel> GetServiceRequest(int? serviceRequestId, System.DateTime? now)
        {
            int procResult;
            return GetServiceRequest(serviceRequestId, now, out procResult);
        }

        public System.Collections.Generic.List<GetServiceRequestReturnModel> GetServiceRequest(int? serviceRequestId, System.DateTime? now, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetServiceRequestReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetServiceRequestReturnModel>> GetServiceRequestAsync(int? serviceRequestId, System.DateTime? now)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetServiceRequest(serviceRequestId, now, out procResult));
        }

        public System.Collections.Generic.List<GetServiceRequestResourcesReturnModel> GetServiceRequestResources(int? serviceRequestId)
        {
            int procResult;
            return GetServiceRequestResources(serviceRequestId, out procResult);
        }

        public System.Collections.Generic.List<GetServiceRequestResourcesReturnModel> GetServiceRequestResources(int? serviceRequestId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetServiceRequestResourcesReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetServiceRequestResourcesReturnModel>> GetServiceRequestResourcesAsync(int? serviceRequestId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetServiceRequestResources(serviceRequestId, out procResult));
        }

        public int GetServiceRequestTasks(System.DateTime? now, string serviceRequestIds)
        {
 
            return 0;
        }

        public int SaveBoxTokens(string accessToken, string refreshToken, System.Guid? userId)
        {
 
            return 0;
        }

        public int ToggleCancellation(int? id, System.DateTime? cancelledDate, bool? isLateCancellation, string notes)
        {
 
            return 0;
        }

        public int ToggleNoShow(int? id)
        {
 
            return 0;
        }

    }
}
// </auto-generated>
