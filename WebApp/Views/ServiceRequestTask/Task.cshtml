@using WebApp.Library
@using Orvosi.Data
@using FluentDateTime
@using Features = Orvosi.Shared.Enums.Features
@model TaskWithCaseViewModel

@{
    var task = Model.Task;
    var sr = Model.Case;

    var session = DependencyResolver.Current.GetService<SessionService>();
    var features = session.AuthorizedFeatures;
    var identity = session.identity;
    var viewDataService = DependencyResolver.Current.GetService<ViewDataService>();
    var teamMemberSelectList = viewDataService.GetCollaborationSelectList(sr.Physician.Id);
    teamMemberSelectList.Add(new SelectListItem
    {
        Text = sr.Physician.Name,
        Value = sr.Physician.Id.ToString()
    });
}
<tr id="task-container-@task.Id">
    <td width="50px">
        <div class="dropdown">
            <button class="btn btn-sm btn-link" data-toggle="dropdown">
                <i class="fa fa-ellipsis-h fa-lg"></i>
            </button>
            <ul class="dropdown-menu" aria-labelledby="dLabel">
                @if (features.Contains(Features.ServiceRequest.PickupTask))
                {
                    <li><a tabindex="-1" onclick="pickupTask(@task.Id)">Pickup</a></li>
                }
                @if (features.Contains(Features.ServiceRequest.AssignTask))
                {
                    <li class="dropdown-submenu">
                        <a tabindex="-1" class="assign-to" onclick="menuDropdownClick(event, this)">
                            Assign To
                            <span class="caret"></span>
                        </a>
                        <ul class="dropdown-menu">
                            @foreach (var teamMember in teamMemberSelectList.OrderBy(c => c.Text))
                            {
                                <li>
                                    <a tabindex="-1" onclick="assignTask(@task.Id, '@(teamMember.Value)')">@teamMember.Text</a>
                                </li>
                            }
                        </ul>
                    </li>
                }
                @if (features.Contains(Features.ServiceRequest.UpdateTaskStatus))
                {
                    <li class="divider"></li>
                        <li>
                            <a tabindex="-1" onclick="toggleTaskStatus(@task.Id , @TaskStatuses.OnHold)">
                                On Hold
                                @if (task.StatusId == TaskStatuses.OnHold)
                                {
                                    <i class="fa fa-check"></i>
                                }
                            </a>
                        </li>
                        <li>
                            <a tabindex="-1" onclick="toggleTaskStatus(@task.Id , @TaskStatuses.Obsolete)">
                                Cancel
                                @if (task.StatusId == TaskStatuses.Obsolete)
                                {
                                    <i class="fa fa-check"></i>
                                }
                            </a>
                        </li>
                }
                @if (features.Contains(Features.ServiceRequest.DeleteTask))
                {
                    <li class="divider"></li>
                        <li><a tabindex="-1" onclick="deleteTask(@task.Id)">Delete</a></li>
                }
            </ul>
        </div>
    </td>
    <td width="50px">
        @if (task.TaskId == Tasks.AssessmentDay)
        {
            <span class="btn btn-sm btn-circle">
                <i class="fa fa-calendar fa-lg"></i>
            </span>
        }
        else
        {
            @Html.Partial("_Initials2", task.AssignedTo == null ? new LookupViewModel<Guid>() : task.AssignedTo)
        }
    </td>
    <td width="20px">
        @if (features.Contains(Features.ServiceRequest.UpdateTaskStatus))
        {
            <form action="~/ServiceRequestTask/ToggleCompleted" method="post" class="pull-left">
                @Html.Hidden("serviceRequestTaskId", task.Id)
                <span class="checkbox" style="margin-top:0px; margin-bottom:0px;">
                    <label>
                        <input id="task-checkbox-@task.Id" type="checkbox"
                               name="isChecked"
                               value="@(task.StatusId == TaskStatuses.Done)"
                               @(task.StatusId == TaskStatuses.Done ? "checked" : "")
                               @*@(task.StatusId == TaskStatuses.Waiting || task.StatusId == TaskStatuses.Obsolete ? "disabled" : "")*@
                               onclick="toggleCompleted(this)">
                    </label>
                </span>
            </form>
        }
    </td>
    <td width="100px" title="@("Due on " + task.DueDate.ToOrvosiDateFormat() + ". Last changed by " + (task.TaskStatusChangedDate.HasValue ? task.TaskStatusChangedBy.Name + " on " + task.TaskStatusChangedDate.Value.ToString("ddd, MMM dd") + " at " + task.TaskStatusChangedDate.Value.ToShortTimeString() : "was not recorded"))">
        @Html.Partial("_TaskStatusLabel2", task.StatusId)
    </td>
    <td>
        @sr.DueDate.Value.ToOrvosiDateShortFormat()
    </td>
    <td>
        <a style="cursor:pointer;" onclick="taskAction(@task.Id, @task.TaskId)">@(string.IsNullOrEmpty(task.ShortName) ? task.Name : task.ShortName)</a>
    </td>
    <td>
        <a style="cursor:pointer;" onclick="showCaseDetails(@sr.ServiceRequestId)">@sr.ClaimantName</a>
        @if (!string.IsNullOrEmpty(sr.Notes))
        {
            <i class="fa fa-sticky-note" style="color:goldenrod;"></i>
        }
    </td>
    <td>
        @(sr.AppointmentDateAndStartTime.HasValue ? sr.AppointmentDateAndStartTime.Value.ToOrvosiDateTimeShortFormat() : string.Empty)
    </td>
    <td>
        <strong style="color: @sr.Service.ColorCode">@sr.Service.Code</strong>
    </td>
    <td>
        @sr.Company.Code
    </td>
    <td>
        @(sr.Address != null ? sr.Address.CityCode : string.Empty)
    </td>
    <td>
        @Html.Partial("_Initials2", sr.Physician)
    </td>
</tr>
