@using WebApp.Library.Extensions
@using Orvosi.Shared.Enums
@using FluentDateTime
@model WebApp.ViewModels.DashboardViewModels.ScheduleViewModel
@{
    Layout = "~/Views/Dashboard/_Layout.cshtml";

    var roleId = User.Identity.GetRoleId();
    var roles = new Guid[3] { AspNetRoles.AppTester, AspNetRoles.SuperAdmin, AspNetRoles.CaseCoordinator };
}

@functions {

    string WeekStyle(DateTime day)
    {
        var now = SystemTime.Now();
        if (day < now.FirstDayOfWeek())
        {
            return "panel-danger";
        }
        else if (day > now.LastDayOfWeek())
        {
            return "panel-default";
        }
        else
        {
            return "panel-success";
        }
    }
}

@*<form action="~/Dashboard/Schedule" method="get">
    <input type="hidden" name="serviceProviderId" value="@Model.SelectedUserId" />
    <ul class="list-unstyled list-inline">
        @foreach (var item in Model.TaskFilterViewModel.Tasks)
        {
            <li><input type="checkbox" name="selectedTaskTypes" value="@item.Id" @(Model.TaskFilterViewModel.SelectedTaskTypes.Any(taskId => taskId == item.Id) ? "checked" : string.Empty) /> @item.Name</li>
        }
        <li><button type="submit" class="btn btn-small">Apply Filter</button></li>
    </ul>
</form>*@

<div id="week-folders" class="panel-group">

    <div class="panel">
        <div class="panel-heading">
            <div class="row">
                <div class="col-xs-12 col-sm-9"><strong>Week</strong></div>
                <div class="col-xs-12 col-sm-1 text-center"><strong>To Do</strong></div>
                <div class="col-xs-12 col-sm-1 text-center"><strong>Waiting On</strong></div>
                <div class="col-xs-12 col-sm-1 text-center"><strong>On Hold</strong></div>
            </div>
        </div>
    </div>
    @foreach (var weekFolder in Model.WeekFolders)//.ThisWeekCards)
    {
        <div class="panel @WeekStyle(weekFolder.Day)">
            <div id="header-weekfolder-@weekFolder.Day.Ticks" class="panel-heading" role="tab">
                <a role="button" onclick="getWeek('@weekFolder.Day.ToOrvosiDateFormat()', 'week-@weekFolder.Day.Ticks')">
                    <div class="panel-title">
                        <div class="row">
                            <div class="col-xs-12 col-sm-9">
                                <span>@weekFolder.Day.ToOrvosiDateFormat()</span>
                            </div>
                            <div class="col-xs-12 col-sm-1 text-center">
                                <span id="todo-total-label" class="small label @(weekFolder.TaskStatusSummary.ToDoCount > 0 ? "label-danger" : "bg-danger")"><strong id="todo-total">@weekFolder.TaskStatusSummary.ToDoCount</strong></span>
                            </div>
                            <div class="col-xs-12 col-sm-1 text-center">
                                <span id="waiting-total-label" class="small label @(weekFolder.TaskStatusSummary.WaitingCount > 0 ? "label-warning" : "bg-warning")"><strong id="waiting-total">@weekFolder.TaskStatusSummary.WaitingCount</strong></span>
                            </div>
                            <div class="col-xs-12 col-sm-1 text-center">
                                <span id="onhold-total-label" class="small label @(weekFolder.TaskStatusSummary.OnHoldCount > 0 ? "label-info" : "bg-info")"><strong id="onhold-total">@weekFolder.TaskStatusSummary.OnHoldCount</strong></span>
                            </div>
                        </div>
                    </div>
                </a>
            </div>
            <section id="week-@weekFolder.Day.Ticks" class="panel-collapse collapse"></section>
        </div>
    }
</div>

@Html.Partial("ModalContainer")

@section Scripts{
    <script>

        function getWeek(day, targetId) {
            let url = '@Url.Content("~/ServiceRequest/ScheduleDateRange")';

            var container = $(document.getElementById(targetId));
            if (!container.hasClass('in')) {
                $.post(url, {
                    DateRange: {
                        StartDate: day,
                        FilterType: 'Week'
                    },
                    ViewOptions: "Dashboard",
                    Options: "MyActiveTasks"
                })
                .done(function (result) {
                    document.getElementById(targetId).innerHTML = result;
                    container.collapse('toggle');
                    //joinRoom(serviceRequestId);
                    //refreshValidationResults(serviceRequestId);
                });
            }
            else {
                container.collapse('toggle');
            }
        }

        function onToggleNoShow(checkbox, serviceRequestId) {

            $.ajax({
                type: "POST",
                url: '@Url.Content("~/Dashboard/ToggleNoShow")',
                data: JSON.stringify({
                    serviceRequestId: serviceRequestId,
                    isChecked: checkbox.checked,
                    serviceProviderGuid: '@Model.SelectedUserId'
                }),
                contentType: "application/json; charset=utf-8",
                success: function (result) {
                    toastr.success("Request updated successfully.", "Request Updated");
                    refreshServiceRequestTasks(serviceRequestId);
                    refreshServiceStatus(serviceRequestId);
                },
                error: function (err) {
                    alert(err.status + " - " + err.statusText);
                }
            }, this);
        }

        // this is called from the TaskJS functions
        function tasklistChanged(serviceRequestId) {
            let url = '@Url.Content("~/ServiceRequestTask/TaskList")';

            $.get(url, {
                serviceRequestId: serviceRequestId
            })
            .done(function (result) {
                document.getElementById('tasklist-container').innerHTML = result;
            })
            .always(function () {
                //loader.hide();
            });
        }

        function serviceRequestStatusChanged(serviceRequestId) {
            let url = '@Url.Content("~/ServiceRequest/Case")';

            $.get(url, {
                serviceRequestId: serviceRequestId,
                viewOptions: '@ViewTarget.Modal'
            })
            .done(function (result) {
                document.getElementById('case-container').innerHTML = result;
            })
            .always(function () {
                //loader.hide();
            });
        }

        function refreshServiceStatus(serviceRequestId) {

            $.ajax({
                type: "GET",
                url: '@Url.Content("~/Dashboard/RefreshServiceStatus?serviceRequestId=")' + serviceRequestId,
                contentType: "text/html",
                success: function (result) {
                    $('#service-status-' + serviceRequestId).replaceWith(result);
                },
                error: function (err) {
                    // undo the UI change made before the ajax call
                    window.location.reload();
                }
            }, this);

        }

        function UpdateView(result, params) {
            // get the updated assessment data
            if (!params.isAddOn) {
                var weekFolder = $.grep(result.WeekFolders, function (item) { return item.StartDateTicks == params.week; });
                SetWeekTotals(weekFolder[0], params.week);
                var dayFolder = $.grep(weekFolder[0].DayFolders, function (item) { return item.DayTicks == params.day; });
                var assessment = $.grep(dayFolder[0].Assessments, function (item) { return item.Id == params.assessmentId; });
                SetAssessmentStatus(assessment[0], params.assessmentId);
                console.log('Is not addon: ' + result);
            }
            else {
                var assessment = $.grep(result.AddOns, function (item) { return item.Id == params.assessmentId; });
                SetAssessmentStatus(assessment[0], params.assessmentId);
                console.log('Is addon: ' + result);
            }
            //SetAssessmentTotals(assessment[0], params.assessmentId);
            updateTaskStatuses(assessment[0], params.assessmentId);

            console.log('view updated successfully: ' + result);
        }

        function SetWeekTotals(weekFolderFromResult, weekIdForEl) {
            var weekFolderEl = $('#header-weekfolder-' + weekIdForEl);

            var assessmentTotalEl = weekFolderEl.find('#assessment-total');
            var waitingTotalEl = weekFolderEl.find('#waiting-total-label');
            var todoTotalEl = weekFolderEl.find('#todo-total-label');

            todoTotalEl.removeClass();
            todoTotalEl.addClass(weekFolderFromResult.AssessmentToDoCount > 0 ? "small label label-danger" : "small label bg-danger");
            waitingTotalEl.removeClass();
            waitingTotalEl.addClass(weekFolderFromResult.AssessmentWaitingCount > 0 ? "small label label-warning" : "small label bg-warning");

            assessmentTotalEl.text(weekFolderFromResult.AssessmentCount);
            waitingTotalEl.text(weekFolderFromResult.AssessmentWaitingCount);
            todoTotalEl.text(weekFolderFromResult.AssessmentToDoCount);
        }

        function SetAssessmentStatus(assessmentFromResult, assessmentIdForEl) {
            var assessmentEl = $('#header-assessment-' + assessmentIdForEl);
            var assessmentStatusEl = assessmentEl.find('#assessment-total-label');
            assessmentStatusEl.removeClass();
            assessmentStatusEl.css('color', '');

            if (assessmentFromResult.ServiceRequestStatusId == 1) // Waiting
                assessmentStatusEl.addClass('small label label-warning');
            else if (assessmentFromResult.ServiceRequestStatusId == 2) { // Todo
                if (assessmentFromResult.HasHighWorkload) {
                    assessmentStatusEl.addClass('fa fa-pencil');
                    assessmentStatusEl.css('color', 'red')
                }
                else
                    assessmentStatusEl.addClass('small label label-danger');
            }
            else if (assessmentFromResult.ServiceRequestStatusId == 3) {// Done
                assessmentStatusEl.addClass('fa fa-check');
                assessmentStatusEl.css('color', 'green')
            }
            else if (assessmentFromResult.ServiceRequestStatusId == 4) // Obsolete
                assessmentStatusEl.addClass('fa fa-frown-o');

        }

        function onShowTaskHierarchy(serviceRequestId, taskId) {
            // get the html and display it in the model
            $.ajax({
                type: "GET",
                url: '@Url.Content("~/Dashboard/TaskHierarchy")' + '?serviceRequestId=' + serviceRequestId + '&taskId=' + taskId,
                contentType: "text/html",
                success: function (result) {
                    // inject the html into the modal and display it
                    var modalDiv = $("#dependencies-modal");
                    modalDiv.html(result);
                    modalDiv.modal('toggle');
                },
                error: function (err) {
                    alert(err.status + " - " + err.statusText);
                }
            }, this);
        }

        function onShowTaskList(serviceRequestId) {
            // get the html and display it in the model
            $.ajax({
                type: "GET",
                url: '@Url.Content("~/Dashboard/TaskList")' + '?serviceRequestId=' + serviceRequestId,
                contentType: "text/html",
                success: function (result) {
                    // inject the html into the modal and display it
                    var modalDiv = $("#tasklist-modal");
                    modalDiv.html(result);
                    modalDiv.modal('toggle');
                },
                error: function (err) {
                    alert(err.status + " - " + err.statusText);
                }
            }, this);
        }

        function onShowDiscussion(serviceRequestId) {
            $.ajax({
                type: "GET",
                url: '@Url.Content("~/Dashboard/Discussion")' + '?serviceRequestId=' + serviceRequestId,
                contentType: "text/html",
                success: function (result) {
                    // inject the html into the modal and display it
                    var modalDiv = $("#discussion-modal");
                    modalDiv.html(result);
                    modalDiv.modal('toggle');
                },
                error: function (err) {
                    alert(err.status + " - " + err.statusText);
                }
            }, this);
        }

    </script>

    <script src="@Url.Content("~/signalr/hubs")"></script>
    @Html.Partial("~/Views/ServiceRequestTask/TaskListJS.cshtml")
    @Html.Partial("~/Views/ServiceRequest/CaseJS.cshtml")
}