@using WebApp.FormModels
@using WebApp.Library
@model RescheduleForm

@{
    var session = DependencyResolver.Current.GetService<SessionService>();
    var features = session.AuthorizedFeatures;
    var identity = session.identity;
    var viewDataService = DependencyResolver.Current.GetService<ViewDataService>();
    var slotSelectList = viewDataService.GetPhysicianAvailableSlotSelectList(Model.PhysicianId, Model.AppointmentDate, Model.OriginalAvailableSlotId);
    var availableDays = viewDataService.GetAvailableDays(Model.PhysicianId);
    var addressSelectList = viewDataService.GetPhysicianAddressSelectList(Model.PhysicianId);
}

<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
    <h4 class="modal-title">
        Reschedule Form
    </h4>
</div>
<div class="modal-body">
    <form id="reschedule-form">
        @Html.Hidden("ServiceRequestTaskId", Model.ServiceRequestTaskId)
        @Html.Hidden("ServiceRequestId", Model.ServiceRequestId)
        @Html.Hidden("PhysicianId", Model.PhysicianId)
        @Html.Hidden("OriginalAvailableSlotId", Model.OriginalAvailableSlotId)

        <div id="reschedule-datepicker" data-date="@Model.AppointmentDate.ToOrvosiDateFormat()"></div>
        <input type="hidden" id="AppointmentDate" name="AppointmentDate" value="@Model.AppointmentDate.ToOrvosiDateFormat()">

        @*<div class="form-group">
                <label class="control-label col-md-2">New Appointment Date</label>
                <div class="col-md-10">
                    <div class="input-group date" style="width:100%" id="AppointmentDatePicker">
                        @Html.TextBoxFor(c => c.AppointmentDate, "{0:yyyy-MM-dd}", new { @class = "form-control", size = "16" })
                        <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                    </div>
                    @Html.ValidationMessageFor(c => c.AppointmentDate, "", new { @class = "text-danger" })
                    <div id="availableDayMessage" class="text-danger"></div>
                </div>
            </div>*@
        @Html.Action("SlotPicker", "Reschedule", Model)
        @*<div class="form-group">
                <label class="control-label col-md-2">Location</label>
                <div class="col-md-10">
                    @Html.DropDownList("AddressId", new SelectList(addressSelectList, "Value", "Text", "Group.Name", Model.AddressId), new { @class = "form-control" })
                    @Html.ValidationMessage("AddressId", "", new { @class = "text-danger" })
                    <div id="locationMessage" class="text-danger"></div>
                </div>
            </div>*@
    </form>
</div>
<div class="modal-footer">
    <button class="btn btn-success" onclick="reschedule($('#reschedule-form'))">Save</button>
</div>


<script type="text/javascript">
    let availableDays = [@availableDays];
    console.log(availableDays);
    $('#reschedule-datepicker').datepicker({
        todayBtn: true,
        format: "yyyy-MM-dd",
        beforeShowDay: function (date) {
            let isoDate = date.toISOString().split('T')[0];
            let enabled = ($.inArray(isoDate, availableDays) >= 0);
            console.log(enabled);
            return enabled;
        }
    });
    $('#reschedule-datepicker').on('changeDate', function () {
        console.log('change date event');
        let date = $('#reschedule-datepicker').datepicker('getFormattedDate');
        $('#AppointmentDate').val(date);
        refreshSlots($('#reschedule-form'));
    });
</script>