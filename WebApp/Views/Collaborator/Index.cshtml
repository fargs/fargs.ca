@using Orvosi.Shared.Enums.Features
@using WebApp.Library.Extensions
@model WebApp.ViewModels.CollaboratorViewModel.IndexViewModel

@{
    var features = User.Identity.GetFeatures();
    var userId = User.Identity.GetUserContext().Id;
}

<h1>Team </h1>

@if (features.Contains(Collaborator.Create))
{
    <div class="row">
        <div class="col-xs-12 col-sm-8 col-md-4">
            <form action="~/Collaborator/Create/" method="post" id="add-collaborator-form">
                <div class="input-group">
                    <select class="find-collaborator-select" id="collaboratorUserId" name="collaboratorUserId" style="width:100%"></select>
                    <span class="input-group-btn">
                        <button class="btn btn-success btn-sm" onclick="addCollaborator()" type="button">Add</button>
                    </span>
                </div>
            </form>
        </div>
    </div>
}
<p></p>
<div id="collaborator-list">
    @Html.Action("List", "Collaborator", null)
</div>

@section Scripts{

<script type="text/javascript">

    function addCollaborator() {
        var url = '@Url.Content("~/Collaborator/Create")';
        var form = $('#add-collaborator-form');

        $.post(url,
            form.serialize()
        )
        .done(function (result) {
            toastr.success("Team member added successfully");
            refreshCollaboratorList();
        });
    }

    function removeCollaborator(collaboratorUserId) {
        var url = '@Url.Content("~/Collaborator/Remove?collaboratorUserId=")' + collaboratorUserId;

        $.post(url)
        .done(function (result) {
            toastr.success("Team member removed successfully");
            refreshCollaboratorList();
        });
    }

    function refreshCollaboratorList() {
        let url = '@Url.Content("~/Collaborator/List")';
        $.get(url)
            .done(function (result) {
                $('#collaborator-list').html(result);
            })
            .error(function () {
                window.location.reload();
            });
    }

    function formatCollaboratorListItem(collaborator) {
        if (collaborator.loading) return collaborator.text;

        var markup =
            '<div>' +
                '<span class="btn btn-sm btn-circle btn-circle-groupitem" style="margin-right: 2px; color: white; background-color: ' + collaborator.ColorCode + '">' + collaborator.Initials + '</span>' +
                '<span> ' + collaborator.DisplayName + ' - ' + collaborator.Role.Name + '</span>'
        '</div>';

        return markup;
    }

    function formatCollaboratorListItemSelection(collaborator) {
        return collaborator.DisplayName || collaborator.text;
    }

    $(document).ready(function () {

        var url = '@Url.Content("~/Collaborator/Search")';

        $findCollaboratorSelect = $(".find-collaborator-select");
        $findCollaboratorSelect.select2({
            placeholder: 'Add a team member',
            allowClear: true,
            ajax: {
                url: url,
                dataType: 'json',
                delay: 250,
                data: function (params) {
                    return {
                        searchTerm: params.term, // search term
                        page: params.page
                    };
                },
                processResults: function (data, params) {
                    // parse the results into the format expected by Select2
                    // since we are using custom formatting functions we do not need to
                    // alter the remote JSON data, except to indicate that infinite
                    // scrolling can be used
                    params.page = params.page || 1;

                    return {
                        results: data.items,
                        pagination: {
                            more: (params.page * 30) < data.total_count
                        }
                    };
                },
                cache: false
            },
            escapeMarkup: function (markup) { return markup; }, // let our custom formatter work
            minimumInputLength: 3,
            templateResult: formatCollaboratorListItem, // omitted for brevity, see the source of this page
            templateSelection: formatCollaboratorListItemSelection // omitted for brevity, see the source of this page
        });
    });
</script>
}