@using WebApp.FormModels
@using WebApp.Library
@model RequiredResourcesForm

@{
    var viewDataService = DependencyResolver.Current.GetService<ViewDataService>();
    var teamMembers = viewDataService.GetCollaborationSelectList(Model.PhysicianId);
    var requiredRoles = viewDataService.GetRequiredRolesFromTemplateSelectList(Model.ServiceRequestTemplateId).Where(r => new Guid(r.Value) != AspNetRoles.Physician);
}
<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
    <h4 class="modal-title">
        Required Resources
    </h4>
</div>
<div class="modal-body">
    <form id="required-resources-form">
        @Html.Hidden("PhysicianId", Model.PhysicianId)
        @Html.Hidden("ServiceRequestId", Model.ServiceRequestId)
        @Html.Hidden("ServiceRequestTemplateId", Model.ServiceRequestTemplateId)

        @{var count = 0; }

        @foreach (var role in requiredRoles)
        {
            var assignment = Model.Resources.FirstOrDefault(r => r.RoleId == new Guid(role.Value));
            var value = assignment == null ? Guid.Empty : assignment.UserId;

            @Html.Hidden("Resources[" + count + "].RoleId", role.Value)

            <div class="form-group">
                <label class="control-label">@role.Text</label>
                @Html.DropDownList("Resources[" + count + "].UserId", new SelectList(teamMembers, "Value", "Text", value), string.Empty, new { @class = "form-control" })
            </div>

            count++;
        }
    </form>


</div>
<div class="modal-footer">
    <button class="btn btn-success" onclick="saveResources($('#required-resources-form'))">Save</button>
</div>