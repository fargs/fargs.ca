@page "/moneyout/bills"

@using ClosedXML.Excel
@using DocumentFormat.OpenXml.Packaging
@using DocumentFormat.OpenXml.Spreadsheet
@using Fargs.Portal.Data.Aginzo
@using Fargs.Portal.Data.ServiceConnections
@using Fargs.Portal.Services.FileSystem
@using Intuit.Ipp.Core
@using Intuit.Ipp.QueryFilter
@using Intuit.Ipp.Security
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Options
@using System.Text.Json
@using Fargs.Portal.Services.Accounting
@using Intuit.Ipp.OAuth2PlatformClient
@using System.IO

@inject NavigationManager navigationManager
@inject IOptions<QuickbooksOptions> quickbooksOptions
@inject IDbContextFactory<ApplicationDbContext> dbContextFactory
@inject FileSystemFactory fileSystemFactory
@inject IOptions<LocalFileSystemOptions> localFileSystemOptions

<h3>Connect</h3>
<NavLink href="/ServiceConnections/Quickbooks" class="inline-flex items-center px-2.5 py-1.5 border border-transparent text-xs font-medium rounded shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
	Connect to Quickbooks
</NavLink>

<h3>Vendors</h3>
<button @onclick="GetQuickbooksVendors"
	class="inline-flex items-center px-2.5 py-1.5 border border-transparent text-xs font-medium rounded shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
	Get Vendors from Quickbooks
</button>

@if (qbVendors is not null)
{
	foreach (var vendor in qbVendors)
	{
		<div>@vendor.CompanyName</div>
	}



	<h3>Bills</h3>

	<h4>Step 1:</h4>
	<div>
	 Upload your excel file
	 <InputFile OnChange="@LoadFiles"></InputFile>
	</div>

	@if (harvestExportGrouping is not null)
	{
		<ul>
			@foreach (var file in loadedFiles)
			{
			 <li>
			  <ul>
			   <li>Name: @file.Name</li>
			   <li>Last modified: @file.LastModified.ToString()</li>
			   <li>Size (bytes): @file.Size</li>
			   <li>Content type: @file.ContentType</li>
			  </ul>
			 </li>
			}
		</ul>

		@foreach (var bill in harvestExportGrouping)
		{
			var qbVendor = qbVendors.SingleOrDefault(v => v.CompanyName == bill.Key.QB_Vendor);

			<div class="bg-white px-4 py-5 border-b border-gray-200 sm:px-6">
				<h3 class="text-lg leading-6 font-medium text-gray-900">
					@if (qbVendor is null)
					{
						<span>@bill.Key.QB_Vendor</span>
					}
					else
					{
						<span class="ml-3">@qbVendor.Id</span>
					}
				</h3>
			</div>
			<div class="mt-6 max-w-5xl px-6">
				<dl class="grid grid-cols-1 gap-x-4 gap-y-8 sm:grid-cols-2">
					<div class="sm:col-span-1">
						<dt class="text-sm font-medium text-gray-500">
							Client
						</dt>
						<dd class="mt-1 text-sm text-gray-900">
							@bill.Key.Client
						</dd>
					</div>
					<div class="sm:col-span-1">
						<dt class="text-sm font-medium text-gray-500">
							Project
						</dt>
						<dd class="mt-1 text-sm text-gray-900">
							@bill.Key.Project
						</dd>
					</div>
					<div class="sm:col-span-1">
						<dt class="text-sm font-medium text-gray-500">
							Invoice Id
						</dt>
						<dd class="mt-1 text-sm text-gray-900">
							@bill.Key.InvoiceId
						</dd>
					</div>
					<div class="sm:col-span-1" title="@bill.Key.ItemDescription">
						<dt class="text-sm font-medium text-gray-500">
							Description
						</dt>
						<dd class="mt-1 text-sm text-gray-900">
							@bill.Key.QB_Description
						</dd>
					</div>
				</dl>
			</div>
			<!-- This example requires Tailwind CSS v2.0+ -->
			<div class="flex flex-col">
				<div class="-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
					<div class="py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8">
						<div class="shadow overflow-hidden border-b border-gray-200 sm:rounded-lg">
							<table class="min-w-full divide-y divide-gray-200">
								<thead class="bg-gray-50">
									<tr>
										<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
											Service
										</th>
										<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
											Account
										</th>
										<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
											Amount
										</th>
										<th scope="col" class="relative px-6 py-3">
											<span class="sr-only">Edit</span>
										</th>
									</tr>
								</thead>
								<tbody class="bg-white divide-y divide-gray-200">
									@foreach (var li in bill.LineItems.Where(li => li.QB_Amount > 0.0M))
									{
										<tr>
											<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
												@li.Key.QB_Service
											</td>
											<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
												@li.Key.QB_Account
											</td>
											<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
												@li.QB_Amount
											</td>
											<td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
												<a href="#" class="text-indigo-600 hover:text-indigo-900">Edit</a>
											</td>
										</tr>
									}
				 </tbody>
				</table>
			   </div>
			  </div>
			 </div>
			</div>
			}
		}
	}
	<h4>Step 2:</h4>
	<div>
	 Review the uploaded data after it has been transformed to match the Quickbooks Create bill request message
	</div>

	<h4>Step 3:</h4>

	<div>
	 Complete the batch upload of bills to Quickbooks.
	</div>

	<button @onclick="CreateBills">Create Bills</button>

	<h2>Bills for Quickbooks</h2>
	@if (destinationBills is not null)
	{
		foreach (var bill in destinationBills)
		{
			<div>@bill.Balance</div>
		}
	}

	<h4>Step 4:</h4>

	<div>
	 Retrieve the created records from Quickbooks and join them to the source records to verify the data integration was complete and accurate.
	</div>

	@code {
	[CascadingParameter] Task<AuthenticationState> _authState { get; set; }

	// Source
	private List<IBrowserFile> loadedFiles = new();
	private long maxFileSize = 4000000;
	private int maxAllowedFiles = 3;
	private bool isLoading = false;

	// Transformation
	IEnumerable<HarvestExport> sourceHarvestExport { get; set; }
	IEnumerable<HarvestExport_Grouping> harvestExportGrouping { get; set; }
	IEnumerable<Intuit.Ipp.Data.Bill> destinationBills { get; set; }

	// Destination
	IEnumerable<Intuit.Ipp.Data.Vendor> qbVendors { get; set; }

	private async Task GetQuickbooksVendors()
	{
		var claimsPrincipal = (await _authState).User;
		var userId = claimsPrincipal.UserId();

		var dbContext = dbContextFactory.CreateDbContext();
		var quickbooksConnection = await dbContext.QuickbooksConnections.SingleOrDefaultAsync(u => u.UserId == userId);

		OAuth2RequestValidator requestValidator = new(quickbooksConnection.AccessToken);
		var serviceContext = new ServiceContext(quickbooksConnection.RealmId, IntuitServicesType.QBO, requestValidator);

		serviceContext.IppConfiguration.MinorVersion.Qbo = "23";
		serviceContext.IppConfiguration.BaseUrl.Qbo = "https://sandbox-quickbooks.api.intuit.com/"; //This is sandbox Url. Change to Prod Url if you are using production

		var querySvc = new QueryService<Intuit.Ipp.Data.Vendor>(serviceContext);

		isLoading = true;

		qbVendors = querySvc.ExecuteIdsQuery("Select * from Vendor");

		isLoading = false;

		StateHasChanged();
	}

	private async Task LoadFiles(InputFileChangeEventArgs e)
	{
		isLoading = true;
		loadedFiles.Clear();

		foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
		{
			loadedFiles.Add(file);

			var options = localFileSystemOptions.Value;
			var trustedFileNameForFileStorage = Path.GetRandomFileName();
			var path = Path.Combine(options.RootPath,
			file.Name);

			using (FileStream fs = new(path, FileMode.Create))
			{
				await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
			}

			// Open file as read-only.
			var wb = new XLWorkbook(path);
			var ws = wb.Worksheet("Harvest Export Values Only");

			// Look for the first row used
			var firstRowUsed = ws.FirstRowUsed();

			// Narrow down the row so that it only includes the used part
			var firstBillRow = firstRowUsed.RowUsed();

			// First possible address of the company table:
			var firstPossibleAddress = firstBillRow.FirstCell().Address;
			// Last possible address of the company table:
			var lastPossibleAddress = ws.LastCellUsed().Address;

			// Get a range with the remainder of the worksheet data (the range used)
			var billsRange = ws.Range(firstPossibleAddress, lastPossibleAddress).RangeUsed();

			// Treat the range as a table (to be able to use the column names)
			var billsTable = billsRange.AsTable();

			// Get the list of company names
			sourceHarvestExport = billsTable.DataRange.Rows()
			.Select(s => new HarvestExport()
			{
				InvoiceId = int.Parse(s.Cell("A").GetString()),
				Client = s.Cell("B").GetString(),
				Project = s.Cell("C").GetString(),
				ItemType = s.Cell("D").GetString(),
				ItemDescription = s.Cell("E").GetString(),
				ItemQuantity = decimal.Parse(s.Cell("F").GetString()),
				ItemUnitPrice = decimal.Parse(s.Cell("G").GetString()),
				ItemAmount = decimal.Parse(s.Cell("H").GetString()),
				ItemDiscount = decimal.Parse(s.Cell("I").GetString()),
				ItemTax = decimal.Parse(s.Cell("J").GetString()),
				ItemTax2 = decimal.Parse(s.Cell("K").GetString()),
				Currency = s.Cell("L").GetString(),
				InvoiceType = s.Cell("M").GetString(),
				QB_Terms = s.Cell("N").GetString(),
				QB_BillDate = s.Cell("O").GetString(),
				QB_BillNo = int.Parse(s.Cell("P").GetString()),
				QB_Description = s.Cell("Q").GetString(),
				ItemType2 = s.Cell("R").GetString(),
				HarvestConsultant = s.Cell("T").GetString(),
				QB_Vendor = s.Cell("U").GetString(),
				QB_Account = s.Cell("S").GetString(),
				PayAmount = decimal.Parse(s.Cell("V").GetString()),
				SalesLead_1 = s.Cell("W").GetString(),
				SL1_QB_Vendor = s.Cell("X").GetString(),
				SL1_QB_Account = s.Cell("Y").GetString(),
				SL1_Percent = decimal.Parse(s.Cell("Z").GetString()),
				SL1_Amount = decimal.Parse(s.Cell("AA").GetString()),
				SalesSupport_1 = s.Cell("AB").GetString(),
				SS1_QB_Vendor = s.Cell("AC").GetString(),
				SS1_QB_Account = s.Cell("AD").GetString(),
				SS1_Percent = decimal.Parse(s.Cell("AE").GetString()),
				SS1_Amount = decimal.Parse(s.Cell("AF").GetString()),
				SalesLead_2 = s.Cell("AG").GetString(),
				SL2_QB_Vendor = s.Cell("AH").GetString(),
				SL2_QB_Account = s.Cell("AI").GetString(),
				SL2_Percent = decimal.Parse(s.Cell("AJ").GetString()),
				SL2_Amount = decimal.Parse(s.Cell("AK").GetString()),
				SalesSupport_2 = s.Cell("AL").GetString(),
				SS2_QB_Vendor = s.Cell("AM").GetString(),
				SS2_QB_Account = s.Cell("AN").GetString(),
				SS2_Percent = decimal.Parse(s.Cell("AO").GetString()),
				SS2_Amount = decimal.Parse(s.Cell("AP").GetString())
			})
			.ToList();


			var dbContext = dbContextFactory.CreateDbContext();
			dbContext.HarvestExports.AddRange(sourceHarvestExport);

			// TRANSFORM AND LOAD

			// Unpivot the table so there is one row per line item

			var primaryServiceLineItems = sourceHarvestExport.Select(h => new
			{
				h.InvoiceId,
				h.Client,
				h.Project,
				h.ItemType,
				h.ItemDescription,
				h.ItemQuantity,
				h.ItemUnitPrice,
				h.ItemAmount,
				h.ItemDiscount,
				h.ItemTax,
				h.ItemTax2,
				h.Currency,
				h.InvoiceType,
				h.HarvestConsultant,
				h.QB_Terms,
				h.QB_BillDate,
				h.QB_BillNo,
				h.QB_Description,
				QB_Service = (h.ItemType2 == "Service" ? "Cost of Consultants" : "Cost of Customer Owner"),
				QB_Vendor = h.QB_Vendor,
				QB_Account = h.QB_Account,
				QB_Amount = h.PayAmount,
			});

			var salesLead1LineItems = sourceHarvestExport.Select(h => new
			{
				h.InvoiceId,
				h.Client,
				h.Project,
				h.ItemType,
				h.ItemDescription,
				h.ItemQuantity,
				h.ItemUnitPrice,
				h.ItemAmount,
				h.ItemDiscount,
				h.ItemTax,
				h.ItemTax2,
				h.Currency,
				h.InvoiceType,
				h.HarvestConsultant,
				h.QB_Terms,
				h.QB_BillDate,
				h.QB_BillNo,
				h.QB_Description,
				QB_Service = "Sales Lead",
				QB_Vendor = h.SL1_QB_Vendor,
				QB_Account = h.SL1_QB_Account,
				QB_Amount = h.SL1_Amount
			});

			var salesSupport1LineItems = sourceHarvestExport.Select(h => new
			{
				h.InvoiceId,
				h.Client,
				h.Project,
				h.ItemType,
				h.ItemDescription,
				h.ItemQuantity,
				h.ItemUnitPrice,
				h.ItemAmount,
				h.ItemDiscount,
				h.ItemTax,
				h.ItemTax2,
				h.Currency,
				h.InvoiceType,
				h.HarvestConsultant,
				h.QB_Terms,
				h.QB_BillDate,
				h.QB_BillNo,
				h.QB_Description,
				QB_Service = "Sales Support",
				QB_Vendor = h.SS1_QB_Vendor,
				QB_Account = h.SS1_QB_Account,
				QB_Amount = h.SS1_Amount
			});

			var salesLead2LineItems = sourceHarvestExport.Select(h => new
			{
				h.InvoiceId,
				h.Client,
				h.Project,
				h.ItemType,
				h.ItemDescription,
				h.ItemQuantity,
				h.ItemUnitPrice,
				h.ItemAmount,
				h.ItemDiscount,
				h.ItemTax,
				h.ItemTax2,
				h.Currency,
				h.InvoiceType,
				h.HarvestConsultant,
				h.QB_Terms,
				h.QB_BillDate,
				h.QB_BillNo,
				h.QB_Description,
				QB_Service = "Sales Lead",
				QB_Vendor = h.SL2_QB_Vendor,
				QB_Account = h.SL2_QB_Account,
				QB_Amount = h.SL2_Amount
			});

			var salesSupport2LineItems = sourceHarvestExport.Select(h => new
			{
				h.InvoiceId,
				h.Client,
				h.Project,
				h.ItemType,
				h.ItemDescription,
				h.ItemQuantity,
				h.ItemUnitPrice,
				h.ItemAmount,
				h.ItemDiscount,
				h.ItemTax,
				h.ItemTax2,
				h.Currency,
				h.InvoiceType,
				h.HarvestConsultant,
				h.QB_Terms,
				h.QB_BillDate,
				h.QB_BillNo,
				h.QB_Description,
				QB_Service = "Sales Support",
				QB_Vendor = h.SS2_QB_Vendor,
				QB_Account = h.SS2_QB_Account,
				QB_Amount = h.SS2_Amount
			});

			// TODO: Ask if I should be filtering out empty line items somehow.
			var unpivot = primaryServiceLineItems
			.Union(salesLead1LineItems)
			.Union(salesSupport1LineItems)
			.Union(salesLead2LineItems)
			.Union(salesSupport2LineItems);

			// Group the records into intuit bills and line items

			var serviceGrouping = unpivot
			.GroupBy(li => new HarvestExport_LineItemGroupingKey
			{
				QB_Vendor = li.QB_Vendor,
				InvoiceId = li.InvoiceId,
				Client = li.Client,
				Project = li.Project,
				ItemDescription = li.ItemDescription,
				QB_Description = li.QB_Description,
				QB_Service = li.QB_Service,
				QB_Account = li.QB_Account,
			}, new HarvestExport_LineItemGroupingKeyComparer())
			.Select(li => new HarvestExport_LineItemGrouping
			{
				Key = li.Key,
				QB_Amount = li.Sum(i => i.QB_Amount)
			});

			harvestExportGrouping = serviceGrouping
			.GroupBy(li => new HarvestExport_GroupingKey
			{
				QB_Vendor = li.Key.QB_Vendor,
				InvoiceId = li.Key.InvoiceId,
				Client = li.Key.Client,
				Project = li.Key.Project,
				ItemDescription = li.Key.ItemDescription,
				QB_Description = li.Key.QB_Description
			}, new HarvestExport_GroupingKeyComparer())
			.Select(grouping => new HarvestExport_Grouping
			{
				Key = grouping.Key,
				LineItems = grouping.Select(grp => grp)
			});

			await dbContext.SaveChangesAsync();
		}

		var mappings = harvestExportGrouping.Select(h => new Intuit.Ipp.Data.Bill
		{
			VendorRef = new Intuit.Ipp.Data.ReferenceType
			{
				Value = qbVendors.FirstOrDefault(v => v.CompanyName == h.Key.Client).Id,
				name = qbVendors.FirstOrDefault(v => v.CompanyName == h.Key.Client).CompanyName
			}
		});

		isLoading = false;

		StateHasChanged();
	}

	protected async void CreateBills()
	{
		var claimsPrincipal = (await _authState).User;
		var userId = claimsPrincipal.UserId();

		var dbContext = dbContextFactory.CreateDbContext();
		var quickbooksConnection = await dbContext.QuickbooksConnections.SingleOrDefaultAsync(u => u.UserId == userId);

		OAuth2RequestValidator requestValidator = new(quickbooksConnection.AccessToken);
		var serviceContext = new ServiceContext(quickbooksConnection.RealmId, IntuitServicesType.QBO, requestValidator);

		serviceContext.IppConfiguration.MinorVersion.Qbo = "23";
		serviceContext.IppConfiguration.BaseUrl.Qbo = "https://sandbox-quickbooks.api.intuit.com/"; //This is sandbox Url. Change to Prod Url if you are using production

		var querySvc = new QueryService<Intuit.Ipp.Data.Bill>(serviceContext);

		isLoading = true;

		destinationBills = querySvc.ExecuteIdsQuery("Select * from Bill startposition 1 maxresults 5");

		isLoading = false;

		StateHasChanged();
	}
	}
