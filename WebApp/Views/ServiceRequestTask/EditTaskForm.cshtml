@using WebApp.FormModels
@using WebApp.Library
@using Features = Orvosi.Shared.Enums.Features
@model TaskViewModel

@{
    var session = DependencyResolver.Current.GetService<SessionService>();
    var features = session.AuthorizedFeatures;
    var identity = session.identity;
    var viewDataService = DependencyResolver.Current.GetService<ViewDataService>();

    var physician = viewDataService.GetPhysician(Model.ServiceRequestId);

    var teamMembers = viewDataService.GetCollaborations(physician.Id);
    teamMembers.Add(physician);

    var args = ViewData.TaskListArgs_Get();
}

<form id="task-editform">
    @Html.Hidden("ServiceRequestTaskId", Model.Id)

    <div class="lead">
        @Html.Partial("_TaskStatusLabel2", Model.StatusId) @Model.Name
    </div>
    <div class="btn-toolbar">
        @if (features.Contains(Features.ServiceRequest.AssignTask))
            {
            <div class="btn-group">
                <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
                    @if (Model.TaskId == Tasks.AssessmentDay)
                {
                        <span class="btn btn-sm btn-circle">
                            <i class="fa fa-calendar fa-lg"></i>
                        </span>
                    }
                    else
                    {
                        @Html.Partial("_Initials2", Model.AssignedTo == null ? new LookupViewModel<Guid>() : Model.AssignedTo)
                        <span style="margin-left:5px;margin-right:5px;">
                            @(Model.AssignedTo != null ? Model.AssignedTo.Name : "Not Assigned")
                        </span>
                    }
                    <span class="caret"></span>
                </button>
                <ul class="dropdown-menu">
                    @if (features.Contains(Features.ServiceRequest.PickupTask))
                {
                        <li>
                            <a tabindex="-1" onclick="pickupTask(@Model.Id)">Pickup</a>
                        </li>
                        <li class="divider"></li>
                    }
                    @foreach (var teamMember in teamMembers.OrderBy(c => c.Name))
                {
                    if (Model.AssignedTo == null || (Model.AssignedTo != null && teamMember.Id != Model.AssignedTo.Id))
                    {
                            <li>
                                <a onclick="assignTask(@Model.Id, '@(teamMember.Id)')">
                                    @Html.Partial("_Initials2", teamMember)
                                    <span style="margin-left:5px;margin-right:5px;">
                                        @teamMember.Name
                                    </span>
                                </a>
                            </li>
                        }
                    }
                </ul>
            </div>
        }
        else
        {
            @Html.Partial("_Initials2", Model.AssignedTo == null ? new LookupViewModel<Guid>() : Model.AssignedTo) @(Model.AssignedTo != null ? Model.AssignedTo.Name : "Not Assigned")
        }
        @if (features.Contains(Features.ServiceRequest.UpdateTaskStatus))
        {
            <div class="btn-group">
                @if (Model.StatusId != TaskStatuses.Done && Model.StatusId != TaskStatuses.Archive)
                {
                    <button type="button" onclick="toggleTaskStatus(@Model.Id , @TaskStatuses.Done)" class="btn btn-default"><i class="fa fa-check"></i></button>
                }
                else
                {
                    <button type="button" onclick="toggleTaskStatus(@Model.Id , @TaskStatuses.ToDo)" class="btn btn-default btn-success"><i class="fa fa-check"></i></button>
                }
                @if (Model.StatusId == TaskStatuses.Done)
                {
                    <button type="button" onclick="toggleTaskStatus(@Model.Id , @TaskStatuses.Archive)" class="btn btn-default ">
                        <i class="fa fa-archive"></i>
                    </button>
                }
                else if (Model.StatusId == TaskStatuses.Archive)
                {
                    <button type="button" onclick="toggleTaskStatus(@Model.Id , @TaskStatuses.Archive)" class="btn btn-default btn-success">
                        <i class="fa fa-archive"></i>
                    </button>
                }
            </div>
            <div class="btn-group">
                @if (Model.StatusId == TaskStatuses.OnHold)
                {
                    <button type="button" onclick="toggleTaskStatus(@Model.Id , @TaskStatuses.OnHold)" class="btn btn-default btn-info"><i class="fa fa-hand-paper-o"></i></button>
                }
                else
                {
                    <button type="button" onclick="toggleTaskStatus(@Model.Id , @TaskStatuses.OnHold)" class="btn btn-default "><i class="fa fa-hand-paper-o"></i></button>
                }
                @if (Model.StatusId == TaskStatuses.Obsolete)
                {
                    <button type="button" onclick="toggleTaskStatus(@Model.Id , @TaskStatuses.Obsolete)" class="btn btn-default btn-info"><i class="fa fa-ban"></i></button>
                }
                else
                {
                    <button type="button" onclick="toggleTaskStatus(@Model.Id , @TaskStatuses.Obsolete)" class="btn btn-default"><i class="fa fa-ban"></i></button>
                }
            </div>
        }
        <div class="btn-group" style="width:150px;">
            <div class="input-group date" style="width:100%" id="EditTaskFormDueDatePicker">
                <input type="text" name="DueDate" value="@Model.DueDate.ToOrvosiDateFormat()" onchange="updateTaskDueDate(event, this.form)" class="form-control" placeholder="Not Set" />
                <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
            </div>
            @Html.ValidationMessageFor(c => c.DueDate, "", new { @class = "text-danger" })
        </div>
        <div class="btn-group">
            <button type="button" onclick="showDeleteTaskRequest(@Model.Id)" class="btn btn-default"><i class="fa fa-trash"></i></button>
        </div>

    </div>
</form>

<script>
    $(function () {
        $('#EditTaskFormDueDatePicker').datepicker({
            format: 'yyyy-mm-dd',
            autoclose: true
        });
    })
</script>