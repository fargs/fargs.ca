@using WebApp.FormModels
@using WebApp.Library
@using Features = Orvosi.Shared.Enums.Features
@model TaskViewModel

@{
    var session = DependencyResolver.Current.GetService<SessionService>();
    var features = session.AuthorizedFeatures;
    var identity = session.identity;
    var viewDataService = DependencyResolver.Current.GetService<ViewDataService>();
    var taskTypes = viewDataService.GetTaskTypesSelectList();
    var physician = viewDataService.GetPhysician(Model.ServiceRequestId);
    var teamMembers = viewDataService.GetCollaborations(physician.Id);
    teamMembers.Add(physician);

    var args = ViewData.TaskListArgs_Get();
}

<style>
     .ui-autocomplete {
         max-height: 100px;
         overflow-y: auto;
         /* prevent horizontal scrollbar */
         overflow-x: hidden;
     }
     /* IE 6 doesn't support max-height
    * we use height instead, but this forces the menu to always be this tall
    */
     * html .ui-autocomplete {
         height: 100px;
     }
</style>
<form id="new-task-form">
    <input type="hidden" name="ServiceRequestId" value="@Model.ServiceRequestId" />
    <div class="form-group ui-widget">
        <input id="tasktype-autocomplete" class="form-control" name="TaskName" placeholder="Task Description" />
    </div>
    <div class="btn-toolbar">
        @if (features.Contains(Features.ServiceRequest.AssignTask))
        {
            <div class="btn-group">
                <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
                    @Html.Partial("_Initials2", Model.AssignedTo == null ? new LookupViewModel<Guid>() : Model.AssignedTo)
                    <span id="assignedto-selectedtext" style="margin-left:5px;margin-right:5px;">
                        @(Model.AssignedTo != null ? Model.AssignedTo.Name : "Not Assigned")
                    </span>
                    <span class="caret"></span>
                </button>
                <ul class="dropdown-menu">
                    @if (features.Contains(Features.ServiceRequest.PickupTask))
                {
                        <li>
                            <a tabindex="-1" onclick="pickupTask(@Model.Id)">Pickup</a>
                        </li>
                        <li class="divider"></li>
                    }
                    @foreach (var teamMember in teamMembers.OrderBy(c => c.Name))
                {
                    if (Model.AssignedTo == null || (Model.AssignedTo != null && teamMember.Id != Model.AssignedTo.Id))
                    {
                            <li>
                                <a onclick="newTaskForm_AssignedToChanged(event, this, '@(teamMember.Id)')">
                                    <span>
                                        @Html.Partial("_Initials2", teamMember)
                                        <span style="margin-left:5px;margin-right:5px;">
                                            @teamMember.Name
                                        </span>
                                    </span>
                                </a>
                            </li>
                        }
                    }
                </ul>
                <input type="hidden" value="" id="assignedto-selectedvalue" name="AssignedTo" />
            </div>
        }
        <div class="btn-group" style="width:150px;">
            <div class="input-group date" style="width:100%" id="due-date-picker">
                <input type="text" name="DueDate" value="@Model.DueDate.ToOrvosiDateFormat()" class="form-control" placeholder="Due Date" />
                <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
            </div>
            @Html.ValidationMessageFor(c => c.DueDate, "", new { @class = "text-danger" })
        </div>

        <div class="btn-group">
            <button class="btn btn-primary" type="button" onclick="newTaskForm_SaveChanges($(this.form))">Add Task</button>
            <button type="button" onclick="newTaskForm_Clear($(this.form))" class="btn btn-link">clear</button>
        </div>
    </div>

</form>

<script>
    $(function () {
        $('#new-task-form #due-date-picker').datepicker({
            format: 'yyyy-mm-dd',
            autoclose: true
        });

        var tasktypes = @Html.Raw(taskTypes.Select(t => t.Text).ToJson())

        $("#new-task-form #tasktype-autocomplete").autocomplete({
            source: tasktypes,
            select: function (event, ui) {
                
            }
        });
    })

    function newTaskForm_AssignedToChanged(event, element, memberId) {
        $('#new-task-form #assignedto-selectedvalue').val(memberId);
        $('#new-task-form #assignedto-selectedtext').html($(element.firstElementChild).clone());
    }

    function newTaskForm_SaveChanges(form) {
        let url = '@Url.Content("~/ServiceRequestTask/CreateAsync")';
        $.post(url,
            form.serialize()
        ).done(function (data) {
            taskChanged(data.serviceRequestTaskId, data.serviceRequestId);
            serviceRequestStatusChanged(data.serviceRequestId);
        });
    }

    function newTaskForm_Clear(form) {
        $('#new-task-form input').val('');
    }
</script>