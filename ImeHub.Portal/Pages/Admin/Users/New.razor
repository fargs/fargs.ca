@page "/admin/users/n"

@using ImeHub.Portal.Data.Companies
@using ImeHub.Portal.Services.DateTimeService
@using Microsoft.EntityFrameworkCore

@implements IDisposable

@inject IDbContextFactory<ApplicationDbContext> dbContextFactory
@inject IToastService toastService
@inject NavigationManager navManager
@inject IDateTime dateTime

@if (Companies != null)
{
<EditForm Model="@InputModel" OnValidSubmit="@HandleValidSubmit" class="p-3">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mt-3">
        <InputText @bind-Value="@InputModel.Name" id="name" class="" placeholder="Given and surname"></InputText>
    </div>
    <div class="mt-3">
        <InputText @bind-Value="@InputModel.Email" id="email" class="" placeholder="Email" aria-describedby="email-help"></InputText>
    </div>
    <div class="mt-3">
        <InputSelect @bind-Value="InputModel.CompanyId">
            <option value=@(0)></option>
            @foreach (var company in Companies)
            {
                <option value="@company.Id">@company.Name</option>
            }
        </InputSelect>
    </div>
    <div class="mt-3">
        @if (InputModel.CompanyId != default)
        {
            CompanyRoles = dbContext.CompanyRoles.Where(cr => cr.Company.Id == InputModel.CompanyId).ToList();

            if (!CompanyRoles.Any(cr => cr.Id == InputModel.CompanyRoleId))
            {
                InputModel.CompanyRoleId = default;
            }

            <InputSelect @bind-Value="InputModel.CompanyRoleId">
                <option value=@(0)></option>
            @foreach (var companyRole in CompanyRoles)
            {
                <option value="@companyRole.Id">@companyRole.Name</option>
            }
        </InputSelect>
        }
            
    </div>
    <button type="submit" class="">Submit</button>
</EditForm>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected CompanyUserInvitation InputModel { get; set; }

    private ApplicationDbContext dbContext {get;set;}
    private bool Loading { get; set; } = true;

    IEnumerable<Company> Companies { get; set; }
    IEnumerable<CompanyRole> CompanyRoles { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;

        //Companies = dbContext.CompanyAccesses
        //    .Where(ca => ca.UserId == user.UserId())
        //    .Select(ca => ca.CompanyRole.Company);
        InputModel = new()
        {
            ObjectGuid = Guid.NewGuid(),
            ExpiryDate = dateTime.Now.AddDays(14),
            InvitedDate = dateTime.Now,
            InvitedBy = user.UserId()
        };

        dbContext = dbContextFactory.CreateDbContext();

        Companies = await dbContext.Companies.OrderBy(c => c.Name).ToListAsync();

        Loading = false;
        await base.OnInitializedAsync();
    }

    protected void HandleValidSubmit()
    {
        dbContext.Add(InputModel);

        var response = dbContext.SaveChanges();

        toastService.ShowSuccess($"{InputModel.Name} was saved successfully.");

        navManager.NavigateTo(Routes.List);
    }

    public void Dispose()
    {
        dbContext.Dispose();
    }
}
