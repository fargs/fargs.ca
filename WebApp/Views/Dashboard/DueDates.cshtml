@using WebApp.Library.Extensions
@using Orvosi.Shared.Enums
@model WebApp.ViewModels.DashboardViewModels.DueDatesViewModel
@{
    Layout = "~/Views/Dashboard/_Layout.cshtml";
}
@foreach (var day in Model.DueDates.OrderBy(d => d.DueDate))
{
    <div class="h3 
         @((day.DueDate.HasValue ? day.DueDate.Value.Date : day.DueDate) == SystemTime.Now().Date ? " bg-success" : string.Empty )
         @((day.DueDate.HasValue ? day.DueDate.Value.Date : day.DueDate) < SystemTime.Now().Date ? " bg-danger" : string.Empty )
         ">
        <a role="button" data-toggle="collapse" data-parent="#dayfolders" href="#dayfolder-@day.DueDateTicks">
            @day.DayFormatted_MMMdd<span class="small"> @day.DayFormatted_dddd</span> <span class="text-muted small">(@day.ServiceRequests.Count() cases)</span>
        </a>
    </div>
    <section id="dayfolder-@day.DueDateTicks" class="panel-collapse collapse">
        @foreach (var serviceRequest in day.ServiceRequests.OrderBy(sr => sr.AppointmentDate).ThenBy(sr => sr.StartTime))
        {
            <div class="row o-dashboard-tr">
                <div class="col-md-2 o-dashboard-td">
                    <a target="_blank" class="small" href="~/ServiceRequest/Details/@serviceRequest.Id"><h4>@serviceRequest.ClaimantName - @serviceRequest.Id</h4></a>
                    <div>@serviceRequest.Company.Name</div>
                </div>
                <div class="col-md-2 o-dashboard-td">
                    <strong style="color: @serviceRequest.Service.ColorCode;">@serviceRequest.Service.Code</strong>
                    @if (serviceRequest.AppointmentDate.HasValue)
                    {
                        <div class="small text-muted">
                            on @serviceRequest.AppointmentDate.ToOrvosiDateFormat() @serviceRequest.StartTime.ToShortTimeSafe()
                        </div>
                    }
                </div>
                <div class="col-md-3">
                    @Html.Partial("_ServiceRequestTasks_Today", serviceRequest)
                    
                </div>
                <div class="col-md-2 o-dashboard-td">
                    <a class="btn btn-default" target="_blank" href="@serviceRequest.BoxCaseFolderURL"><i class="fa fa-folder-open-o fa-lg"></i>&nbsp;Open Case Folder</a>
                </div>

                <div class="col-md-2 o-dashboard-td">
                    @*@foreach (var person in serviceRequest.People.Where(p => p.Id != Model.SelectedUserId))
                    {
                        <span title="@(!string.IsNullOrEmpty(person.DisplayName) ? person.DisplayName : "Unassigned")"
                              class="btn btn-sm btn-circle btn-circle-groupitem disabled"
                              style="color: white; background-color: @(!string.IsNullOrEmpty(person.ColorCode) ? person.ColorCode : "red")">
                            <span class="small">@(!string.IsNullOrEmpty(person.Initials) ? person.Initials : "?")</span>
                        </span>
                    }*@
                </div>
                <div class="col-md-1 o-dashboard-td">
                    <a target="_blank" class="small" href="~/ServiceRequest/Details/@serviceRequest.Id">@serviceRequest.Id</a>
                </div>
            </div>
        }
    </section>
}

@section Scripts {

    <script>

        let serviceProviderId = '@Model.SelectedUserId';
        function updateTaskStatuses(assessmentFromResult, assessmentIdForEl) {
            var taskStatuses = {
                "Waiting": 1,
                "ToDo": 2,
                "Done": 3,
                "Obsolete": 4
            };
            var assessmentEl = $('#asessment-' + assessmentIdForEl);
            var tasksEl = assessmentEl.find("span[id^='task-statuslabel-]'");
            var taskEl = null;
            $.each(assessmentFromResult.ServiceRequestTasks, function (index, task) {
                if (task.AssignedTo.Id == serviceProviderId) {
                    taskEl = $('#task-statuslabel-' + task.Id);
                    taskEl.removeClass();
                    taskCheckboxEl = $('#task-checkbox-' + task.Id);
                    if (task.Status.Id == taskStatuses.Done) {
                        MarkTaskAsDone(taskEl, taskCheckboxEl);
                    }
                    else if (task.Status.Id == taskStatuses.ToDo) {
                        MarkTaskAsToDo(taskEl, taskCheckboxEl);
                    }
                    else if (task.Status.Id == taskStatuses.Waiting) {
                        MarkTaskAsWaiting(taskEl, taskCheckboxEl);
                    }
                    else if (task.Status.Id == taskStatuses.Obsolete) {
                        MarkTaskAsObsolete(taskEl, taskCheckboxEl);
                    }
                }
            });
        }

        function MarkTaskAsDone(label, checkbox) {
            label.addClass("label label-success").text("Done");
            checkbox.prop('disabled', false);
        }

        function MarkTaskAsToDo(label, checkbox) {
            label.addClass("label label-danger").text("To Do");
            checkbox.prop('disabled', false);
        }

        function MarkTaskAsWaiting(label, checkbox) {
            label.addClass("label label-warning").text("Waiting");
            checkbox.prop('disabled', true);
        }

        function MarkTaskAsObsolete(label, checkbox) {
            label.addClass("label label-info").text("Obsolete");
            checkbox.prop('disabled', true);
        }

        function onTaskChecked(checkbox, taskId, assessmentId) {
            var params = {
                taskId: taskId,
                assessmentId: assessmentId,
                checkbox: checkbox
            }

            if (checkbox.checked) {
                console.log(taskId + ' is now checked');
            } else {
                console.log(taskId + ' is now unchecked');
            }

            $.ajax({
                type: "POST",
                url: '@Url.Content("~/Dashboard/UpdateTaskStatus2")',
                data: JSON.stringify({
                    taskId: taskId,
                    isChecked: checkbox.checked,
                    serviceProviderGuid: '@Model.SelectedUserId'
                }),
                contentType: "application/json; charset=utf-8",
                success: function (result) {
                    updateTaskStatuses(result, params.assessmentId);
                    toastr.success("Task updated successfully.", "Task Updated");
                },
                error: function (err) {
                    // undo the UI change made before the ajax call
                    toastr.success("Task was not updated.", "Something went wrong!");
                }
            }, this);
        }

    </script>
}
