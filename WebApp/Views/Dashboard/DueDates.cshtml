@using WebApp.Library.Extensions
@using Orvosi.Shared.Enums
@model WebApp.ViewModels.DashboardViewModels.DueDatesViewModel
@{
    Layout = "~/Views/Dashboard/_Layout.cshtml";
    var roleId = User.Identity.GetRoleId();
    var userId = User.Identity.GetGuidUserId();
}

<form action="~/Dashboard/DueDates" method="get">
    <input type="hidden" name="serviceProviderId" value="@Model.SelectedUserId" />
    <ul class="list-unstyled list-inline">
        @foreach (var item in Model.TaskFilterViewModel.Tasks)
        {
            <li><input type="checkbox" name="selectedTaskTypes" value="@item.Id" @(Model.TaskFilterViewModel.SelectedTaskTypes.Any(taskId => taskId == item.Id) ? "checked" : string.Empty) /> @item.Name</li>
        }
        <li><button type="submit" class="btn btn-small">Apply Filter</button></li>
    </ul>
</form>

<div id="day-folders" class="panel-group">

    <div class="panel">
        <div class="panel-heading">
            <div class="row">
                <div class="col-xs-12 col-sm-10"><strong>Day</strong></div>
                <div class="col-xs-12 col-sm-1 text-center"><strong>To Do</strong></div>
                <div class="col-xs-12 col-sm-1 text-center"><strong>Waiting On</strong></div>
            </div>
        </div>
    </div>
    @foreach (var day in Model.DueDates.OrderBy(d => d.Day))
    {
        <div class="panel 
            @((day.Day.HasValue ? day.Day.Value.Date : day.Day) > SystemTime.Now().Date ? " panel-default" : string.Empty )
            @((day.Day.HasValue ? day.Day.Value.Date : day.Day) == SystemTime.Now().Date ? " panel-success" : string.Empty )
            @((day.Day.HasValue ? day.Day.Value.Date : day.Day) < SystemTime.Now().Date ? " panel-danger" : string.Empty )">
            <div id="header-dayfolder-@day.DayTicks" class="panel-heading" role="tab">
                <a role="button" data-toggle="collapse" data-parent="#day-folders" href="#dayfolder-@day.DayTicks">
                    <div class="panel-title">
                        <div class="row">
                            <div class="col-xs-12 col-sm-10">
                                <span>@day.DayFormatted_MMMdd</span><span class="small"> @day.DayFormatted_dddd.ToUpper()</span>
                            </div>
                            <div class="col-xs-12 col-sm-1 text-center">
                                <span id="todo-total-label" class="small label @(day.ToDoCount(Model.SelectedUserId) > 0 ? "label-danger" : "bg-danger")"><strong id="todo-total">@(day.ToDoCount(Model.SelectedUserId))</strong></span>
                            </div>
                            <div class="col-xs-12 col-sm-1 text-center">
                                <span id="waiting-total-label" class="small label @(day.WaitingCount(Model.SelectedUserId) > 0 ? "label-warning" : "bg-warning")"><strong id="waiting-total">@(day.WaitingCount(Model.SelectedUserId))</strong></span>
                            </div>
                        </div>
                    </div>
                </a>
            </div>
            <section id="dayfolder-@day.DayTicks" class="panel-collapse collapse">
                <div class="panel-body">
                    @foreach (var serviceRequest in day.ServiceRequests.OrderBy(sr => sr.AppointmentDate).ThenBy(sr => sr.StartTime))
                {
                        <div class="row o-dashboard-tr">
                            <div class="col-md-2 o-dashboard-td">
                                <a target="_blank" class="small" href="~/ServiceRequest/Details/@serviceRequest.Id"><h4>@serviceRequest.ClaimantName - @serviceRequest.Id</h4></a>
                                <div>@serviceRequest.Company.Name</div>
                                <strong style="color: @serviceRequest.Service.ColorCode;">@serviceRequest.Service.Code</strong>
                                @if (serviceRequest.AppointmentDate.HasValue)
                                {
                                    <div class="small text-muted">
                                        on @serviceRequest.AppointmentDate.ToOrvosiDateFormat() @serviceRequest.StartTime.ToShortTimeSafe()
                                    </div>
                                }
                                <p>
                                    <a class="btn btn-default" target="_blank" href="@serviceRequest.BoxCaseFolderURL"><i class="fa fa-folder-open-o fa-lg"></i>&nbsp;Open Case Folder</a>
                                </p>
                            </div>
                            <div class="col-md-2 o-dashboard-td">
                                @if (roleId == AspNetRoles.CaseCoordinator || roleId == AspNetRoles.SuperAdmin || roleId == AspNetRoles.Physician)
                                {
                                    @Html.Partial("~/Views/Note/_Note.cshtml", new WebApp.ViewModels.ServiceRequestViewModels.NoteViewModel() { ServiceRequestId = serviceRequest.Id, Note = serviceRequest.Notes })
                                }
                            </div>
                            <div class="col-md-4">
                                @Html.Partial("_ServiceRequestTasks_Today", serviceRequest)

                            </div>
                            <div class="col-md-4 o-dashboard-td">
                                @Html.Partial("~/Views/ServiceRequestMessage/_Discussion.cshtml", serviceRequest)
                                @Html.Partial("~/Views/ServiceRequestMessage/_PostMessage.cshtml", serviceRequest)
                            </div>
                        </div>
                    }
                </div>
            </section>
            </div>
            }
        </div>

@Html.Partial("~/Views/Note/_NoteModalForm.cshtml")

@section Scripts {

    <script>

        let serviceProviderId = '@Model.SelectedUserId';

        function refreshServiceRequestTasks(serviceRequestId) {

            $.ajax({
                type: "GET",
                url: '@Url.Content("~/Dashboard/DueDates?serviceRequestId=")' + serviceRequestId + '&serviceProviderId=@Model.SelectedUserId',
                contentType: "text/html",
                success: function (result) {
                    $('#service-request-tasks-' + serviceRequestId).replaceWith(result);
                },
                error: function (err) {
                    // undo the UI change made before the ajax call
                    window.location.reload();
                }
            }, this);

        }

        function onTaskChecked(checkbox, taskId, serviceRequestId) {
            $.ajax({
                type: "POST",
                url: '@Url.Content("~/Dashboard/UpdateTaskStatus")',
                data: JSON.stringify({
                    taskId: taskId,
                    isChecked: checkbox.checked,
                    serviceProviderGuid: '@Model.SelectedUserId'
                }),
                contentType: "application/json; charset=utf-8",
                success: function (result) {
                    toastr.success("Task updated successfully.", "Task Updated");
                    refreshServiceRequestTasks(serviceRequestId);
                },
                error: function (err) {
                    // undo the UI change made before the ajax call
                    toastr.success("Task was not updated.", "Something went wrong!");
                }
            }, this);
        }


        function onEditNote(serviceRequestId) {

            $.ajax({
                type: "GET",
                url: '@Url.Content("~/Note/EditNote?serviceRequestId=")' + serviceRequestId,
                contentType: "application/json; charset=utf-8",
                success: function (result) {

                    var modalDiv = $("#edit-note-modal");
                    modalDiv.find('#ServiceRequestId').val(result.ServiceRequestId); // hidden field
                    modalDiv.find('#Notes').val(result.Notes);
                    modalDiv.find('#ClaimantName').html(result.ClaimantName);

                    modalDiv.modal('toggle');
                },
                error: function (err) {
                    alert(err.status + " - " + err.statusText);
                }
            }, this);
        }

        $("#edit-note-form").submit(function (e) {

            var url = '@Url.Content("~/Note/UpdateNote")';

            var form = $("#edit-note-form");
            var serviceRequestId = form.find('#ServiceRequestId').val();

            $.ajax({
                type: "POST",
                url: url,
                data: form.serialize(), // serializes the form's elements.
                success: function () {
                    $("#edit-note-modal").modal('toggle');
                    toastr.success("The note was updated successfully.");
                    refreshNote(serviceRequestId);
                }
            });
            e.preventDefault();
        });

        function refreshNote(serviceRequestId) {

            $.ajax({
                type: "GET",
                url: '@Url.Content("~/Dashboard/RefreshNote?serviceRequestId=")' + serviceRequestId,
                contentType: "text/html",
                success: function (result) {
                    $('#notes-' + serviceRequestId).replaceWith(result);
                },
                error: function (err) {
                    // undo the UI change made before the ajax call
                    window.location.reload();
                }
            }, this);

        }

    </script>

    @Html.Partial("~/Views/ServiceRequestMessage/_ServiceRequestMessageJS.cshtml", Model.ServiceRequestMessageJSViewModel)
}
