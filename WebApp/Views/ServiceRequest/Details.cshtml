@using WebApp.Library.Extensions
@using WebApp.Library
@using Orvosi.Shared.Enums
@using Box.V2.Models
@model WebApp.ViewModels.ServiceRequestViewModels.DetailsViewModel

@{
    var identity = User.Identity.GetClaimsIdentity();
    var role = identity.GetRoleId();
}
@if (role == AspNetRoles.SuperAdmin || role == AspNetRoles.CaseCoordinator)
{
    <p>
        <ul class="list-unstyled">
            <li>
                <div class="btn-group">
                    <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        Actions <span class="caret"></span>
                    </button>
                    @if (role == AspNetRoles.CaseCoordinator || role == AspNetRoles.SuperAdmin)
                    {
                        <ul class="dropdown-menu">
                            <li><a href="~/ServiceRequest/Edit/@Model.ServiceRequest.Id">Edit</a></li>
                            <li><a href="~/ServiceRequest/ResourceAssignment/@Model.ServiceRequest.Id">Resource Assignment</a></li>
                            <li><a href="~/ServiceRequest/ChangeCompany/@Model.ServiceRequest.Id">Change Company</a></li>
                            @if (Model.ServiceRequest.CanBeRescheduled(SystemTime.Now()))
                            {
                                <li><a href="~/ServiceRequest/Reschedule/@Model.ServiceRequest.Id">Reschedule</a></li>
                            }

                            @if (Model.ServiceRequest.CanBeUncancelled())
                            {
                                <li role="separator" class="divider"></li>
                                <li>@Html.ActionLink("Undo Cancellation", "UndoCancel", new { serviceRequestId = Model.ServiceRequest.Id })</li>
                            }
                            else if (Model.ServiceRequest.CanBeCancelled())
                            {
                                <li>@Html.ActionLink("Cancel", "Cancel", new { serviceRequestId = Model.ServiceRequest.Id })</li>
                            }
                        </ul>
                    }
                </div>
            </li>
        </ul>
    </p>
}


<div class="row">
    <div class="col-sm-3">
        <h4><span class="btn btn-circle" style="color: white; background-color: @Model.ServiceRequest.Physician.AspNetUser.ColorCode">@Model.ServiceRequest.Physician.AspNetUser.GetInitials() </span> @Model.ServiceRequest.Physician.AspNetUser.GetDisplayName()</h4>
        <hr />
        <h3>@Model.ServiceRequest.ClaimantName</h3>
        <p class="small text-muted">@Model.ServiceRequest.Service.Name, @Model.ServiceRequest.Company.Name</p>
        @if (Model.ServiceRequest.IsClosed)
        {
            <span class="label label-danger">
                Closed
            </span>
        }
        @if (Model.ServiceRequest.Service.HasAppointment)
        {
            <div class="form-group">
                <label class="control-label">Assessment</label>
                <p class="form-control-static">
                    @Model.ServiceRequest.AppointmentDate.Value.ToString("ddd MMM dd yyyy")
                    <br />
                    <strong><small class="text-muted">@Model.ServiceRequest.Address.Name</small></strong><br />
                    <small><mark>@Model.ServiceRequest.Address.City</mark>, @Model.ServiceRequest.Address.Province.ProvinceCode</small>

                </p>
            </div>
        }
        @if (Model.ServiceRequest.Service.HasReportDeliverable())
        {
            <div class="form-group">
                <label class="control-label">Report</label>
                @if (Model.ServiceRequest.DueDate.HasValue)
                {
                    <p class="form-control-static">@Model.ServiceRequest.DueDate.Value.ToString("ddd MMM dd yyyy")</p>
                }
                else
                {
                    <p class="form-control-static">Not Set</p>
                }
            </div>
        }

        <div class="form-group">
            <label class="control-label">Assignments</label>
            <p class="form-control-static">
                @Html.Partial("_ResourceAssignments", Model.ServiceRequest)
            </p>
        </div>

        <div class="row">
            <div class="col-md-12">
                @if (Model.ServiceRequest.CanNoShowBeUndone())
                {
                    <form action="~/ServiceRequest/UndoNoShow" method="post">
                        @Html.AntiForgeryToken()
                        @Html.Hidden("ServiceRequestId", Model.ServiceRequest.Id)
                        <span class="alert alert-danger"><i class="glyphicon gyphicon-info-sign"></i> This case was a <strong>No Show</strong></span>
                        <span><button class="btn btn-link">Undo</button></span>
                    </form>
                }
                else if (Model.ServiceRequest.CanBeNoShow())
                {
                    <form action="~/ServiceRequest/NoShow" method="post">
                        @Html.AntiForgeryToken()
                        @Html.Hidden("ServiceRequestId", Model.ServiceRequest.Id)
                        <button class="btn btn-default">No Show</button>
                        <div class="help-block">Click to flag this case as a "No Show"</div>
                    </form>
                }
            </div>
        </div>
    </div>
    <div class="col-sm-5">
        <p>
            <h4 style="line-height:30px;">@Html.Partial("_ServiceStatusLabel", Model.ServiceRequest.ServiceStatusId) Case @Model.ServiceRequest.Id</h4>
        </p>
        <hr />
        @if (role == AspNetRoles.CaseCoordinator || role == AspNetRoles.SuperAdmin || role == AspNetRoles.Physician)
        {
            <div id="notes">
                @Html.Partial("_Note", new WebApp.ViewModels.ServiceRequestViewModels.NoteViewModel() { ServiceRequestId = Model.ServiceRequest.Id, Note = Model.ServiceRequest.Notes })
            </div>
        }
        <p>
        </p>
        <div class="panel panel-success">
            <div class="panel-heading">
                <strong>Tasks</strong>
                @if (role == AspNetRoles.CaseCoordinator || role == AspNetRoles.SuperAdmin)
                {
                    <div class="pull-right">
                        @Html.Partial("_TaskListActionMenu", Model.ServiceRequest.Id)
                    </div>
                }
            </div>
            <div class="panel-body">
                <table class="table table-condensed">
                    @foreach (var task in Model.TaskList.OrderBy(sr => sr.Sequence))
                    {
                        <tr>
                            @if (role == AspNetRoles.SuperAdmin)
                            {
                                <td>
                                    <form action="~/ServiceRequestTask/Delete" method="post" class="pull-left">
                                        @Html.AntiForgeryToken()
                                        @Html.Hidden("serviceRequestTaskId", task.Id)
                                        <button type="submit" class="btn btn-sm btn-link"><i class="fa fa-remove"></i></button>
                                    </form>
                                </td>
                            }
                            <td width="50px">
                                @if (task.TaskType == "EVENT")
                                {
                                    <span class="btn btn-sm btn-circle">
                                        <i class="fa fa-calendar fa-lg"></i>
                                    </span>
                                }
                                else
                                {
                                    <span data-toggle="modal" title="@(task.AssignedTo.HasValue ? task.AssignedToDisplayName : "Unassigned")"
                                          class="btn btn-sm btn-circle disabled pull-left"
                                          style="cursor: pointer; color: white; background-color: @(task.AssignedTo.HasValue ? task.AssignedToColorCode : "red")"
                                          data-target="#task-modal-@task.Id" data-trigger="focus" data-container="body" tabindex="-1">
                                        <span class="small">@(task.AssignedTo.HasValue ? task.AssignedToInitials : "?")</span>
                                    </span>
                                        <div id="task-modal-@task.Id" class="modal fade">
                                            <div class="modal-dialog modal-sm">
                                                <div class="modal-content">
                                                    <div class="modal-header">
                                                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                                        <h4 class="modal-title" id="myModalLabel">Task Actions</h4>
                                                    </div>
                                                    <div class="modal-body">
                                                        <form action="~/ServiceRequestTask/PickUp" method="post">
                                                            @Html.AntiForgeryToken()
                                                            @Html.Hidden("serviceRequestTaskId", task.Id)
                                                            <input type="submit" value="Pick Up" class="btn btn-default" />
                                                        </form>
                                                        @if (role == AspNetRoles.SuperAdmin || role == AspNetRoles.CaseCoordinator)
                                                        {
                                                            <div>Or</div>
                                                            <form action="~/ServiceRequestTask/AssignTo" method="post">
                                                                @Html.AntiForgeryToken()
                                                                @Html.Hidden("serviceRequestTaskId", task.Id)
                                                                <div class="form-group">
                                                                    <label class="control-label">Assign To: </label>
                                                                    @Html.DropDownList("AssignedTo", new SelectList(Model.UserSelectList, "Value", "Text"), string.Empty, new { @class = "form-control", placeholder = "Assign To", onchange = "this.form.submit();" })
                                                                    @Html.ValidationMessage("AssignedTo", "", new { @class = "text-danger" })
                                                                </div>
                                                            </form>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                }
                            </td>
                            <td width="20px">
                                @if ((role == AspNetRoles.SuperAdmin || role == AspNetRoles.CaseCoordinator || role == AspNetRoles.Physician || User.Identity.GetGuidUserId() == task.AssignedTo) && task.TaskType != "EVENT")
                                {
                                    <form action="~/ServiceRequestTask/ToggleCompleted" method="post" class="pull-left">
                                        @Html.AntiForgeryToken()
                                        @Html.Hidden("serviceRequestTaskId", task.Id)
                                        <span class="checkbox" style="margin-top:0px; margin-bottom:0px;">
                                            <label>
                                                <input id="task-checkbox-@task.Id" type="checkbox"
                                                       name="IsComplete"
                                                       value="@task.IsComplete"
                                                       @(task.IsComplete ? "checked" : "")
                                                       @(task.StatusId == TaskStatuses.Waiting || task.StatusId == TaskStatuses.Obsolete ? "disabled" : "")
                                                       onclick="this.form.submit();">
                                            </label>
                                        </span>
                                    </form>
                                }
                            </td>
                            <td width="100px">
                                @Html.Partial("_TaskStatusLabel", task)
                            </td>
                            <td>@task.Name</td>
                            <td>
                                @if (task.StatusId == TaskStatuses.Done)
                                {
                                    if (task.CompletedDate.HasValue)
                                    {
                                        <div class="small text-muted">@task.CompletedDate.Value.ToString("ddd, MMM dd") at @task.CompletedDate.Value.ToShortTimeString()</div>
                                    }
                                }
                            </td>
                        </tr>
                    }
                </table>
            </div>
        </div>
    </div>
    <div class="col-sm-4">

        <h4 style="line-height:30px;">Case Files and Reports</h4>
        <hr />
        @if (Model.ServiceRequest.BoxCaseFolderId == null)
            {
            <div>The case folder has not been created yet.<br />Your case coordinator will take care of this once the files are received.</div>
        }
        else
        {
            <p><a class="btn btn-default" target="_blank" href="@Model.ServiceRequestMapped.BoxCaseFolderURL"><i class="fa fa-folder-open-o fa-lg"></i>&nbsp;Open Case Folder</a></p>
                <div class="help-block">This folder contains the supporting case files provided by the company and the report.</div>
        }
        @if (role == AspNetRoles.CaseCoordinator || role == AspNetRoles.SuperAdmin)
        {
            if (Model.ServiceRequest.BoxCaseFolderId != null)
            {
                <a href="~/ServiceRequest/BoxManager?serviceRequestId=@Model.ServiceRequest.Id" class="btn btn-primary">Box Share and Sync Manager</a>
            }
            else
            {
                <div>
                    <form action="~/ServiceRequest/CreateBoxCaseFolder?ServiceRequestId=@Model.ServiceRequest.Id" method="post">
                        <button type="submit" class="btn btn-primary">Create Case Folder</button>
                    </form>
                </div>
            }
            if (Model.ServiceRequest.Service.HasAppointment)
            {
                <h4 style="line-height:30px;" class="section-top-padding">Calendar Integration</h4>
                    <hr />
                    <h4>@Model.ServiceRequest.GetCalendarEventTitle()</h4>
                    <div>@Model.ServiceRequest.AppointmentDate.Value.GetDateTimeFormats('D')[0]</div>
                    <div>@Model.ServiceRequest.StartTime</div>
                    <div>@Model.ServiceRequest.EndTime</div>
                    <address>
                        <strong>@Model.ServiceRequest.Address.Name</strong><br>
                        @Model.ServiceRequest.Address.Address1<br>
                        @Model.ServiceRequest.Address.City_CityId.Name, @Model.ServiceRequest.Address.Province.ProvinceName @Model.ServiceRequest.Address.PostalCode<br>
                    </address>

            }
        }
        @if (role == AspNetRoles.SuperAdmin || role == AspNetRoles.Physician)
            {
            <h4 style="line-height:30px;" class="section-top-padding">Invoice</h4>
                <hr />
            if (role == AspNetRoles.SuperAdmin)
            {
                <form action="~/Invoice/Create" method="post">
                    @Html.Hidden("Id", Model.ServiceRequest.Id)
                    <input type="submit" class="btn btn-link btn-sm" name="Create" value="Add Invoice" />
                </form>
            }
            else if (Model.ServiceRequest.InvoiceDetails.Count == 0)
            {
                <div>Invoice has not been generated.<br />Your case coordinator will take care of this.</div>
            }

            foreach (var invoiceDetail in Model.ServiceRequest.InvoiceDetails.Where(id => id.IsDeleted == false))
            {
                <div class="panel panel-default">
                    <div class="panel-heading">
                        Invoice @invoiceDetail.Invoice.InvoiceNumber
                        @if (role == AspNetRoles.SuperAdmin)
                        {
                            <div class="pull-right">
                                @Html.Partial("_InvoiceActionMenu", invoiceDetail.Invoice)
                            </div>
                        }
                    </div>
                    <div class="panel-body">
                        @Html.Action("ReadOnly", "Invoice", invoiceDetail.Invoice)
                    </div>
                </div>
            }
        }
    </div>
</div>

@Html.Partial("~/Views/Note/_NoteModalForm.cshtml")

@section Scripts {
    <script type="text/javascript">

        function onTaskChecked(checkbox, taskId) {
            var params = {
                taskId: taskId,
                checkbox: checkbox
            }

            if (checkbox.checked) {
                console.log(taskId + ' is now checked');
            } else {
                console.log(taskId + ' is now unchecked');
            }

            $.ajax({
                type: "POST",
                url: '@Url.Content("~/Dashboard/UpdateTaskStatus")',
                data: JSON.stringify({
                    taskId: taskId,
                    isChecked: checkbox.checked
                }),
                contentType: "application/json; charset=utf-8",
                success: function (result) {

                    //// get the updated assessment data
                    //SetAssessmentTotals(assessment[0], params.assessmentId);
                    //updateTaskStatuses(assessment[0], params.assessmentId);

                    console.log('success: ' + result);
                },
                error: function (err) {
                    alert(err.status + " - " + err.statusText);
                }
            }, this);
        }

        function onEdit(serviceRequestId) {

            $.ajax({
                type: "GET",
                url: '@Url.Content("~/Note/EditNote?serviceRequestId=")' + serviceRequestId,
                contentType: "application/json; charset=utf-8",
                success: function (result) {

                    var modalDiv = $("#edit-note-modal");
                    modalDiv.find('#ServiceRequestId').val(result.ServiceRequestId); // hidden field
                    modalDiv.find('#Notes').html(result.Notes);
                    modalDiv.find('#ClaimantName').html(result.ClaimantName);

                    modalDiv.modal('toggle');
                },
                error: function (err) {
                    alert(err.status + " - " + err.statusText);
                }
            }, this);
        }

        $("#edit-note-form").submit(function (e) {

            var url = '@Url.Content("~/Note/UpdateNote")';

            var form = $("#edit-note-form");
            var serviceRequestId = form.find('#ServiceRequestId').val();

            $.ajax({
                type: "POST",
                url: url,
                data: form.serialize(), // serializes the form's elements.
                success: function () {
                    $("#edit-note-modal").modal('toggle');
                    toastr.success("The note was updated successfully.");
                    refreshNote(serviceRequestId);
                }
            });
            e.preventDefault();
        });

        function refreshNote(serviceRequestId) {

            $.ajax({
                type: "GET",
                url: '@Url.Content("~/ServiceRequest/RefreshNote?serviceRequestId=")' + serviceRequestId,
                contentType: "text/html",
                success: function (result) {
                    $('#notes').replaceWith(result);
                },
                error: function (err) {
                    // undo the UI change made before the ajax call
                    window.location.reload();
                }
            }, this);

        }

    </script>
}
