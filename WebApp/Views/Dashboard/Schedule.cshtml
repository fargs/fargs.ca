@using WebApp.Library.Extensions
@using Orvosi.Shared.Enums
@model WebApp.ViewModels.DashboardViewModels.ScheduleViewModel
@{
    Layout = "~/Views/Dashboard/_Layout.cshtml";

    var roleId = User.Identity.GetRoleId();
    var roles = new Guid[3] { AspNetRoles.AppTester, AspNetRoles.SuperAdmin, AspNetRoles.CaseCoordinator };
}

<form action="~/Dashboard/Schedule" method="get">
    <input type="hidden" name="serviceProviderId" value="@Model.SelectedUserId" />
    <ul class="list-unstyled list-inline">
        @foreach (var item in Model.TaskFilterViewModel.Tasks)
        {
            <li><input type="checkbox" name="selectedTaskTypes" value="@item.Id" @(Model.TaskFilterViewModel.SelectedTaskTypes.Any(taskId => taskId == item.Id) ? "checked" : string.Empty) /> @item.Name</li>
        }
        <li><button type="submit" class="btn btn-small">Apply Filter</button></li>
    </ul>
</form>

<div id="week-folders" class="panel-group">

    <div class="panel">
        <div class="panel-heading">
            <div class="row">
                <div class="col-xs-12 col-sm-10"><strong>Week</strong></div>
                <div class="col-xs-12 col-sm-1 text-center"><strong>To Do</strong></div>
                <div class="col-xs-12 col-sm-1 text-center"><strong>Waiting On</strong></div>
            </div>
        </div>
    </div>
    @foreach (var weekFolder in Model.WeekFolders)//.ThisWeekCards)
    {
        <div class="panel @(SystemTime.Now() >= weekFolder.StartDate && SystemTime.Now() < weekFolder.EndDate ? "panel-success" : "panel-default")">
            <div id="header-weekfolder-@weekFolder.StartDateTicks" class="panel-heading" role="tab">
                <a role="button" data-toggle="collapse" data-parent="#week-folders" href="#weekfolder-@weekFolder.StartDateTicks">
                    <div class="panel-title">
                        <div class="row">
                            <div class="col-xs-12 col-sm-10">
                                <span>@weekFolder.WeekFolderName</span>
                            </div>
                            <div class="col-xs-12 col-sm-1 text-center">
                                <span id="todo-total-label" class="small label @(weekFolder.ToDoCount(Model.SelectedUserId) > 0 ? "label-danger" : "bg-danger")"><strong id="todo-total">@weekFolder.ToDoCount(Model.SelectedUserId)</strong></span>
                            </div>
                            <div class="col-xs-12 col-sm-1 text-center">
                                <span id="waiting-total-label" class="small label @(weekFolder.WaitingCount(Model.SelectedUserId) > 0 ? "label-warning" : "bg-warning")"><strong id="waiting-total">@weekFolder.WaitingCount(Model.SelectedUserId)</strong></span>
                            </div>
                        </div>
                    </div>
                </a>
            </div>
            <div id="weekfolder-@weekFolder.StartDateTicks" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="panel-body">
                    <div class="row">
                        @foreach (var dayFolder in weekFolder.DayFolders)
                        {
                            <div class="col-sm-3" id="dayfolder-@dayFolder.DayTicks">
                                <strong>
                                    @dayFolder.DayFormatted_dddd<span class="small"> @dayFolder.DayFormatted_MMMdd</span>
                                </strong>
                                <div>
                                    @dayFolder.Address.Name
                                </div>
                                <div class="small text-muted" style="padding-bottom:20px;">
                                    @dayFolder.City
                                </div>
                                <table class="table table-condensed">
                                    @foreach (var assessment in dayFolder.ServiceRequests)
                                    {
                                        <tr id="header-assessment-@assessment.Id">
                                            <td style="vertical-align: text-top; width:40px;">
                                                <strong style="color: @assessment.Service.ColorCode;">@assessment.Service.Code</strong>
                                            </td>
                                            <td style="vertical-align: text-top; width:30px;">
                                                @if (assessment.ServiceRequestStatusId(Model.SelectedUserId) == TaskStatuses.Obsolete)
                                                {
                                                    <span id="assessment-total-label" class="fa fa-frown-o" style="color: dodgerblue;" title="@(assessment.IsNoShow ? "No Show" : "Late Cancellation")">&nbsp;</span>
                                                }
                                                else if (assessment.ServiceRequestStatusId(Model.SelectedUserId) == TaskStatuses.ToDo)
                                                {
                                                    <span id="assessment-total-label" style="color: red;" class="small @(assessment.HasHighWorkload ? "fa fa-pencil" : "label label-danger")">&nbsp;</span>
                                                }
                                                else if (assessment.ServiceRequestStatusId(Model.SelectedUserId) == TaskStatuses.Waiting)
                                                {
                                                    <span id="assessment-total-label" style="cursor: pointer;" class="small label label-warning" onclick="onShowTaskHierarchy(@assessment.Id)">&nbsp;</span>
                                                }
                                                else
                                                {
                                                    <span id="assessment-total-label" class="fa fa-check" style="color: green;">&nbsp;</span>
                                                }
                                            </td>
                                            <td style="vertical-align: text-top; width:80px;">
                                                @assessment.StartTime.ToShortTimeSafe()
                                            </td>
                                            <td style="vertical-align: text-top; max-width: 50px;" class="wordwrap-off">
                                                <a data-toggle="collapse" href="#assessment-@assessment.Id" title="@assessment.ClaimantName">
                                                    @assessment.ClaimantName
                                                </a>
                                            </td>
                                            <td style="vertical-align: text-top; width:80px;" class="text-center">
                                                    @foreach (var person in assessment.People.Where(p => p.Id != Model.SelectedUserId))
                                                    {
                                                        <span title="@(!string.IsNullOrEmpty(person.DisplayName) ? person.DisplayName : "Unassigned")"
                                                              class=""
                                                              style="color: @(!string.IsNullOrEmpty(person.ColorCode) ? person.ColorCode : "red")">
                                                            <span class="small">@(!string.IsNullOrEmpty(person.Initials) ? person.Initials : "?")</span>
                                                        </span>
                                                    }
                                            </td>
                                        </tr>
                                        <tr id="assessment-@assessment.Id" class="collapse">
                                            <td></td>
                                            <td colspan="4">
                                                <div style="padding-top: 5px;">
                                                    <div><strong>@assessment.ClaimantName</strong></div>
                                                    @if (assessment.ServiceStatusId.HasValue)
                                                    {
                                                        @Html.Partial("_ServiceStatusLabel", assessment.ServiceStatusId.Value)
                                                    }
                                                    <div>
                                                        @Html.Partial("_ServiceRequestTasks_Today", assessment)
                                                    </div>
                                                </div>
                                                <div style="padding-top: 5px;">

                                                    <p><a class="btn btn-default" target="_blank" href="@assessment.BoxCaseFolderURL"><i class="fa fa-folder-open-o fa-lg"></i>&nbsp;Open Case Folder</a></p>
                                                    <div>
                                                        <div class="pull-left">
                                                            @if (!assessment.IsLateCancellation && !assessment.IsCancelled)
                                                            {
                                                                <form action="~/Dashboard/ToggleNoShow">
                                                                    <div class="checkbox">
                                                                        <label>
                                                                            <input id="task-checkbox-@assessment.Id" type="checkbox"
                                                                                   value="@assessment.IsNoShow"
                                                                                   @(assessment.IsNoShow ? "checked" : "")
                                                                                   onclick="onToggleNoShow(this, @assessment.Id, @dayFolder.DayTicks, @weekFolder.StartDateTicks);">
                                                                            No Show
                                                                        </label>
                                                                    </div>
                                                                </form>
                                                            }
                                                        </div>
                                                        <span class="pull-right" style="line-height:40px"><a target="_blank" class="small" href="~/ServiceRequest/Details/@assessment.Id">@assessment.Id</a></span>
                                                    </div>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </table>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts{
    <script>

        function onTaskChecked(checkbox, taskId, serviceRequestId) {
            $.ajax({
                type: "POST",
                url: '@Url.Content("~/Dashboard/UpdateTaskStatus")',
                data: JSON.stringify({
                    taskId: taskId,
                    isChecked: checkbox.checked,
                    serviceProviderGuid: '@Model.SelectedUserId'
                }),
                contentType: "application/json; charset=utf-8",
                success: function (result) {
                    toastr.success("Task updated successfully.", "Task Updated");
                    refreshServiceRequestTasks(serviceRequestId);
                },
                error: function (err) {
                    // undo the UI change made before the ajax call
                    toastr.success("Task was not updated.", "Something went wrong!");
                }
            }, this);
        }

        function refreshServiceRequestTasks(serviceRequestId) {

            $.ajax({
                type: "GET",
                url: '@Url.Content("~/Dashboard/Schedule?serviceRequestId=")' + serviceRequestId + '&serviceProviderId=@Model.SelectedUserId',
                contentType: "text/html",
                success: function (result) {
                    $('#service-request-tasks-' + serviceRequestId).replaceWith(result);
                },
                error: function (err) {
                    // undo the UI change made before the ajax call
                    window.location.reload();
                }
            }, this);

        }

        function onToggleNoShow(checkbox, serviceRequestId) {

            $.ajax({
                type: "POST",
                url: '@Url.Content("~/Dashboard/ToggleNoShow")',
                data: JSON.stringify({
                    serviceRequestId: serviceRequestId,
                    isChecked: checkbox.checked,
                    serviceProviderGuid: '@Model.SelectedUserId'
                }),
                contentType: "application/json; charset=utf-8",
                success: function (result) {
                    toastr.success("Request updated successfully.", "Request Updated");
                    refreshServiceRequestTasks(serviceRequestId);
                    refreshServiceStatus(serviceRequestId);
                },
                error: function (err) {
                    alert(err.status + " - " + err.statusText);
                }
            }, this);
        }

        function refreshServiceStatus(serviceRequestId) {

            $.ajax({
                type: "GET",
                url: '@Url.Content("~/Dashboard/RefreshServiceStatus?serviceRequestId=")' + serviceRequestId,
                contentType: "text/html",
                success: function (result) {
                    $('#service-status-' + serviceRequestId).replaceWith(result);
                },
                error: function (err) {
                    // undo the UI change made before the ajax call
                    window.location.reload();
                }
            }, this);

        }

        function UpdateView(result, params) {
            // get the updated assessment data
            if (!params.isAddOn) {
                var weekFolder = $.grep(result.WeekFolders, function (item) { return item.StartDateTicks == params.week; });
                SetWeekTotals(weekFolder[0], params.week);
                var dayFolder = $.grep(weekFolder[0].DayFolders, function (item) { return item.DayTicks == params.day; });
                var assessment = $.grep(dayFolder[0].Assessments, function (item) { return item.Id == params.assessmentId; });
                SetAssessmentStatus(assessment[0], params.assessmentId);
                console.log('Is not addon: ' + result);
            }
            else {
                var assessment = $.grep(result.AddOns, function (item) { return item.Id == params.assessmentId; });
                SetAssessmentStatus(assessment[0], params.assessmentId);
                console.log('Is addon: ' + result);
            }
            //SetAssessmentTotals(assessment[0], params.assessmentId);
            updateTaskStatuses(assessment[0], params.assessmentId);

            console.log('view updated successfully: ' + result);
        }

        function SetWeekTotals(weekFolderFromResult, weekIdForEl) {
            var weekFolderEl = $('#header-weekfolder-' + weekIdForEl);

            var assessmentTotalEl = weekFolderEl.find('#assessment-total');
            var waitingTotalEl = weekFolderEl.find('#waiting-total-label');
            var todoTotalEl = weekFolderEl.find('#todo-total-label');

            todoTotalEl.removeClass();
            todoTotalEl.addClass(weekFolderFromResult.AssessmentToDoCount > 0 ? "small label label-danger" : "small label bg-danger");
            waitingTotalEl.removeClass();
            waitingTotalEl.addClass(weekFolderFromResult.AssessmentWaitingCount > 0 ? "small label label-warning" : "small label bg-warning");

            assessmentTotalEl.text(weekFolderFromResult.AssessmentCount);
            waitingTotalEl.text(weekFolderFromResult.AssessmentWaitingCount);
            todoTotalEl.text(weekFolderFromResult.AssessmentToDoCount);
        }

        function SetAssessmentStatus(assessmentFromResult, assessmentIdForEl) {
            var assessmentEl = $('#header-assessment-' + assessmentIdForEl);
            var assessmentStatusEl = assessmentEl.find('#assessment-total-label');
            assessmentStatusEl.removeClass();
            assessmentStatusEl.css('color', '');

            if (assessmentFromResult.ServiceRequestStatusId == 1) // Waiting
                assessmentStatusEl.addClass('small label label-warning');
            else if (assessmentFromResult.ServiceRequestStatusId == 2) { // Todo
                if (assessmentFromResult.HasHighWorkload) {
                    assessmentStatusEl.addClass('fa fa-pencil');
                    assessmentStatusEl.css('color', 'red')
                }
                else
                    assessmentStatusEl.addClass('small label label-danger');
            }
            else if (assessmentFromResult.ServiceRequestStatusId == 3) {// Done
                assessmentStatusEl.addClass('fa fa-check');
                assessmentStatusEl.css('color', 'green')
            }
            else if (assessmentFromResult.ServiceRequestStatusId == 4) // Obsolete
                assessmentStatusEl.addClass('fa fa-frown-o');

        }

        function onShowTaskHierarchy(serviceRequestId, taskId) {
            // get the html and display it in the model
            $.ajax({
                type: "GET",
                url: '@Url.Content("~/Dashboard/TaskHierarchy")' + '?serviceRequestId=' + serviceRequestId + '&taskId=' + taskId,
                contentType: "text/html",
                success: function (result) {
                    // inject the html into the modal and display it
                    var modalDiv = $("#dependencies-modal");
                    modalDiv.html(result);
                    modalDiv.modal('toggle');
                },
                error: function (err) {
                    alert(err.status + " - " + err.statusText);
                }
            }, this);
        }

        function onShowTaskList(serviceRequestId) {
            // get the html and display it in the model
            $.ajax({
                type: "GET",
                url: '@Url.Content("~/Dashboard/TaskList")' + '?serviceRequestId=' + serviceRequestId,
                contentType: "text/html",
                success: function (result) {
                    // inject the html into the modal and display it
                    var modalDiv = $("#tasklist-modal");
                    modalDiv.html(result);
                    modalDiv.modal('toggle');
                },
                error: function (err) {
                    alert(err.status + " - " + err.statusText);
                }
            }, this);
        }

        function onShowDiscussion(serviceRequestId) {
            $.ajax({
                type: "GET",
                url: '@Url.Content("~/Dashboard/Discussion")' + '?serviceRequestId=' + serviceRequestId,
                contentType: "text/html",
                success: function (result) {
                    // inject the html into the modal and display it
                    var modalDiv = $("#discussion-modal");
                    modalDiv.html(result);
                    modalDiv.modal('toggle');
                },
                error: function (err) {
                    alert(err.status + " - " + err.statusText);
                }
            }, this);
        }

    </script>
}