@using WebApp.Library.Extensions
@using Features = Orvosi.Shared.Enums.Features
@model CaseViewModel

@{
    var identity = User.Identity.GetClaimsIdentity();
    var roleId = identity.GetRoleId();
    var features = identity.GetFeatures();
}

    @if (features.Contains(Features.ServiceRequest.Edit))
    {
        <span class="btn-group">
            <a class="btn btn-default" target="_blank" href="@Model.BoxCaseFolderURL"><i class="fa fa-folder-open-o fa-lg"></i></a>
        </span>
        <div class="btn-group">
            @if (features.Contains(Features.ServiceRequest.ToggleNoShow))
            {
                if (Model.CanBeNoShow)
                {
                    if (Model.CancellationViewModel.IsNoShow)
                    {
                        <button type="button" onclick="noShow(@Model.ServiceRequestId , false)" class="btn btn-default btn-danger"><i class="fa fa-calendar-minus-o"></i> No Show</button>
                    }
                    else
                    {
                        <button type="button" onclick="noShow(@Model.ServiceRequestId , true)" class="btn btn-default "><i class="fa fa-calendar-minus-o"></i> No Show</button>
                    }
                }
            }
            @if (features.Contains(Features.ServiceRequest.Cancel))
                {
                    if (Model.CanBeUncancelled)
                    {
                    <a onclick="undoCancellation(@Model.ServiceRequestId)" class="btn btn-default btn-info"><i class="fa fa-ban"></i></a>
                    <a onclick="showDeleteRequest(@Model.ServiceRequestId)" class="btn btn-default"><i class="fa fa-trash"></i></a>
                }
                else if (Model.CanBeCancelled)
                {
                    <a onclick="showCancellationForm(@Model.ServiceRequestId)" class="btn btn-default"><i class="fa fa-ban"></i></a>
                }
            }
            @if (features.Contains(Features.ServiceRequest.ToggleOnHold))
            {
                if (Model.ServiceRequestStatusId == TaskStatuses.OnHold)
                {
                    <button type="button" onclick="onHold(@Model.ServiceRequestId , true)" class="btn btn-default btn-info"><i class="fa fa-hand-paper-o"></i></button>
                }
                else
                {
                    <button type="button" onclick="onHold(@Model.ServiceRequestId , false)" class="btn btn-default "><i class="fa fa-hand-paper-o"></i></button>
                }
            }
        </div>
        <div class="btn-group">
            @if (features.Contains(Features.ServiceRequest.AssignResources))
                {
                <a href="~/ServiceRequest/ResourceAssignment/@Model.ServiceRequestId" class="btn btn-default"><i class="fa fa-users"></i></a>
            }
            @if (features.Contains(Features.ServiceRequest.Reschedule))
                {
                    if (Model.CanBeRescheduled)
                    {
                    <a href="~/ServiceRequest/Reschedule/@Model.ServiceRequestId" class="btn btn-default"><i class="fa fa-calendar"></i></a>
                }
            }
            </div>
            <div class="btn-group">
                <a href="~/ServiceRequest/Edit/@Model.ServiceRequestId" class="btn btn-default"><i class="fa fa-pencil"></i></a>
                @if (features.Contains(Features.ServiceRequest.ChangeCompanyOrService))
                {
                    <a href="~/ServiceRequest/ChangeCompany/@Model.ServiceRequestId" class="btn btn-default"><i class="fa fa-building"></i></a>
                }
                @if (features.Contains(Features.ServiceRequest.ChangeProcessTemplate))
                {
                    <a href="~/ServiceRequest/ChangeProcessTemplate/@Model.ServiceRequestId" class="btn btn-default"><i class="fa fa-tasks"></i></a>
                }
            </div>
    }

